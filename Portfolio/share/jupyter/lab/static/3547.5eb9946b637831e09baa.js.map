{"version":3,"file":"3547.5eb9946b637831e09baa.js?v=5eb9946b637831e09baa","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/@codemirror/commands/dist/index.js"],"sourcesContent":["import { Annotation, Facet, combineConfig, StateField, EditorSelection, Transaction, ChangeSet, ChangeDesc, StateEffect, Text, findClusterBreak, countColumn, CharCategory } from '@codemirror/state';\nimport { EditorView, Direction } from '@codemirror/view';\nimport { IndentContext, getIndentation, indentString, matchBrackets, syntaxTree, getIndentUnit, indentUnit } from '@codemirror/language';\nimport { NodeProp } from '@lezer/common';\n\n/**\nComment or uncomment the current selection. Will use line comments\nif available, otherwise falling back to block comments.\n*/\nconst toggleComment = target => {\n    let { state } = target, line = state.doc.lineAt(state.selection.main.from), config = getConfig(target.state, line.from);\n    return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;\n};\nfunction command(f, option) {\n    return ({ state, dispatch }) => {\n        if (state.readOnly)\n            return false;\n        let tr = f(option, state);\n        if (!tr)\n            return false;\n        dispatch(state.update(tr));\n        return true;\n    };\n}\n/**\nComment or uncomment the current selection using line comments.\nThe line comment syntax is taken from the\n[`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).\n*/\nconst toggleLineComment = /*@__PURE__*/command(changeLineComment, 0 /* CommentOption.Toggle */);\n/**\nComment the current selection using line comments.\n*/\nconst lineComment = /*@__PURE__*/command(changeLineComment, 1 /* CommentOption.Comment */);\n/**\nUncomment the current selection using line comments.\n*/\nconst lineUncomment = /*@__PURE__*/command(changeLineComment, 2 /* CommentOption.Uncomment */);\n/**\nComment or uncomment the current selection using block comments.\nThe block comment syntax is taken from the\n[`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).\n*/\nconst toggleBlockComment = /*@__PURE__*/command(changeBlockComment, 0 /* CommentOption.Toggle */);\n/**\nComment the current selection using block comments.\n*/\nconst blockComment = /*@__PURE__*/command(changeBlockComment, 1 /* CommentOption.Comment */);\n/**\nUncomment the current selection using block comments.\n*/\nconst blockUncomment = /*@__PURE__*/command(changeBlockComment, 2 /* CommentOption.Uncomment */);\n/**\nComment or uncomment the lines around the current selection using\nblock comments.\n*/\nconst toggleBlockCommentByLine = /*@__PURE__*/command((o, s) => changeBlockComment(o, s, selectedLineRanges(s)), 0 /* CommentOption.Toggle */);\nfunction getConfig(state, pos) {\n    let data = state.languageDataAt(\"commentTokens\", pos);\n    return data.length ? data[0] : {};\n}\nconst SearchMargin = 50;\n/**\nDetermines if the given range is block-commented in the given\nstate.\n*/\nfunction findBlockComment(state, { open, close }, from, to) {\n    let textBefore = state.sliceDoc(from - SearchMargin, from);\n    let textAfter = state.sliceDoc(to, to + SearchMargin);\n    let spaceBefore = /\\s*$/.exec(textBefore)[0].length, spaceAfter = /^\\s*/.exec(textAfter)[0].length;\n    let beforeOff = textBefore.length - spaceBefore;\n    if (textBefore.slice(beforeOff - open.length, beforeOff) == open &&\n        textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {\n        return { open: { pos: from - spaceBefore, margin: spaceBefore && 1 },\n            close: { pos: to + spaceAfter, margin: spaceAfter && 1 } };\n    }\n    let startText, endText;\n    if (to - from <= 2 * SearchMargin) {\n        startText = endText = state.sliceDoc(from, to);\n    }\n    else {\n        startText = state.sliceDoc(from, from + SearchMargin);\n        endText = state.sliceDoc(to - SearchMargin, to);\n    }\n    let startSpace = /^\\s*/.exec(startText)[0].length, endSpace = /\\s*$/.exec(endText)[0].length;\n    let endOff = endText.length - endSpace - close.length;\n    if (startText.slice(startSpace, startSpace + open.length) == open &&\n        endText.slice(endOff, endOff + close.length) == close) {\n        return { open: { pos: from + startSpace + open.length,\n                margin: /\\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0 },\n            close: { pos: to - endSpace - close.length,\n                margin: /\\s/.test(endText.charAt(endOff - 1)) ? 1 : 0 } };\n    }\n    return null;\n}\nfunction selectedLineRanges(state) {\n    let ranges = [];\n    for (let r of state.selection.ranges) {\n        let fromLine = state.doc.lineAt(r.from);\n        let toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);\n        let last = ranges.length - 1;\n        if (last >= 0 && ranges[last].to > fromLine.from)\n            ranges[last].to = toLine.to;\n        else\n            ranges.push({ from: fromLine.from + /^\\s*/.exec(fromLine.text)[0].length, to: toLine.to });\n    }\n    return ranges;\n}\n// Performs toggle, comment and uncomment of block comments in\n// languages that support them.\nfunction changeBlockComment(option, state, ranges = state.selection.ranges) {\n    let tokens = ranges.map(r => getConfig(state, r.from).block);\n    if (!tokens.every(c => c))\n        return null;\n    let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));\n    if (option != 2 /* CommentOption.Uncomment */ && !comments.every(c => c)) {\n        return { changes: state.changes(ranges.map((range, i) => {\n                if (comments[i])\n                    return [];\n                return [{ from: range.from, insert: tokens[i].open + \" \" }, { from: range.to, insert: \" \" + tokens[i].close }];\n            })) };\n    }\n    else if (option != 1 /* CommentOption.Comment */ && comments.some(c => c)) {\n        let changes = [];\n        for (let i = 0, comment; i < comments.length; i++)\n            if (comment = comments[i]) {\n                let token = tokens[i], { open, close } = comment;\n                changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });\n            }\n        return { changes };\n    }\n    return null;\n}\n// Performs toggle, comment and uncomment of line comments.\nfunction changeLineComment(option, state, ranges = state.selection.ranges) {\n    let lines = [];\n    let prevLine = -1;\n    for (let { from, to } of ranges) {\n        let startI = lines.length, minIndent = 1e9;\n        let token = getConfig(state, from).line;\n        if (!token)\n            continue;\n        for (let pos = from; pos <= to;) {\n            let line = state.doc.lineAt(pos);\n            if (line.from > prevLine && (from == to || to > line.from)) {\n                prevLine = line.from;\n                let indent = /^\\s*/.exec(line.text)[0].length;\n                let empty = indent == line.length;\n                let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;\n                if (indent < line.text.length && indent < minIndent)\n                    minIndent = indent;\n                lines.push({ line, comment, token, indent, empty, single: false });\n            }\n            pos = line.to + 1;\n        }\n        if (minIndent < 1e9)\n            for (let i = startI; i < lines.length; i++)\n                if (lines[i].indent < lines[i].line.text.length)\n                    lines[i].indent = minIndent;\n        if (lines.length == startI + 1)\n            lines[startI].single = true;\n    }\n    if (option != 2 /* CommentOption.Uncomment */ && lines.some(l => l.comment < 0 && (!l.empty || l.single))) {\n        let changes = [];\n        for (let { line, token, indent, empty, single } of lines)\n            if (single || !empty)\n                changes.push({ from: line.from + indent, insert: token + \" \" });\n        let changeSet = state.changes(changes);\n        return { changes: changeSet, selection: state.selection.map(changeSet, 1) };\n    }\n    else if (option != 1 /* CommentOption.Comment */ && lines.some(l => l.comment >= 0)) {\n        let changes = [];\n        for (let { line, comment, token } of lines)\n            if (comment >= 0) {\n                let from = line.from + comment, to = from + token.length;\n                if (line.text[to - line.from] == \" \")\n                    to++;\n                changes.push({ from, to });\n            }\n        return { changes };\n    }\n    return null;\n}\n\nconst fromHistory = /*@__PURE__*/Annotation.define();\n/**\nTransaction annotation that will prevent that transaction from\nbeing combined with other transactions in the undo history. Given\n`\"before\"`, it'll prevent merging with previous transactions. With\n`\"after\"`, subsequent transactions won't be combined with this\none. With `\"full\"`, the transaction is isolated on both sides.\n*/\nconst isolateHistory = /*@__PURE__*/Annotation.define();\n/**\nThis facet provides a way to register functions that, given a\ntransaction, provide a set of effects that the history should\nstore when inverting the transaction. This can be used to\nintegrate some kinds of effects in the history, so that they can\nbe undone (and redone again).\n*/\nconst invertedEffects = /*@__PURE__*/Facet.define();\nconst historyConfig = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            minDepth: 100,\n            newGroupDelay: 500,\n            joinToEvent: (_t, isAdjacent) => isAdjacent,\n        }, {\n            minDepth: Math.max,\n            newGroupDelay: Math.min,\n            joinToEvent: (a, b) => (tr, adj) => a(tr, adj) || b(tr, adj)\n        });\n    }\n});\nfunction changeEnd(changes) {\n    let end = 0;\n    changes.iterChangedRanges((_, to) => end = to);\n    return end;\n}\nconst historyField_ = /*@__PURE__*/StateField.define({\n    create() {\n        return HistoryState.empty;\n    },\n    update(state, tr) {\n        let config = tr.state.facet(historyConfig);\n        let fromHist = tr.annotation(fromHistory);\n        if (fromHist) {\n            let selection = tr.docChanged ? EditorSelection.single(changeEnd(tr.changes)) : undefined;\n            let item = HistEvent.fromTransaction(tr, selection), from = fromHist.side;\n            let other = from == 0 /* BranchName.Done */ ? state.undone : state.done;\n            if (item)\n                other = updateBranch(other, other.length, config.minDepth, item);\n            else\n                other = addSelection(other, tr.startState.selection);\n            return new HistoryState(from == 0 /* BranchName.Done */ ? fromHist.rest : other, from == 0 /* BranchName.Done */ ? other : fromHist.rest);\n        }\n        let isolate = tr.annotation(isolateHistory);\n        if (isolate == \"full\" || isolate == \"before\")\n            state = state.isolate();\n        if (tr.annotation(Transaction.addToHistory) === false)\n            return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;\n        let event = HistEvent.fromTransaction(tr);\n        let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);\n        if (event)\n            state = state.addChanges(event, time, userEvent, config, tr);\n        else if (tr.selection)\n            state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);\n        if (isolate == \"full\" || isolate == \"after\")\n            state = state.isolate();\n        return state;\n    },\n    toJSON(value) {\n        return { done: value.done.map(e => e.toJSON()), undone: value.undone.map(e => e.toJSON()) };\n    },\n    fromJSON(json) {\n        return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));\n    }\n});\n/**\nCreate a history extension with the given configuration.\n*/\nfunction history(config = {}) {\n    return [\n        historyField_,\n        historyConfig.of(config),\n        EditorView.domEventHandlers({\n            beforeinput(e, view) {\n                let command = e.inputType == \"historyUndo\" ? undo : e.inputType == \"historyRedo\" ? redo : null;\n                if (!command)\n                    return false;\n                e.preventDefault();\n                return command(view);\n            }\n        })\n    ];\n}\n/**\nThe state field used to store the history data. Should probably\nonly be used when you want to\n[serialize](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) or\n[deserialize](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) state objects in a way\nthat preserves history.\n*/\nconst historyField = historyField_;\nfunction cmd(side, selection) {\n    return function ({ state, dispatch }) {\n        if (!selection && state.readOnly)\n            return false;\n        let historyState = state.field(historyField_, false);\n        if (!historyState)\n            return false;\n        let tr = historyState.pop(side, state, selection);\n        if (!tr)\n            return false;\n        dispatch(tr);\n        return true;\n    };\n}\n/**\nUndo a single group of history events. Returns false if no group\nwas available.\n*/\nconst undo = /*@__PURE__*/cmd(0 /* BranchName.Done */, false);\n/**\nRedo a group of history events. Returns false if no group was\navailable.\n*/\nconst redo = /*@__PURE__*/cmd(1 /* BranchName.Undone */, false);\n/**\nUndo a change or selection change.\n*/\nconst undoSelection = /*@__PURE__*/cmd(0 /* BranchName.Done */, true);\n/**\nRedo a change or selection change.\n*/\nconst redoSelection = /*@__PURE__*/cmd(1 /* BranchName.Undone */, true);\nfunction depth(side) {\n    return function (state) {\n        let histState = state.field(historyField_, false);\n        if (!histState)\n            return 0;\n        let branch = side == 0 /* BranchName.Done */ ? histState.done : histState.undone;\n        return branch.length - (branch.length && !branch[0].changes ? 1 : 0);\n    };\n}\n/**\nThe amount of undoable change events available in a given state.\n*/\nconst undoDepth = /*@__PURE__*/depth(0 /* BranchName.Done */);\n/**\nThe amount of redoable change events available in a given state.\n*/\nconst redoDepth = /*@__PURE__*/depth(1 /* BranchName.Undone */);\n// History events store groups of changes or effects that need to be\n// undone/redone together.\nclass HistEvent {\n    constructor(\n    // The changes in this event. Normal events hold at least one\n    // change or effect. But it may be necessary to store selection\n    // events before the first change, in which case a special type of\n    // instance is created which doesn't hold any changes, with\n    // changes == startSelection == undefined\n    changes, \n    // The effects associated with this event\n    effects, \n    // Accumulated mapping (from addToHistory==false) that should be\n    // applied to events below this one.\n    mapped, \n    // The selection before this event\n    startSelection, \n    // Stores selection changes after this event, to be used for\n    // selection undo/redo.\n    selectionsAfter) {\n        this.changes = changes;\n        this.effects = effects;\n        this.mapped = mapped;\n        this.startSelection = startSelection;\n        this.selectionsAfter = selectionsAfter;\n    }\n    setSelAfter(after) {\n        return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);\n    }\n    toJSON() {\n        var _a, _b, _c;\n        return {\n            changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),\n            mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),\n            startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),\n            selectionsAfter: this.selectionsAfter.map(s => s.toJSON())\n        };\n    }\n    static fromJSON(json) {\n        return new HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));\n    }\n    // This does not check `addToHistory` and such, it assumes the\n    // transaction needs to be converted to an item. Returns null when\n    // there are no changes or effects in the transaction.\n    static fromTransaction(tr, selection) {\n        let effects = none;\n        for (let invert of tr.startState.facet(invertedEffects)) {\n            let result = invert(tr);\n            if (result.length)\n                effects = effects.concat(result);\n        }\n        if (!effects.length && tr.changes.empty)\n            return null;\n        return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, selection || tr.startState.selection, none);\n    }\n    static selection(selections) {\n        return new HistEvent(undefined, none, undefined, undefined, selections);\n    }\n}\nfunction updateBranch(branch, to, maxLen, newEvent) {\n    let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;\n    let newBranch = branch.slice(start, to);\n    newBranch.push(newEvent);\n    return newBranch;\n}\nfunction isAdjacent(a, b) {\n    let ranges = [], isAdjacent = false;\n    a.iterChangedRanges((f, t) => ranges.push(f, t));\n    b.iterChangedRanges((_f, _t, f, t) => {\n        for (let i = 0; i < ranges.length;) {\n            let from = ranges[i++], to = ranges[i++];\n            if (t >= from && f <= to)\n                isAdjacent = true;\n        }\n    });\n    return isAdjacent;\n}\nfunction eqSelectionShape(a, b) {\n    return a.ranges.length == b.ranges.length &&\n        a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;\n}\nfunction conc(a, b) {\n    return !a.length ? b : !b.length ? a : a.concat(b);\n}\nconst none = [];\nconst MaxSelectionsPerEvent = 200;\nfunction addSelection(branch, selection) {\n    if (!branch.length) {\n        return [HistEvent.selection([selection])];\n    }\n    else {\n        let lastEvent = branch[branch.length - 1];\n        let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));\n        if (sels.length && sels[sels.length - 1].eq(selection))\n            return branch;\n        sels.push(selection);\n        return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));\n    }\n}\n// Assumes the top item has one or more selectionAfter values\nfunction popSelection(branch) {\n    let last = branch[branch.length - 1];\n    let newBranch = branch.slice();\n    newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));\n    return newBranch;\n}\n// Add a mapping to the top event in the given branch. If this maps\n// away all the changes and effects in that item, drop it and\n// propagate the mapping to the next item.\nfunction addMappingToBranch(branch, mapping) {\n    if (!branch.length)\n        return branch;\n    let length = branch.length, selections = none;\n    while (length) {\n        let event = mapEvent(branch[length - 1], mapping, selections);\n        if (event.changes && !event.changes.empty || event.effects.length) { // Event survived mapping\n            let result = branch.slice(0, length);\n            result[length - 1] = event;\n            return result;\n        }\n        else { // Drop this event, since there's no changes or effects left\n            mapping = event.mapped;\n            length--;\n            selections = event.selectionsAfter;\n        }\n    }\n    return selections.length ? [HistEvent.selection(selections)] : none;\n}\nfunction mapEvent(event, mapping, extraSelections) {\n    let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(s => s.map(mapping)) : none, extraSelections);\n    // Change-less events don't store mappings (they are always the last event in a branch)\n    if (!event.changes)\n        return HistEvent.selection(selections);\n    let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);\n    let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;\n    return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);\n}\nconst joinableUserEvent = /^(input\\.type|delete)($|\\.)/;\nclass HistoryState {\n    constructor(done, undone, prevTime = 0, prevUserEvent = undefined) {\n        this.done = done;\n        this.undone = undone;\n        this.prevTime = prevTime;\n        this.prevUserEvent = prevUserEvent;\n    }\n    isolate() {\n        return this.prevTime ? new HistoryState(this.done, this.undone) : this;\n    }\n    addChanges(event, time, userEvent, config, tr) {\n        let done = this.done, lastEvent = done[done.length - 1];\n        if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes &&\n            (!userEvent || joinableUserEvent.test(userEvent)) &&\n            ((!lastEvent.selectionsAfter.length &&\n                time - this.prevTime < config.newGroupDelay &&\n                config.joinToEvent(tr, isAdjacent(lastEvent.changes, event.changes))) ||\n                // For compose (but not compose.start) events, always join with previous event\n                userEvent == \"input.type.compose\")) {\n            done = updateBranch(done, done.length - 1, config.minDepth, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none));\n        }\n        else {\n            done = updateBranch(done, done.length, config.minDepth, event);\n        }\n        return new HistoryState(done, none, time, userEvent);\n    }\n    addSelection(selection, time, userEvent, newGroupDelay) {\n        let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none;\n        if (last.length > 0 &&\n            time - this.prevTime < newGroupDelay &&\n            userEvent == this.prevUserEvent && userEvent && /^select($|\\.)/.test(userEvent) &&\n            eqSelectionShape(last[last.length - 1], selection))\n            return this;\n        return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);\n    }\n    addMapping(mapping) {\n        return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);\n    }\n    pop(side, state, selection) {\n        let branch = side == 0 /* BranchName.Done */ ? this.done : this.undone;\n        if (branch.length == 0)\n            return null;\n        let event = branch[branch.length - 1];\n        if (selection && event.selectionsAfter.length) {\n            return state.update({\n                selection: event.selectionsAfter[event.selectionsAfter.length - 1],\n                annotations: fromHistory.of({ side, rest: popSelection(branch) }),\n                userEvent: side == 0 /* BranchName.Done */ ? \"select.undo\" : \"select.redo\",\n                scrollIntoView: true\n            });\n        }\n        else if (!event.changes) {\n            return null;\n        }\n        else {\n            let rest = branch.length == 1 ? none : branch.slice(0, branch.length - 1);\n            if (event.mapped)\n                rest = addMappingToBranch(rest, event.mapped);\n            return state.update({\n                changes: event.changes,\n                selection: event.startSelection,\n                effects: event.effects,\n                annotations: fromHistory.of({ side, rest }),\n                filter: false,\n                userEvent: side == 0 /* BranchName.Done */ ? \"undo\" : \"redo\",\n                scrollIntoView: true\n            });\n        }\n    }\n}\nHistoryState.empty = /*@__PURE__*/new HistoryState(none, none);\n/**\nDefault key bindings for the undo history.\n\n- Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#commands.undo).\n- Mod-y (Mod-Shift-z on macOS) + Ctrl-Shift-z on Linux: [`redo`](https://codemirror.net/6/docs/ref/#commands.redo).\n- Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#commands.undoSelection).\n- Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#commands.redoSelection).\n*/\nconst historyKeymap = [\n    { key: \"Mod-z\", run: undo, preventDefault: true },\n    { key: \"Mod-y\", mac: \"Mod-Shift-z\", run: redo, preventDefault: true },\n    { linux: \"Ctrl-Shift-z\", run: redo, preventDefault: true },\n    { key: \"Mod-u\", run: undoSelection, preventDefault: true },\n    { key: \"Alt-u\", mac: \"Mod-Shift-u\", run: redoSelection, preventDefault: true }\n];\n\nfunction updateSel(sel, by) {\n    return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);\n}\nfunction setSel(state, selection) {\n    return state.update({ selection, scrollIntoView: true, userEvent: \"select\" });\n}\nfunction moveSel({ state, dispatch }, how) {\n    let selection = updateSel(state.selection, how);\n    if (selection.eq(state.selection))\n        return false;\n    dispatch(setSel(state, selection));\n    return true;\n}\nfunction rangeEnd(range, forward) {\n    return EditorSelection.cursor(forward ? range.to : range.from);\n}\nfunction cursorByChar(view, forward) {\n    return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));\n}\nfunction ltrAtCursor(view) {\n    return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;\n}\n/**\nMove the selection one character to the left (which is backward in\nleft-to-right text, forward in right-to-left text).\n*/\nconst cursorCharLeft = view => cursorByChar(view, !ltrAtCursor(view));\n/**\nMove the selection one character to the right.\n*/\nconst cursorCharRight = view => cursorByChar(view, ltrAtCursor(view));\n/**\nMove the selection one character forward.\n*/\nconst cursorCharForward = view => cursorByChar(view, true);\n/**\nMove the selection one character backward.\n*/\nconst cursorCharBackward = view => cursorByChar(view, false);\nfunction cursorByGroup(view, forward) {\n    return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));\n}\n/**\nMove the selection to the left across one group of word or\nnon-word (but also non-space) characters.\n*/\nconst cursorGroupLeft = view => cursorByGroup(view, !ltrAtCursor(view));\n/**\nMove the selection one group to the right.\n*/\nconst cursorGroupRight = view => cursorByGroup(view, ltrAtCursor(view));\n/**\nMove the selection one group forward.\n*/\nconst cursorGroupForward = view => cursorByGroup(view, true);\n/**\nMove the selection one group backward.\n*/\nconst cursorGroupBackward = view => cursorByGroup(view, false);\nfunction moveBySubword(view, range, forward) {\n    let categorize = view.state.charCategorizer(range.from);\n    return view.moveByChar(range, forward, start => {\n        let cat = CharCategory.Space, pos = range.from;\n        let done = false, sawUpper = false, sawLower = false;\n        let step = (next) => {\n            if (done)\n                return false;\n            pos += forward ? next.length : -next.length;\n            let nextCat = categorize(next), ahead;\n            if (cat == CharCategory.Space)\n                cat = nextCat;\n            if (cat != nextCat)\n                return false;\n            if (cat == CharCategory.Word) {\n                if (next.toLowerCase() == next) {\n                    if (!forward && sawUpper)\n                        return false;\n                    sawLower = true;\n                }\n                else if (sawLower) {\n                    if (forward)\n                        return false;\n                    done = true;\n                }\n                else {\n                    if (sawUpper && forward && categorize(ahead = view.state.sliceDoc(pos, pos + 1)) == CharCategory.Word &&\n                        ahead.toLowerCase() == ahead)\n                        return false;\n                    sawUpper = true;\n                }\n            }\n            return true;\n        };\n        step(start);\n        return step;\n    });\n}\nfunction cursorBySubword(view, forward) {\n    return moveSel(view, range => range.empty ? moveBySubword(view, range, forward) : rangeEnd(range, forward));\n}\n/**\nMove the selection one group or camel-case subword forward.\n*/\nconst cursorSubwordForward = view => cursorBySubword(view, true);\n/**\nMove the selection one group or camel-case subword backward.\n*/\nconst cursorSubwordBackward = view => cursorBySubword(view, false);\nfunction interestingNode(state, node, bracketProp) {\n    if (node.type.prop(bracketProp))\n        return true;\n    let len = node.to - node.from;\n    return len && (len > 2 || /[^\\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;\n}\nfunction moveBySyntax(state, start, forward) {\n    let pos = syntaxTree(state).resolveInner(start.head);\n    let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;\n    // Scan forward through child nodes to see if there's an interesting\n    // node ahead.\n    for (let at = start.head;;) {\n        let next = forward ? pos.childAfter(at) : pos.childBefore(at);\n        if (!next)\n            break;\n        if (interestingNode(state, next, bracketProp))\n            pos = next;\n        else\n            at = forward ? next.to : next.from;\n    }\n    let bracket = pos.type.prop(bracketProp), match, newPos;\n    if (bracket && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched)\n        newPos = forward ? match.end.to : match.end.from;\n    else\n        newPos = forward ? pos.to : pos.from;\n    return EditorSelection.cursor(newPos, forward ? -1 : 1);\n}\n/**\nMove the cursor over the next syntactic element to the left.\n*/\nconst cursorSyntaxLeft = view => moveSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));\n/**\nMove the cursor over the next syntactic element to the right.\n*/\nconst cursorSyntaxRight = view => moveSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));\nfunction cursorByLine(view, forward) {\n    return moveSel(view, range => {\n        if (!range.empty)\n            return rangeEnd(range, forward);\n        let moved = view.moveVertically(range, forward);\n        return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);\n    });\n}\n/**\nMove the selection one line up.\n*/\nconst cursorLineUp = view => cursorByLine(view, false);\n/**\nMove the selection one line down.\n*/\nconst cursorLineDown = view => cursorByLine(view, true);\nfunction pageInfo(view) {\n    let selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2;\n    let marginTop = 0, marginBottom = 0, height;\n    if (selfScroll) {\n        for (let source of view.state.facet(EditorView.scrollMargins)) {\n            let margins = source(view);\n            if (margins === null || margins === void 0 ? void 0 : margins.top)\n                marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);\n            if (margins === null || margins === void 0 ? void 0 : margins.bottom)\n                marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);\n        }\n        height = view.scrollDOM.clientHeight - marginTop - marginBottom;\n    }\n    else {\n        height = (view.dom.ownerDocument.defaultView || window).innerHeight;\n    }\n    return { marginTop, marginBottom, selfScroll,\n        height: Math.max(view.defaultLineHeight, height - 5) };\n}\nfunction cursorByPage(view, forward) {\n    let page = pageInfo(view);\n    let { state } = view, selection = updateSel(state.selection, range => {\n        return range.empty ? view.moveVertically(range, forward, page.height)\n            : rangeEnd(range, forward);\n    });\n    if (selection.eq(state.selection))\n        return false;\n    let effect;\n    if (page.selfScroll) {\n        let startPos = view.coordsAtPos(state.selection.main.head);\n        let scrollRect = view.scrollDOM.getBoundingClientRect();\n        let scrollTop = scrollRect.top + page.marginTop, scrollBottom = scrollRect.bottom - page.marginBottom;\n        if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom)\n            effect = EditorView.scrollIntoView(selection.main.head, { y: \"start\", yMargin: startPos.top - scrollTop });\n    }\n    view.dispatch(setSel(state, selection), { effects: effect });\n    return true;\n}\n/**\nMove the selection one page up.\n*/\nconst cursorPageUp = view => cursorByPage(view, false);\n/**\nMove the selection one page down.\n*/\nconst cursorPageDown = view => cursorByPage(view, true);\nfunction moveByLineBoundary(view, start, forward) {\n    let line = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);\n    if (moved.head == start.head && moved.head != (forward ? line.to : line.from))\n        moved = view.moveToLineBoundary(start, forward, false);\n    if (!forward && moved.head == line.from && line.length) {\n        let space = /^\\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;\n        if (space && start.head != line.from + space)\n            moved = EditorSelection.cursor(line.from + space);\n    }\n    return moved;\n}\n/**\nMove the selection to the next line wrap point, or to the end of\nthe line if there isn't one left on this line.\n*/\nconst cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));\n/**\nMove the selection to previous line wrap point, or failing that to\nthe start of the line. If the line is indented, and the cursor\nisn't already at the end of the indentation, this will move to the\nend of the indentation instead of the start of the line.\n*/\nconst cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));\n/**\nMove the selection one line wrap point to the left.\n*/\nconst cursorLineBoundaryLeft = view => moveSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));\n/**\nMove the selection one line wrap point to the right.\n*/\nconst cursorLineBoundaryRight = view => moveSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));\n/**\nMove the selection to the start of the line.\n*/\nconst cursorLineStart = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));\n/**\nMove the selection to the end of the line.\n*/\nconst cursorLineEnd = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));\nfunction toMatchingBracket(state, dispatch, extend) {\n    let found = false, selection = updateSel(state.selection, range => {\n        let matching = matchBrackets(state, range.head, -1)\n            || matchBrackets(state, range.head, 1)\n            || (range.head > 0 && matchBrackets(state, range.head - 1, 1))\n            || (range.head < state.doc.length && matchBrackets(state, range.head + 1, -1));\n        if (!matching || !matching.end)\n            return range;\n        found = true;\n        let head = matching.start.from == range.head ? matching.end.to : matching.end.from;\n        return extend ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);\n    });\n    if (!found)\n        return false;\n    dispatch(setSel(state, selection));\n    return true;\n}\n/**\nMove the selection to the bracket matching the one it is currently\non, if any.\n*/\nconst cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);\n/**\nExtend the selection to the bracket matching the one the selection\nhead is currently on, if any.\n*/\nconst selectMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, true);\nfunction extendSel(view, how) {\n    let selection = updateSel(view.state.selection, range => {\n        let head = how(range);\n        return EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || undefined);\n    });\n    if (selection.eq(view.state.selection))\n        return false;\n    view.dispatch(setSel(view.state, selection));\n    return true;\n}\nfunction selectByChar(view, forward) {\n    return extendSel(view, range => view.moveByChar(range, forward));\n}\n/**\nMove the selection head one character to the left, while leaving\nthe anchor in place.\n*/\nconst selectCharLeft = view => selectByChar(view, !ltrAtCursor(view));\n/**\nMove the selection head one character to the right.\n*/\nconst selectCharRight = view => selectByChar(view, ltrAtCursor(view));\n/**\nMove the selection head one character forward.\n*/\nconst selectCharForward = view => selectByChar(view, true);\n/**\nMove the selection head one character backward.\n*/\nconst selectCharBackward = view => selectByChar(view, false);\nfunction selectByGroup(view, forward) {\n    return extendSel(view, range => view.moveByGroup(range, forward));\n}\n/**\nMove the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to\nthe left.\n*/\nconst selectGroupLeft = view => selectByGroup(view, !ltrAtCursor(view));\n/**\nMove the selection head one group to the right.\n*/\nconst selectGroupRight = view => selectByGroup(view, ltrAtCursor(view));\n/**\nMove the selection head one group forward.\n*/\nconst selectGroupForward = view => selectByGroup(view, true);\n/**\nMove the selection head one group backward.\n*/\nconst selectGroupBackward = view => selectByGroup(view, false);\nfunction selectBySubword(view, forward) {\n    return extendSel(view, range => moveBySubword(view, range, forward));\n}\n/**\nMove the selection head one group or camel-case subword forward.\n*/\nconst selectSubwordForward = view => selectBySubword(view, true);\n/**\nMove the selection head one group or subword backward.\n*/\nconst selectSubwordBackward = view => selectBySubword(view, false);\n/**\nMove the selection head over the next syntactic element to the left.\n*/\nconst selectSyntaxLeft = view => extendSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));\n/**\nMove the selection head over the next syntactic element to the right.\n*/\nconst selectSyntaxRight = view => extendSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));\nfunction selectByLine(view, forward) {\n    return extendSel(view, range => view.moveVertically(range, forward));\n}\n/**\nMove the selection head one line up.\n*/\nconst selectLineUp = view => selectByLine(view, false);\n/**\nMove the selection head one line down.\n*/\nconst selectLineDown = view => selectByLine(view, true);\nfunction selectByPage(view, forward) {\n    return extendSel(view, range => view.moveVertically(range, forward, pageInfo(view).height));\n}\n/**\nMove the selection head one page up.\n*/\nconst selectPageUp = view => selectByPage(view, false);\n/**\nMove the selection head one page down.\n*/\nconst selectPageDown = view => selectByPage(view, true);\n/**\nMove the selection head to the next line boundary.\n*/\nconst selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));\n/**\nMove the selection head to the previous line boundary.\n*/\nconst selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));\n/**\nMove the selection head one line boundary to the left.\n*/\nconst selectLineBoundaryLeft = view => extendSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));\n/**\nMove the selection head one line boundary to the right.\n*/\nconst selectLineBoundaryRight = view => extendSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));\n/**\nMove the selection head to the start of the line.\n*/\nconst selectLineStart = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from));\n/**\nMove the selection head to the end of the line.\n*/\nconst selectLineEnd = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to));\n/**\nMove the selection to the start of the document.\n*/\nconst cursorDocStart = ({ state, dispatch }) => {\n    dispatch(setSel(state, { anchor: 0 }));\n    return true;\n};\n/**\nMove the selection to the end of the document.\n*/\nconst cursorDocEnd = ({ state, dispatch }) => {\n    dispatch(setSel(state, { anchor: state.doc.length }));\n    return true;\n};\n/**\nMove the selection head to the start of the document.\n*/\nconst selectDocStart = ({ state, dispatch }) => {\n    dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));\n    return true;\n};\n/**\nMove the selection head to the end of the document.\n*/\nconst selectDocEnd = ({ state, dispatch }) => {\n    dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));\n    return true;\n};\n/**\nSelect the entire document.\n*/\nconst selectAll = ({ state, dispatch }) => {\n    dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: \"select\" }));\n    return true;\n};\n/**\nExpand the selection to cover entire lines.\n*/\nconst selectLine = ({ state, dispatch }) => {\n    let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));\n    dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: \"select\" }));\n    return true;\n};\n/**\nSelect the next syntactic construct that is larger than the\nselection. Note that this will only work insofar as the language\n[provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full\nsyntax tree.\n*/\nconst selectParentSyntax = ({ state, dispatch }) => {\n    let selection = updateSel(state.selection, range => {\n        var _a;\n        let context = syntaxTree(state).resolveInner(range.head, 1);\n        while (!((context.from < range.from && context.to >= range.to) ||\n            (context.to > range.to && context.from <= range.from) ||\n            !((_a = context.parent) === null || _a === void 0 ? void 0 : _a.parent)))\n            context = context.parent;\n        return EditorSelection.range(context.to, context.from);\n    });\n    dispatch(setSel(state, selection));\n    return true;\n};\n/**\nSimplify the current selection. When multiple ranges are selected,\nreduce it to its main range. Otherwise, if the selection is\nnon-empty, convert it to a cursor selection.\n*/\nconst simplifySelection = ({ state, dispatch }) => {\n    let cur = state.selection, selection = null;\n    if (cur.ranges.length > 1)\n        selection = EditorSelection.create([cur.main]);\n    else if (!cur.main.empty)\n        selection = EditorSelection.create([EditorSelection.cursor(cur.main.head)]);\n    if (!selection)\n        return false;\n    dispatch(setSel(state, selection));\n    return true;\n};\nfunction deleteBy(target, by) {\n    if (target.state.readOnly)\n        return false;\n    let event = \"delete.selection\", { state } = target;\n    let changes = state.changeByRange(range => {\n        let { from, to } = range;\n        if (from == to) {\n            let towards = by(from);\n            if (towards < from) {\n                event = \"delete.backward\";\n                towards = skipAtomic(target, towards, false);\n            }\n            else if (towards > from) {\n                event = \"delete.forward\";\n                towards = skipAtomic(target, towards, true);\n            }\n            from = Math.min(from, towards);\n            to = Math.max(to, towards);\n        }\n        else {\n            from = skipAtomic(target, from, false);\n            to = skipAtomic(target, to, true);\n        }\n        return from == to ? { range } : { changes: { from, to }, range: EditorSelection.cursor(from) };\n    });\n    if (changes.changes.empty)\n        return false;\n    target.dispatch(state.update(changes, {\n        scrollIntoView: true,\n        userEvent: event,\n        effects: event == \"delete.selection\" ? EditorView.announce.of(state.phrase(\"Selection deleted\")) : undefined\n    }));\n    return true;\n}\nfunction skipAtomic(target, pos, forward) {\n    if (target instanceof EditorView)\n        for (let ranges of target.state.facet(EditorView.atomicRanges).map(f => f(target)))\n            ranges.between(pos, pos, (from, to) => {\n                if (from < pos && to > pos)\n                    pos = forward ? to : from;\n            });\n    return pos;\n}\nconst deleteByChar = (target, forward) => deleteBy(target, pos => {\n    let { state } = target, line = state.doc.lineAt(pos), before, targetPos;\n    if (!forward && pos > line.from && pos < line.from + 200 &&\n        !/[^ \\t]/.test(before = line.text.slice(0, pos - line.from))) {\n        if (before[before.length - 1] == \"\\t\")\n            return pos - 1;\n        let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);\n        for (let i = 0; i < drop && before[before.length - 1 - i] == \" \"; i++)\n            pos--;\n        targetPos = pos;\n    }\n    else {\n        targetPos = findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;\n        if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))\n            targetPos += forward ? 1 : -1;\n    }\n    return targetPos;\n});\n/**\nDelete the selection, or, for cursor selections, the character\nbefore the cursor.\n*/\nconst deleteCharBackward = view => deleteByChar(view, false);\n/**\nDelete the selection or the character after the cursor.\n*/\nconst deleteCharForward = view => deleteByChar(view, true);\nconst deleteByGroup = (target, forward) => deleteBy(target, start => {\n    let pos = start, { state } = target, line = state.doc.lineAt(pos);\n    let categorize = state.charCategorizer(pos);\n    for (let cat = null;;) {\n        if (pos == (forward ? line.to : line.from)) {\n            if (pos == start && line.number != (forward ? state.doc.lines : 1))\n                pos += forward ? 1 : -1;\n            break;\n        }\n        let next = findClusterBreak(line.text, pos - line.from, forward) + line.from;\n        let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);\n        let nextCat = categorize(nextChar);\n        if (cat != null && nextCat != cat)\n            break;\n        if (nextChar != \" \" || pos != start)\n            cat = nextCat;\n        pos = next;\n    }\n    return pos;\n});\n/**\nDelete the selection or backward until the end of the next\n[group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of\nwhitespace when they consist of a single space.\n*/\nconst deleteGroupBackward = target => deleteByGroup(target, false);\n/**\nDelete the selection or forward until the end of the next group.\n*/\nconst deleteGroupForward = target => deleteByGroup(target, true);\n/**\nDelete the selection, or, if it is a cursor selection, delete to\nthe end of the line. If the cursor is directly at the end of the\nline, delete the line break after it.\n*/\nconst deleteToLineEnd = view => deleteBy(view, pos => {\n    let lineEnd = view.lineBlockAt(pos).to;\n    return pos < lineEnd ? lineEnd : Math.min(view.state.doc.length, pos + 1);\n});\n/**\nDelete the selection, or, if it is a cursor selection, delete to\nthe start of the line. If the cursor is directly at the start of the\nline, delete the line break before it.\n*/\nconst deleteToLineStart = view => deleteBy(view, pos => {\n    let lineStart = view.lineBlockAt(pos).from;\n    return pos > lineStart ? lineStart : Math.max(0, pos - 1);\n});\n/**\nDelete all whitespace directly before a line end from the\ndocument.\n*/\nconst deleteTrailingWhitespace = ({ state, dispatch }) => {\n    if (state.readOnly)\n        return false;\n    let changes = [];\n    for (let pos = 0, prev = \"\", iter = state.doc.iter();;) {\n        iter.next();\n        if (iter.lineBreak || iter.done) {\n            let trailing = prev.search(/\\s+$/);\n            if (trailing > -1)\n                changes.push({ from: pos - (prev.length - trailing), to: pos });\n            if (iter.done)\n                break;\n            prev = \"\";\n        }\n        else {\n            prev = iter.value;\n        }\n        pos += iter.value.length;\n    }\n    if (!changes.length)\n        return false;\n    dispatch(state.update({ changes, userEvent: \"delete\" }));\n    return true;\n};\n/**\nReplace each selection range with a line break, leaving the cursor\non the line before the break.\n*/\nconst splitLine = ({ state, dispatch }) => {\n    if (state.readOnly)\n        return false;\n    let changes = state.changeByRange(range => {\n        return { changes: { from: range.from, to: range.to, insert: Text.of([\"\", \"\"]) },\n            range: EditorSelection.cursor(range.from) };\n    });\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"input\" }));\n    return true;\n};\n/**\nFlip the characters before and after the cursor(s).\n*/\nconst transposeChars = ({ state, dispatch }) => {\n    if (state.readOnly)\n        return false;\n    let changes = state.changeByRange(range => {\n        if (!range.empty || range.from == 0 || range.from == state.doc.length)\n            return { range };\n        let pos = range.from, line = state.doc.lineAt(pos);\n        let from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;\n        let to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;\n        return { changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },\n            range: EditorSelection.cursor(to) };\n    });\n    if (changes.changes.empty)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"move.character\" }));\n    return true;\n};\nfunction selectedLineBlocks(state) {\n    let blocks = [], upto = -1;\n    for (let range of state.selection.ranges) {\n        let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);\n        if (!range.empty && range.to == endLine.from)\n            endLine = state.doc.lineAt(range.to - 1);\n        if (upto >= startLine.number) {\n            let prev = blocks[blocks.length - 1];\n            prev.to = endLine.to;\n            prev.ranges.push(range);\n        }\n        else {\n            blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });\n        }\n        upto = endLine.number + 1;\n    }\n    return blocks;\n}\nfunction moveLine(state, dispatch, forward) {\n    if (state.readOnly)\n        return false;\n    let changes = [], ranges = [];\n    for (let block of selectedLineBlocks(state)) {\n        if (forward ? block.to == state.doc.length : block.from == 0)\n            continue;\n        let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);\n        let size = nextLine.length + 1;\n        if (forward) {\n            changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });\n            for (let r of block.ranges)\n                ranges.push(EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));\n        }\n        else {\n            changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });\n            for (let r of block.ranges)\n                ranges.push(EditorSelection.range(r.anchor - size, r.head - size));\n        }\n    }\n    if (!changes.length)\n        return false;\n    dispatch(state.update({\n        changes,\n        scrollIntoView: true,\n        selection: EditorSelection.create(ranges, state.selection.mainIndex),\n        userEvent: \"move.line\"\n    }));\n    return true;\n}\n/**\nMove the selected lines up one line.\n*/\nconst moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);\n/**\nMove the selected lines down one line.\n*/\nconst moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);\nfunction copyLine(state, dispatch, forward) {\n    if (state.readOnly)\n        return false;\n    let changes = [];\n    for (let block of selectedLineBlocks(state)) {\n        if (forward)\n            changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });\n        else\n            changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });\n    }\n    dispatch(state.update({ changes, scrollIntoView: true, userEvent: \"input.copyline\" }));\n    return true;\n}\n/**\nCreate a copy of the selected lines. Keep the selection in the top copy.\n*/\nconst copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);\n/**\nCreate a copy of the selected lines. Keep the selection in the bottom copy.\n*/\nconst copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);\n/**\nDelete selected lines.\n*/\nconst deleteLine = view => {\n    if (view.state.readOnly)\n        return false;\n    let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {\n        if (from > 0)\n            from--;\n        else if (to < state.doc.length)\n            to++;\n        return { from, to };\n    }));\n    let selection = updateSel(state.selection, range => view.moveVertically(range, true)).map(changes);\n    view.dispatch({ changes, selection, scrollIntoView: true, userEvent: \"delete.line\" });\n    return true;\n};\n/**\nReplace the selection with a newline.\n*/\nconst insertNewline = ({ state, dispatch }) => {\n    dispatch(state.update(state.replaceSelection(state.lineBreak), { scrollIntoView: true, userEvent: \"input\" }));\n    return true;\n};\nfunction isBetweenBrackets(state, pos) {\n    if (/\\(\\)|\\[\\]|\\{\\}/.test(state.sliceDoc(pos - 1, pos + 1)))\n        return { from: pos, to: pos };\n    let context = syntaxTree(state).resolveInner(pos);\n    let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;\n    if (before && after && before.to <= pos && after.from >= pos &&\n        (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 &&\n        state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from)\n        return { from: before.to, to: after.from };\n    return null;\n}\n/**\nReplace the selection with a newline and indent the newly created\nline(s). If the current line consists only of whitespace, this\nwill also delete that whitespace. When the cursor is between\nmatching brackets, an additional newline will be inserted after\nthe cursor.\n*/\nconst insertNewlineAndIndent = /*@__PURE__*/newlineAndIndent(false);\n/**\nCreate a blank, indented line below the current line.\n*/\nconst insertBlankLine = /*@__PURE__*/newlineAndIndent(true);\nfunction newlineAndIndent(atEof) {\n    return ({ state, dispatch }) => {\n        if (state.readOnly)\n            return false;\n        let changes = state.changeByRange(range => {\n            let { from, to } = range, line = state.doc.lineAt(from);\n            let explode = !atEof && from == to && isBetweenBrackets(state, from);\n            if (atEof)\n                from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;\n            let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });\n            let indent = getIndentation(cx, from);\n            if (indent == null)\n                indent = /^\\s*/.exec(state.doc.lineAt(from).text)[0].length;\n            while (to < line.to && /\\s/.test(line.text[to - line.from]))\n                to++;\n            if (explode)\n                ({ from, to } = explode);\n            else if (from > line.from && from < line.from + 100 && !/\\S/.test(line.text.slice(0, from)))\n                from = line.from;\n            let insert = [\"\", indentString(state, indent)];\n            if (explode)\n                insert.push(indentString(state, cx.lineIndent(line.from, -1)));\n            return { changes: { from, to, insert: Text.of(insert) },\n                range: EditorSelection.cursor(from + 1 + insert[1].length) };\n        });\n        dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"input\" }));\n        return true;\n    };\n}\nfunction changeBySelectedLine(state, f) {\n    let atLine = -1;\n    return state.changeByRange(range => {\n        let changes = [];\n        for (let pos = range.from; pos <= range.to;) {\n            let line = state.doc.lineAt(pos);\n            if (line.number > atLine && (range.empty || range.to > line.from)) {\n                f(line, changes, range);\n                atLine = line.number;\n            }\n            pos = line.to + 1;\n        }\n        let changeSet = state.changes(changes);\n        return { changes,\n            range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1)) };\n    });\n}\n/**\nAuto-indent the selected lines. This uses the [indentation service\nfacet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent\ninformation.\n*/\nconst indentSelection = ({ state, dispatch }) => {\n    if (state.readOnly)\n        return false;\n    let updated = Object.create(null);\n    let context = new IndentContext(state, { overrideIndentation: start => {\n            let found = updated[start];\n            return found == null ? -1 : found;\n        } });\n    let changes = changeBySelectedLine(state, (line, changes, range) => {\n        let indent = getIndentation(context, line.from);\n        if (indent == null)\n            return;\n        if (!/\\S/.test(line.text))\n            indent = 0;\n        let cur = /^\\s*/.exec(line.text)[0];\n        let norm = indentString(state, indent);\n        if (cur != norm || range.from < line.from + cur.length) {\n            updated[line.from] = indent;\n            changes.push({ from: line.from, to: line.from + cur.length, insert: norm });\n        }\n    });\n    if (!changes.changes.empty)\n        dispatch(state.update(changes, { userEvent: \"indent\" }));\n    return true;\n};\n/**\nAdd a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected\nlines.\n*/\nconst indentMore = ({ state, dispatch }) => {\n    if (state.readOnly)\n        return false;\n    dispatch(state.update(changeBySelectedLine(state, (line, changes) => {\n        changes.push({ from: line.from, insert: state.facet(indentUnit) });\n    }), { userEvent: \"input.indent\" }));\n    return true;\n};\n/**\nRemove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all\nselected lines.\n*/\nconst indentLess = ({ state, dispatch }) => {\n    if (state.readOnly)\n        return false;\n    dispatch(state.update(changeBySelectedLine(state, (line, changes) => {\n        let space = /^\\s*/.exec(line.text)[0];\n        if (!space)\n            return;\n        let col = countColumn(space, state.tabSize), keep = 0;\n        let insert = indentString(state, Math.max(0, col - getIndentUnit(state)));\n        while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep))\n            keep++;\n        changes.push({ from: line.from + keep, to: line.from + space.length, insert: insert.slice(keep) });\n    }), { userEvent: \"delete.dedent\" }));\n    return true;\n};\n/**\nInsert a tab character at the cursor or, if something is selected,\nuse [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) to indent the entire\nselection.\n*/\nconst insertTab = ({ state, dispatch }) => {\n    if (state.selection.ranges.some(r => !r.empty))\n        return indentMore({ state, dispatch });\n    dispatch(state.update(state.replaceSelection(\"\\t\"), { scrollIntoView: true, userEvent: \"input\" }));\n    return true;\n};\n/**\nArray of key bindings containing the Emacs-style bindings that are\navailable on macOS by default.\n\n - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)\n - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)\n - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)\n - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)\n - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)\n - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)\n - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)\n - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)\n - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)\n - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)\n - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)\n - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)\n - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)\n - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)\n*/\nconst emacsStyleKeymap = [\n    { key: \"Ctrl-b\", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },\n    { key: \"Ctrl-f\", run: cursorCharRight, shift: selectCharRight },\n    { key: \"Ctrl-p\", run: cursorLineUp, shift: selectLineUp },\n    { key: \"Ctrl-n\", run: cursorLineDown, shift: selectLineDown },\n    { key: \"Ctrl-a\", run: cursorLineStart, shift: selectLineStart },\n    { key: \"Ctrl-e\", run: cursorLineEnd, shift: selectLineEnd },\n    { key: \"Ctrl-d\", run: deleteCharForward },\n    { key: \"Ctrl-h\", run: deleteCharBackward },\n    { key: \"Ctrl-k\", run: deleteToLineEnd },\n    { key: \"Ctrl-Alt-h\", run: deleteGroupBackward },\n    { key: \"Ctrl-o\", run: splitLine },\n    { key: \"Ctrl-t\", run: transposeChars },\n    { key: \"Ctrl-v\", run: cursorPageDown },\n];\n/**\nAn array of key bindings closely sticking to platform-standard or\nwidely used bindings. (This includes the bindings from\n[`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`\nproperty changed to `mac`.)\n\n - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)\n - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)\n - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)\n - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)\n - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)\n - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)\n - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)\n - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)\n - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)\n - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)\n - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)\n - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)\n - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)\n - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)\n - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)\n - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)\n - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)\n - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)\n - Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)\n - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)\n - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)\n - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)\n - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)\n - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)\n - Cmd-Backspace (macOS): [`deleteToLineStart`](https://codemirror.net/6/docs/ref/#commands.deleteToLineStart).\n - Cmd-Delete (macOS): [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd).\n*/\nconst standardKeymap = /*@__PURE__*/[\n    { key: \"ArrowLeft\", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },\n    { key: \"Mod-ArrowLeft\", mac: \"Alt-ArrowLeft\", run: cursorGroupLeft, shift: selectGroupLeft, preventDefault: true },\n    { mac: \"Cmd-ArrowLeft\", run: cursorLineBoundaryLeft, shift: selectLineBoundaryLeft, preventDefault: true },\n    { key: \"ArrowRight\", run: cursorCharRight, shift: selectCharRight, preventDefault: true },\n    { key: \"Mod-ArrowRight\", mac: \"Alt-ArrowRight\", run: cursorGroupRight, shift: selectGroupRight, preventDefault: true },\n    { mac: \"Cmd-ArrowRight\", run: cursorLineBoundaryRight, shift: selectLineBoundaryRight, preventDefault: true },\n    { key: \"ArrowUp\", run: cursorLineUp, shift: selectLineUp, preventDefault: true },\n    { mac: \"Cmd-ArrowUp\", run: cursorDocStart, shift: selectDocStart },\n    { mac: \"Ctrl-ArrowUp\", run: cursorPageUp, shift: selectPageUp },\n    { key: \"ArrowDown\", run: cursorLineDown, shift: selectLineDown, preventDefault: true },\n    { mac: \"Cmd-ArrowDown\", run: cursorDocEnd, shift: selectDocEnd },\n    { mac: \"Ctrl-ArrowDown\", run: cursorPageDown, shift: selectPageDown },\n    { key: \"PageUp\", run: cursorPageUp, shift: selectPageUp },\n    { key: \"PageDown\", run: cursorPageDown, shift: selectPageDown },\n    { key: \"Home\", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },\n    { key: \"Mod-Home\", run: cursorDocStart, shift: selectDocStart },\n    { key: \"End\", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },\n    { key: \"Mod-End\", run: cursorDocEnd, shift: selectDocEnd },\n    { key: \"Enter\", run: insertNewlineAndIndent },\n    { key: \"Mod-a\", run: selectAll },\n    { key: \"Backspace\", run: deleteCharBackward, shift: deleteCharBackward },\n    { key: \"Delete\", run: deleteCharForward },\n    { key: \"Mod-Backspace\", mac: \"Alt-Backspace\", run: deleteGroupBackward },\n    { key: \"Mod-Delete\", mac: \"Alt-Delete\", run: deleteGroupForward },\n    { mac: \"Mod-Backspace\", run: deleteToLineStart },\n    { mac: \"Mod-Delete\", run: deleteToLineEnd }\n].concat(/*@__PURE__*/emacsStyleKeymap.map(b => ({ mac: b.key, run: b.run, shift: b.shift })));\n/**\nThe default keymap. Includes all bindings from\n[`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:\n\n- Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)\n- Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)\n- Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)\n- Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)\n- Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)\n- Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)\n- Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)\n- Ctrl-Enter (Cmd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)\n- Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)\n- Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)\n- Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)\n- Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)\n- Ctrl-Alt-\\\\ (Cmd-Alt-\\\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)\n- Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)\n- Shift-Ctrl-\\\\ (Shift-Cmd-\\\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)\n- Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#commands.toggleComment).\n- Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#commands.toggleBlockComment).\n*/\nconst defaultKeymap = /*@__PURE__*/[\n    { key: \"Alt-ArrowLeft\", mac: \"Ctrl-ArrowLeft\", run: cursorSyntaxLeft, shift: selectSyntaxLeft },\n    { key: \"Alt-ArrowRight\", mac: \"Ctrl-ArrowRight\", run: cursorSyntaxRight, shift: selectSyntaxRight },\n    { key: \"Alt-ArrowUp\", run: moveLineUp },\n    { key: \"Shift-Alt-ArrowUp\", run: copyLineUp },\n    { key: \"Alt-ArrowDown\", run: moveLineDown },\n    { key: \"Shift-Alt-ArrowDown\", run: copyLineDown },\n    { key: \"Escape\", run: simplifySelection },\n    { key: \"Mod-Enter\", run: insertBlankLine },\n    { key: \"Alt-l\", mac: \"Ctrl-l\", run: selectLine },\n    { key: \"Mod-i\", run: selectParentSyntax, preventDefault: true },\n    { key: \"Mod-[\", run: indentLess },\n    { key: \"Mod-]\", run: indentMore },\n    { key: \"Mod-Alt-\\\\\", run: indentSelection },\n    { key: \"Shift-Mod-k\", run: deleteLine },\n    { key: \"Shift-Mod-\\\\\", run: cursorMatchingBracket },\n    { key: \"Mod-/\", run: toggleComment },\n    { key: \"Alt-A\", run: toggleBlockComment }\n].concat(standardKeymap);\n/**\nA binding that binds Tab to [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) and\nShift-Tab to [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess).\nPlease see the [Tab example](../../examples/tab/) before using\nthis.\n*/\nconst indentWithTab = { key: \"Tab\", run: indentMore, shift: indentLess };\n\nexport { blockComment, blockUncomment, copyLineDown, copyLineUp, cursorCharBackward, cursorCharForward, cursorCharLeft, cursorCharRight, cursorDocEnd, cursorDocStart, cursorGroupBackward, cursorGroupForward, cursorGroupLeft, cursorGroupRight, cursorLineBoundaryBackward, cursorLineBoundaryForward, cursorLineBoundaryLeft, cursorLineBoundaryRight, cursorLineDown, cursorLineEnd, cursorLineStart, cursorLineUp, cursorMatchingBracket, cursorPageDown, cursorPageUp, cursorSubwordBackward, cursorSubwordForward, cursorSyntaxLeft, cursorSyntaxRight, defaultKeymap, deleteCharBackward, deleteCharForward, deleteGroupBackward, deleteGroupForward, deleteLine, deleteToLineEnd, deleteToLineStart, deleteTrailingWhitespace, emacsStyleKeymap, history, historyField, historyKeymap, indentLess, indentMore, indentSelection, indentWithTab, insertBlankLine, insertNewline, insertNewlineAndIndent, insertTab, invertedEffects, isolateHistory, lineComment, lineUncomment, moveLineDown, moveLineUp, redo, redoDepth, redoSelection, selectAll, selectCharBackward, selectCharForward, selectCharLeft, selectCharRight, selectDocEnd, selectDocStart, selectGroupBackward, selectGroupForward, selectGroupLeft, selectGroupRight, selectLine, selectLineBoundaryBackward, selectLineBoundaryForward, selectLineBoundaryLeft, selectLineBoundaryRight, selectLineDown, selectLineEnd, selectLineStart, selectLineUp, selectMatchingBracket, selectPageDown, selectPageUp, selectParentSyntax, selectSubwordBackward, selectSubwordForward, selectSyntaxLeft, selectSyntaxRight, simplifySelection, splitLine, standardKeymap, toggleBlockComment, toggleBlockCommentByLine, toggleComment, toggleLineComment, transposeChars, undo, undoDepth, undoSelection };\n"],"names":["toggleComment","target","state","line","doc","lineAt","selection","main","from","config","getConfig","toggleLineComment","block","toggleBlockCommentByLine","command","f","option","dispatch","readOnly","tr","update","changeLineComment","lineComment","lineUncomment","toggleBlockComment","changeBlockComment","blockComment","blockUncomment","o","s","selectedLineRanges","pos","data","languageDataAt","length","SearchMargin","findBlockComment","open","close","to","textBefore","sliceDoc","textAfter","spaceBefore","exec","spaceAfter","beforeOff","slice","margin","startText","endText","startSpace","endSpace","endOff","test","charAt","ranges","r","fromLine","toLine","last","push","text","tokens","map","every","c","comments","i","changes","range","insert","some","comment","token","lines","prevLine","startI","minIndent","indent","empty","single","l","changeSet","fromHistory","Annotation","isolateHistory","invertedEffects","Facet","historyConfig","combine","configs","combineConfig","minDepth","newGroupDelay","joinToEvent","_t","isAdjacent","Math","max","min","a","b","adj","changeEnd","end","iterChangedRanges","_","historyField_","StateField","create","HistoryState","facet","fromHist","annotation","docChanged","EditorSelection","undefined","item","HistEvent","fromTransaction","side","other","undone","done","updateBranch","addSelection","startState","rest","isolate","Transaction","addMapping","desc","event","time","userEvent","addChanges","toJSON","value","e","fromJSON","json","history","of","EditorView","beforeinput","view","inputType","undo","redo","preventDefault","historyField","cmd","historyState","field","pop","undoSelection","redoSelection","depth","histState","branch","undoDepth","redoDepth","constructor","effects","mapped","startSelection","selectionsAfter","this","setSelAfter","after","_a","_b","_c","static","ChangeSet","ChangeDesc","none","invert","result","concat","selections","maxLen","newEvent","start","newBranch","t","_f","eqSelectionShape","filter","conc","MaxSelectionsPerEvent","lastEvent","sels","eq","popSelection","addMappingToBranch","mapping","mapEvent","extraSelections","mappedChanges","before","mapDesc","fullMapping","composeDesc","StateEffect","joinableUserEvent","prevTime","prevUserEvent","compose","annotations","scrollIntoView","historyKeymap","key","run","mac","linux","updateSel","sel","by","mainIndex","setSel","moveSel","how","rangeEnd","forward","cursorByChar","moveByChar","ltrAtCursor","textDirectionAt","head","Direction","cursorCharLeft","cursorCharRight","cursorCharForward","cursorCharBackward","cursorByGroup","moveByGroup","cursorGroupLeft","cursorGroupRight","cursorGroupForward","cursorGroupBackward","moveBySubword","categorize","charCategorizer","cat","CharCategory","sawUpper","sawLower","step","next","nextCat","ahead","toLowerCase","cursorBySubword","cursorSubwordForward","cursorSubwordBackward","interestingNode","node","bracketProp","type","prop","len","firstChild","moveBySyntax","syntaxTree","resolveInner","NodeProp","at","childAfter","childBefore","bracket","match","newPos","matchBrackets","matched","cursorSyntaxLeft","cursorSyntaxRight","cursorByLine","moved","moveVertically","moveToLineBoundary","cursorLineUp","cursorLineDown","pageInfo","selfScroll","scrollDOM","clientHeight","scrollHeight","marginTop","marginBottom","height","source","margins","top","bottom","dom","ownerDocument","defaultView","window","innerHeight","defaultLineHeight","cursorByPage","page","effect","startPos","coordsAtPos","scrollRect","getBoundingClientRect","scrollTop","scrollBottom","y","yMargin","cursorPageUp","cursorPageDown","moveByLineBoundary","lineBlockAt","space","cursorLineBoundaryForward","cursorLineBoundaryBackward","cursorLineBoundaryLeft","cursorLineBoundaryRight","cursorLineStart","cursorLineEnd","toMatchingBracket","extend","found","matching","anchor","cursorMatchingBracket","selectMatchingBracket","extendSel","goalColumn","bidiLevel","selectByChar","selectCharLeft","selectCharRight","selectCharForward","selectCharBackward","selectByGroup","selectGroupLeft","selectGroupRight","selectGroupForward","selectGroupBackward","selectBySubword","selectSubwordForward","selectSubwordBackward","selectSyntaxLeft","selectSyntaxRight","selectByLine","selectLineUp","selectLineDown","selectByPage","selectPageUp","selectPageDown","selectLineBoundaryForward","selectLineBoundaryBackward","selectLineBoundaryLeft","selectLineBoundaryRight","selectLineStart","selectLineEnd","cursorDocStart","cursorDocEnd","selectDocStart","selectDocEnd","selectAll","selectLine","selectedLineBlocks","selectParentSyntax","context","parent","simplifySelection","cur","deleteBy","changeByRange","towards","skipAtomic","phrase","between","deleteByChar","targetPos","col","countColumn","tabSize","drop","getIndentUnit","findClusterBreak","number","deleteCharBackward","deleteCharForward","deleteByGroup","nextChar","deleteGroupBackward","deleteGroupForward","deleteToLineEnd","lineEnd","deleteToLineStart","lineStart","deleteTrailingWhitespace","prev","iter","lineBreak","trailing","search","splitLine","Text","transposeChars","append","blocks","upto","startLine","endLine","moveLine","nextLine","size","moveLineUp","moveLineDown","copyLine","copyLineUp","copyLineDown","deleteLine","insertNewline","replaceSelection","isBetweenBrackets","closedBy","indexOf","name","insertNewlineAndIndent","newlineAndIndent","insertBlankLine","atEof","explode","cx","IndentContext","simulateBreak","simulateDoubleBreak","getIndentation","indentString","lineIndent","changeBySelectedLine","atLine","mapPos","indentSelection","updated","Object","overrideIndentation","norm","indentMore","indentUnit","indentLess","keep","charCodeAt","insertTab","emacsStyleKeymap","shift","standardKeymap","defaultKeymap","indentWithTab"],"sourceRoot":""}