{"version":3,"file":"1168.2873022b0b5f17eb450a.js?v=2873022b0b5f17eb450a","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/@jupyter/ydoc/lib/utils.js","webpack://@jupyterlab/application-top/./node_modules/y-protocols/awareness.js","webpack://@jupyterlab/application-top/./node_modules/@jupyter/ydoc/lib/ydocument.js","webpack://@jupyterlab/application-top/./node_modules/@jupyter/ydoc/lib/yfile.js","webpack://@jupyterlab/application-top/./node_modules/@jupyter/ydoc/lib/ycell.js","webpack://@jupyterlab/application-top/./node_modules/@jupyter/ydoc/lib/ynotebook.js","webpack://@jupyterlab/application-top/./node_modules/lib0/array.js","webpack://@jupyterlab/application-top/./node_modules/lib0/function.js","webpack://@jupyterlab/application-top/./node_modules/lib0/map.js","webpack://@jupyterlab/application-top/./node_modules/lib0/math.js","webpack://@jupyterlab/application-top/./node_modules/lib0/object.js","webpack://@jupyterlab/application-top/./node_modules/lib0/observable.js","webpack://@jupyterlab/application-top/./node_modules/lib0/set.js","webpack://@jupyterlab/application-top/./node_modules/lib0/time.js"],"sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nexport function convertYMapEventToMapChange(event) {\n    let changes = new Map();\n    event.changes.keys.forEach((event, key) => {\n        changes.set(key, {\n            action: event.action,\n            oldValue: event.oldValue,\n            newValue: this.ymeta.get(key)\n        });\n    });\n    return changes;\n}\n/**\n * Creates a mutual exclude function with the following property:\n *\n * ```js\n * const mutex = createMutex()\n * mutex(() => {\n *   // This function is immediately executed\n *   mutex(() => {\n *     // This function is not executed, as the mutex is already active.\n *   })\n * })\n * ```\n */\nexport const createMutex = () => {\n    let token = true;\n    return (f) => {\n        if (token) {\n            token = false;\n            try {\n                f();\n            }\n            finally {\n                token = true;\n            }\n        }\n    };\n};\n//# sourceMappingURL=utils.js.map","/**\n * @module awareness-protocol\n */\n\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as time from 'lib0/time'\nimport * as math from 'lib0/math'\nimport { Observable } from 'lib0/observable'\nimport * as f from 'lib0/function'\nimport * as Y from 'yjs' // eslint-disable-line\n\nexport const outdatedTimeout = 30000\n\n/**\n * @typedef {Object} MetaClientState\n * @property {number} MetaClientState.clock\n * @property {number} MetaClientState.lastUpdated unix timestamp\n */\n\n/**\n * The Awareness class implements a simple shared state protocol that can be used for non-persistent data like awareness information\n * (cursor, username, status, ..). Each client can update its own local state and listen to state changes of\n * remote clients. Every client may set a state of a remote peer to `null` to mark the client as offline.\n *\n * Each client is identified by a unique client id (something we borrow from `doc.clientID`). A client can override\n * its own state by propagating a message with an increasing timestamp (`clock`). If such a message is received, it is\n * applied if the known state of that client is older than the new state (`clock < newClock`). If a client thinks that\n * a remote client is offline, it may propagate a message with\n * `{ clock: currentClientClock, state: null, client: remoteClient }`. If such a\n * message is received, and the known clock of that client equals the received clock, it will override the state with `null`.\n *\n * Before a client disconnects, it should propagate a `null` state with an updated clock.\n *\n * Awareness states must be updated every 30 seconds. Otherwise the Awareness instance will delete the client state.\n *\n * @extends {Observable<string>}\n */\nexport class Awareness extends Observable {\n  /**\n   * @param {Y.Doc} doc\n   */\n  constructor (doc) {\n    super()\n    this.doc = doc\n    /**\n     * @type {number}\n     */\n    this.clientID = doc.clientID\n    /**\n     * Maps from client id to client state\n     * @type {Map<number, Object<string, any>>}\n     */\n    this.states = new Map()\n    /**\n     * @type {Map<number, MetaClientState>}\n     */\n    this.meta = new Map()\n    this._checkInterval = /** @type {any} */ (setInterval(() => {\n      const now = time.getUnixTime()\n      if (this.getLocalState() !== null && (outdatedTimeout / 2 <= now - /** @type {{lastUpdated:number}} */ (this.meta.get(this.clientID)).lastUpdated)) {\n        // renew local clock\n        this.setLocalState(this.getLocalState())\n      }\n      /**\n       * @type {Array<number>}\n       */\n      const remove = []\n      this.meta.forEach((meta, clientid) => {\n        if (clientid !== this.clientID && outdatedTimeout <= now - meta.lastUpdated && this.states.has(clientid)) {\n          remove.push(clientid)\n        }\n      })\n      if (remove.length > 0) {\n        removeAwarenessStates(this, remove, 'timeout')\n      }\n    }, math.floor(outdatedTimeout / 10)))\n    doc.on('destroy', () => {\n      this.destroy()\n    })\n    this.setLocalState({})\n  }\n\n  destroy () {\n    this.emit('destroy', [this])\n    this.setLocalState(null)\n    super.destroy()\n    clearInterval(this._checkInterval)\n  }\n\n  /**\n   * @return {Object<string,any>|null}\n   */\n  getLocalState () {\n    return this.states.get(this.clientID) || null\n  }\n\n  /**\n   * @param {Object<string,any>|null} state\n   */\n  setLocalState (state) {\n    const clientID = this.clientID\n    const currLocalMeta = this.meta.get(clientID)\n    const clock = currLocalMeta === undefined ? 0 : currLocalMeta.clock + 1\n    const prevState = this.states.get(clientID)\n    if (state === null) {\n      this.states.delete(clientID)\n    } else {\n      this.states.set(clientID, state)\n    }\n    this.meta.set(clientID, {\n      clock,\n      lastUpdated: time.getUnixTime()\n    })\n    const added = []\n    const updated = []\n    const filteredUpdated = []\n    const removed = []\n    if (state === null) {\n      removed.push(clientID)\n    } else if (prevState == null) {\n      if (state != null) {\n        added.push(clientID)\n      }\n    } else {\n      updated.push(clientID)\n      if (!f.equalityDeep(prevState, state)) {\n        filteredUpdated.push(clientID)\n      }\n    }\n    if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n      this.emit('change', [{ added, updated: filteredUpdated, removed }, 'local'])\n    }\n    this.emit('update', [{ added, updated, removed }, 'local'])\n  }\n\n  /**\n   * @param {string} field\n   * @param {any} value\n   */\n  setLocalStateField (field, value) {\n    const state = this.getLocalState()\n    if (state !== null) {\n      this.setLocalState({\n        ...state,\n        [field]: value\n      })\n    }\n  }\n\n  /**\n   * @return {Map<number,Object<string,any>>}\n   */\n  getStates () {\n    return this.states\n  }\n}\n\n/**\n * Mark (remote) clients as inactive and remove them from the list of active peers.\n * This change will be propagated to remote clients.\n *\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @param {any} origin\n */\nexport const removeAwarenessStates = (awareness, clients, origin) => {\n  const removed = []\n  for (let i = 0; i < clients.length; i++) {\n    const clientID = clients[i]\n    if (awareness.states.has(clientID)) {\n      awareness.states.delete(clientID)\n      if (clientID === awareness.clientID) {\n        const curMeta = /** @type {MetaClientState} */ (awareness.meta.get(clientID))\n        awareness.meta.set(clientID, {\n          clock: curMeta.clock + 1,\n          lastUpdated: time.getUnixTime()\n        })\n      }\n      removed.push(clientID)\n    }\n  }\n  if (removed.length > 0) {\n    awareness.emit('change', [{ added: [], updated: [], removed }, origin])\n    awareness.emit('update', [{ added: [], updated: [], removed }, origin])\n  }\n}\n\n/**\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @return {Uint8Array}\n */\nexport const encodeAwarenessUpdate = (awareness, clients, states = awareness.states) => {\n  const len = clients.length\n  const encoder = encoding.createEncoder()\n  encoding.writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    const clientID = clients[i]\n    const state = states.get(clientID) || null\n    const clock = /** @type {MetaClientState} */ (awareness.meta.get(clientID)).clock\n    encoding.writeVarUint(encoder, clientID)\n    encoding.writeVarUint(encoder, clock)\n    encoding.writeVarString(encoder, JSON.stringify(state))\n  }\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * Modify the content of an awareness update before re-encoding it to an awareness update.\n *\n * This might be useful when you have a central server that wants to ensure that clients\n * cant hijack somebody elses identity.\n *\n * @param {Uint8Array} update\n * @param {function(any):any} modify\n * @return {Uint8Array}\n */\nexport const modifyAwarenessUpdate = (update, modify) => {\n  const decoder = decoding.createDecoder(update)\n  const encoder = encoding.createEncoder()\n  const len = decoding.readVarUint(decoder)\n  encoding.writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    const clientID = decoding.readVarUint(decoder)\n    const clock = decoding.readVarUint(decoder)\n    const state = JSON.parse(decoding.readVarString(decoder))\n    const modifiedState = modify(state)\n    encoding.writeVarUint(encoder, clientID)\n    encoding.writeVarUint(encoder, clock)\n    encoding.writeVarString(encoder, JSON.stringify(modifiedState))\n  }\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * @param {Awareness} awareness\n * @param {Uint8Array} update\n * @param {any} origin This will be added to the emitted change event\n */\nexport const applyAwarenessUpdate = (awareness, update, origin) => {\n  const decoder = decoding.createDecoder(update)\n  const timestamp = time.getUnixTime()\n  const added = []\n  const updated = []\n  const filteredUpdated = []\n  const removed = []\n  const len = decoding.readVarUint(decoder)\n  for (let i = 0; i < len; i++) {\n    const clientID = decoding.readVarUint(decoder)\n    let clock = decoding.readVarUint(decoder)\n    const state = JSON.parse(decoding.readVarString(decoder))\n    const clientMeta = awareness.meta.get(clientID)\n    const prevState = awareness.states.get(clientID)\n    const currClock = clientMeta === undefined ? 0 : clientMeta.clock\n    if (currClock < clock || (currClock === clock && state === null && awareness.states.has(clientID))) {\n      if (state === null) {\n        // never let a remote client remove this local state\n        if (clientID === awareness.clientID && awareness.getLocalState() != null) {\n          // remote client removed the local state. Do not remote state. Broadcast a message indicating\n          // that this client still exists by increasing the clock\n          clock++\n        } else {\n          awareness.states.delete(clientID)\n        }\n      } else {\n        awareness.states.set(clientID, state)\n      }\n      awareness.meta.set(clientID, {\n        clock,\n        lastUpdated: timestamp\n      })\n      if (clientMeta === undefined && state !== null) {\n        added.push(clientID)\n      } else if (clientMeta !== undefined && state === null) {\n        removed.push(clientID)\n      } else if (state !== null) {\n        if (!f.equalityDeep(state, prevState)) {\n          filteredUpdated.push(clientID)\n        }\n        updated.push(clientID)\n      }\n    }\n  }\n  if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n    awareness.emit('change', [{\n      added, updated: filteredUpdated, removed\n    }, origin])\n  }\n  if (added.length > 0 || updated.length > 0 || removed.length > 0) {\n    awareness.emit('update', [{\n      added, updated, removed\n    }, origin])\n  }\n}\n","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { Awareness } from 'y-protocols/awareness';\nimport * as Y from 'yjs';\n/**\n * Generic shareable document.\n */\nexport class YDocument {\n    constructor(options) {\n        var _a;\n        /**\n         * Handle a change to the ystate.\n         */\n        this.onStateChanged = (event) => {\n            const stateChange = new Array();\n            event.keysChanged.forEach(key => {\n                const change = event.changes.keys.get(key);\n                if (change) {\n                    stateChange.push({\n                        name: key,\n                        oldValue: change.oldValue,\n                        newValue: this.ystate.get(key)\n                    });\n                }\n            });\n            this._changed.emit({ stateChange });\n        };\n        this._changed = new Signal(this);\n        this._isDisposed = false;\n        this._disposed = new Signal(this);\n        this._ydoc = (_a = options === null || options === void 0 ? void 0 : options.ydoc) !== null && _a !== void 0 ? _a : new Y.Doc();\n        this._ystate = this._ydoc.getMap('state');\n        this._undoManager = new Y.UndoManager([], {\n            trackedOrigins: new Set([this]),\n            doc: this._ydoc\n        });\n        this._awareness = new Awareness(this._ydoc);\n        this._ystate.observe(this.onStateChanged);\n    }\n    /**\n     * YJS document.\n     */\n    get ydoc() {\n        return this._ydoc;\n    }\n    /**\n     * Shared state\n     */\n    get ystate() {\n        return this._ystate;\n    }\n    /**\n     * YJS document undo manager\n     */\n    get undoManager() {\n        return this._undoManager;\n    }\n    /**\n     * Shared awareness\n     */\n    get awareness() {\n        return this._awareness;\n    }\n    /**\n     * The changed signal.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * A signal emitted when the document is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Whether the document is disposed or not.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Document state\n     */\n    get state() {\n        return JSONExt.deepCopy(this.ystate.toJSON());\n    }\n    /**\n     * Whether the object can undo changes.\n     */\n    canUndo() {\n        return this.undoManager.undoStack.length > 0;\n    }\n    /**\n     * Whether the object can redo changes.\n     */\n    canRedo() {\n        return this.undoManager.redoStack.length > 0;\n    }\n    /**\n     * Dispose of the resources.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this.ystate.unobserve(this.onStateChanged);\n        this.awareness.destroy();\n        this.undoManager.destroy();\n        this.ydoc.destroy();\n        this._disposed.emit();\n        Signal.clearData(this);\n    }\n    /**\n     * Get the value for a state attribute\n     *\n     * @param key Key to get\n     */\n    getState(key) {\n        const value = this.ystate.get(key);\n        return typeof value === 'undefined'\n            ? value\n            : JSONExt.deepCopy(value);\n    }\n    /**\n     * Set the value of a state attribute\n     *\n     * @param key Key to set\n     * @param value New attribute value\n     */\n    setState(key, value) {\n        if (!JSONExt.deepEqual(this.ystate.get(key), value)) {\n            this.ystate.set(key, value);\n        }\n    }\n    /**\n     * Undo an operation.\n     */\n    undo() {\n        this.undoManager.undo();\n    }\n    /**\n     * Redo an operation.\n     */\n    redo() {\n        this.undoManager.redo();\n    }\n    /**\n     * Clear the change stack.\n     */\n    clearUndoHistory() {\n        this.undoManager.clear();\n    }\n    /**\n     * Perform a transaction. While the function f is called, all changes to the shared\n     * document are bundled into a single event.\n     */\n    transact(f, undoable = true) {\n        this.ydoc.transact(f, undoable ? this : null);\n    }\n}\n//# sourceMappingURL=ydocument.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { YDocument } from './ydocument.js';\n/**\n * Shareable text file.\n */\nexport class YFile extends YDocument {\n    /**\n     * Create a new file\n     *\n     * #### Notes\n     * The document is empty and must be populated\n     */\n    constructor() {\n        super();\n        /**\n         * Document version\n         */\n        this.version = '1.0.0';\n        /**\n         * YJS file text.\n         */\n        this.ysource = this.ydoc.getText('source');\n        /**\n         * Handle a change to the ymodel.\n         */\n        this._modelObserver = (event) => {\n            this._changed.emit({ sourceChange: event.changes.delta });\n        };\n        this.undoManager.addToScope(this.ysource);\n        this.ysource.observe(this._modelObserver);\n    }\n    /**\n     * Creates a standalone YFile\n     */\n    static create() {\n        return new YFile();\n    }\n    /**\n     * File text\n     */\n    get source() {\n        return this.getSource();\n    }\n    set source(v) {\n        this.setSource(v);\n    }\n    /**\n     * Dispose of the resources.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this.ysource.unobserve(this._modelObserver);\n        super.dispose();\n    }\n    /**\n     * Get the file text.\n     *\n     * @returns File text.\n     */\n    getSource() {\n        return this.ysource.toString();\n    }\n    /**\n     * Set the file text.\n     *\n     * @param value New text\n     */\n    setSource(value) {\n        this.transact(() => {\n            const ytext = this.ysource;\n            ytext.delete(0, ytext.length);\n            ytext.insert(0, value);\n        });\n    }\n    /**\n     * Replace content from `start' to `end` with `value`.\n     *\n     * @param start: The start index of the range to replace (inclusive).\n     * @param end: The end index of the range to replace (exclusive).\n     * @param value: New source (optional).\n     */\n    updateSource(start, end, value = '') {\n        this.transact(() => {\n            const ysource = this.ysource;\n            // insert and then delete.\n            // This ensures that the cursor position is adjusted after the replaced content.\n            ysource.insert(start, value);\n            ysource.delete(start + value.length, end - start);\n        });\n    }\n}\n//# sourceMappingURL=yfile.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { JSONExt, UUID } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { Awareness } from 'y-protocols/awareness';\nimport * as Y from 'yjs';\n/**\n * Create a new shared cell model given the YJS shared type.\n */\nexport const createCellModelFromSharedType = (type, options = {}) => {\n    switch (type.get('cell_type')) {\n        case 'code':\n            return new YCodeCell(type, type.get('source'), type.get('outputs'), options);\n        case 'markdown':\n            return new YMarkdownCell(type, type.get('source'), options);\n        case 'raw':\n            return new YRawCell(type, type.get('source'), options);\n        default:\n            throw new Error('Found unknown cell type');\n    }\n};\n/**\n * Create a new cell that can be inserted in an existing shared model.\n *\n * If no notebook is specified the cell will be standalone.\n *\n * @param cell Cell JSON representation\n * @param notebook Notebook to which the cell will be added\n */\nexport const createCell = (cell, notebook) => {\n    var _a, _b;\n    const ymodel = new Y.Map();\n    const ysource = new Y.Text();\n    const ymetadata = new Y.Map();\n    ymodel.set('source', ysource);\n    ymodel.set('metadata', ymetadata);\n    ymodel.set('cell_type', cell.cell_type);\n    ymodel.set('id', (_a = cell.id) !== null && _a !== void 0 ? _a : UUID.uuid4());\n    let ycell;\n    switch (cell.cell_type) {\n        case 'markdown': {\n            ycell = new YMarkdownCell(ymodel, ysource, { notebook }, ymetadata);\n            if (cell.attachments != null) {\n                ycell.setAttachments(cell.attachments);\n            }\n            break;\n        }\n        case 'code': {\n            const youtputs = new Y.Array();\n            ymodel.set('outputs', youtputs);\n            ycell = new YCodeCell(ymodel, ysource, youtputs, {\n                notebook\n            }, ymetadata);\n            const cCell = cell;\n            ycell.execution_count = (_b = cCell.execution_count) !== null && _b !== void 0 ? _b : null;\n            if (cCell.outputs) {\n                ycell.setOutputs(cCell.outputs);\n            }\n            break;\n        }\n        default: {\n            // raw\n            ycell = new YRawCell(ymodel, ysource, { notebook }, ymetadata);\n            if (cell.attachments) {\n                ycell.setAttachments(cell.attachments);\n            }\n            break;\n        }\n    }\n    if (cell.metadata != null) {\n        ycell.setMetadata(cell.metadata);\n    }\n    if (cell.source != null) {\n        ycell.setSource(typeof cell.source === 'string' ? cell.source : cell.source.join(''));\n    }\n    return ycell;\n};\n/**\n * Create a new cell that cannot be inserted in an existing shared model.\n *\n * @param cell Cell JSON representation\n */\nexport const createStandaloneCell = (cell) => createCell(cell);\nexport class YBaseCell {\n    /**\n     * Create a new YCell that works standalone. It cannot be\n     * inserted into a YNotebook because the Yjs model is already\n     * attached to an anonymous Y.Doc instance.\n     */\n    static create(id) {\n        return createCell({ id, cell_type: this.prototype.cell_type });\n    }\n    /**\n     * Base cell constructor\n     *\n     * ### Notes\n     * Don't use the constructor directly - prefer using ``YNotebook.insertCell``\n     *\n     * The ``ysource`` is needed because ``ymodel.get('source')`` will\n     * not return the real source if the model is not yet attached to\n     * a document. Requesting it explicitly allows to introspect a non-empty\n     * source before the cell is attached to the document.\n     *\n     * @param ymodel Cell map\n     * @param ysource Cell source\n     * @param options \\{ notebook?: The notebook the cell is attached to \\}\n     * @param ymetadata Cell metadata\n     */\n    constructor(ymodel, ysource, options = {}, ymetadata) {\n        /**\n         * Handle a change to the ymodel.\n         */\n        this._modelObserver = (events) => {\n            this._changed.emit(this.getChanges(events));\n        };\n        this._metadataChanged = new Signal(this);\n        /**\n         * The notebook that this cell belongs to.\n         */\n        this._notebook = null;\n        this._changed = new Signal(this);\n        this._disposed = new Signal(this);\n        this._isDisposed = false;\n        this._undoManager = null;\n        this.ymodel = ymodel;\n        this._ysource = ysource;\n        this._ymetadata = ymetadata !== null && ymetadata !== void 0 ? ymetadata : this.ymodel.get('metadata');\n        this._prevSourceLength = ysource ? ysource.length : 0;\n        this._notebook = null;\n        this._awareness = null;\n        this._undoManager = null;\n        if (options.notebook) {\n            this._notebook = options.notebook;\n            // We cannot create a undo manager with the cell not yet attached in the notebook\n            // so we defer that to the notebook insertCell method\n        }\n        else {\n            // Standalone cell\n            const doc = new Y.Doc();\n            doc.getArray().insert(0, [this.ymodel]);\n            this._awareness = new Awareness(doc);\n            this._undoManager = new Y.UndoManager([this.ymodel], {\n                trackedOrigins: new Set([this])\n            });\n        }\n        this.ymodel.observeDeep(this._modelObserver);\n    }\n    /**\n     * Cell notebook awareness or null if the cell is standalone.\n     */\n    get awareness() {\n        var _a, _b, _c;\n        return (_c = (_a = this._awareness) !== null && _a !== void 0 ? _a : (_b = this.notebook) === null || _b === void 0 ? void 0 : _b.awareness) !== null && _c !== void 0 ? _c : null;\n    }\n    /**\n     * The type of the cell.\n     */\n    get cell_type() {\n        throw new Error('A YBaseCell must not be constructed');\n    }\n    /**\n     * The changed signal.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Signal emitted when the cell is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Cell id\n     */\n    get id() {\n        return this.getId();\n    }\n    /**\n     * Whether the model has been disposed or not.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Whether the cell is standalone or not.\n     *\n     * If the cell is standalone. It cannot be\n     * inserted into a YNotebook because the Yjs model is already\n     * attached to an anonymous Y.Doc instance.\n     */\n    get isStandalone() {\n        return this._notebook !== null;\n    }\n    /**\n     * Cell metadata.\n     *\n     * #### Notes\n     * You should prefer to access and modify the specific key of interest.\n     */\n    get metadata() {\n        return this.getMetadata();\n    }\n    set metadata(v) {\n        this.setMetadata(v);\n    }\n    /**\n     * Signal triggered when the cell metadata changes.\n     */\n    get metadataChanged() {\n        return this._metadataChanged;\n    }\n    /**\n     * The notebook that this cell belongs to.\n     */\n    get notebook() {\n        return this._notebook;\n    }\n    /**\n     * Cell input content.\n     */\n    get source() {\n        return this.getSource();\n    }\n    set source(v) {\n        this.setSource(v);\n    }\n    /**\n     * The cell undo manager.\n     */\n    get undoManager() {\n        var _a;\n        if (!this.notebook) {\n            return this._undoManager;\n        }\n        return ((_a = this.notebook) === null || _a === void 0 ? void 0 : _a.disableDocumentWideUndoRedo)\n            ? this._undoManager\n            : this.notebook.undoManager;\n    }\n    /**\n     * Defer setting the undo manager as it requires the\n     * cell to be attached to the notebook Y document.\n     */\n    setUndoManager() {\n        if (this._undoManager) {\n            throw new Error('The cell undo manager is already set.');\n        }\n        if (this._notebook && this._notebook.disableDocumentWideUndoRedo) {\n            this._undoManager = new Y.UndoManager([this.ymodel], {\n                trackedOrigins: new Set([this])\n            });\n        }\n    }\n    get ysource() {\n        return this._ysource;\n    }\n    /**\n     * Whether the object can undo changes.\n     */\n    canUndo() {\n        return !!this.undoManager && this.undoManager.undoStack.length > 0;\n    }\n    /**\n     * Whether the object can redo changes.\n     */\n    canRedo() {\n        return !!this.undoManager && this.undoManager.redoStack.length > 0;\n    }\n    /**\n     * Clear the change stack.\n     */\n    clearUndoHistory() {\n        var _a;\n        (_a = this.undoManager) === null || _a === void 0 ? void 0 : _a.clear();\n    }\n    /**\n     * Undo an operation.\n     */\n    undo() {\n        var _a;\n        (_a = this.undoManager) === null || _a === void 0 ? void 0 : _a.undo();\n    }\n    /**\n     * Redo an operation.\n     */\n    redo() {\n        var _a;\n        (_a = this.undoManager) === null || _a === void 0 ? void 0 : _a.redo();\n    }\n    /**\n     * Dispose of the resources.\n     */\n    dispose() {\n        var _a;\n        if (this._isDisposed)\n            return;\n        this._isDisposed = true;\n        this.ymodel.unobserveDeep(this._modelObserver);\n        if (this._awareness) {\n            // A new document is created for standalone cell.\n            const doc = this._awareness.doc;\n            this._awareness.destroy();\n            doc.destroy();\n        }\n        if (this._undoManager) {\n            // Be sure to not destroy the document undo manager.\n            if (this._undoManager === ((_a = this.notebook) === null || _a === void 0 ? void 0 : _a.undoManager)) {\n                this._undoManager = null;\n            }\n            else {\n                this._undoManager.destroy();\n            }\n        }\n        this._disposed.emit();\n        Signal.clearData(this);\n    }\n    /**\n     * Get cell id.\n     *\n     * @returns Cell id\n     */\n    getId() {\n        return this.ymodel.get('id');\n    }\n    /**\n     * Gets cell's source.\n     *\n     * @returns Cell's source.\n     */\n    getSource() {\n        return this.ysource.toString();\n    }\n    /**\n     * Sets cell's source.\n     *\n     * @param value: New source.\n     */\n    setSource(value) {\n        this.transact(() => {\n            this.ysource.delete(0, this.ysource.length);\n            this.ysource.insert(0, value);\n        });\n        // @todo Do we need proper replace semantic? This leads to issues in editor bindings because they don't switch source.\n        // this.ymodel.set('source', new Y.Text(value));\n    }\n    /**\n     * Replace content from `start' to `end` with `value`.\n     *\n     * @param start: The start index of the range to replace (inclusive).\n     *\n     * @param end: The end index of the range to replace (exclusive).\n     *\n     * @param value: New source (optional).\n     */\n    updateSource(start, end, value = '') {\n        this.transact(() => {\n            const ysource = this.ysource;\n            // insert and then delete.\n            // This ensures that the cursor position is adjusted after the replaced content.\n            ysource.insert(start, value);\n            ysource.delete(start + value.length, end - start);\n        });\n    }\n    /**\n     * Delete a metadata cell.\n     *\n     * @param key The key to delete\n     */\n    deleteMetadata(key) {\n        if (typeof this.getMetadata(key) === 'undefined') {\n            return;\n        }\n        this.transact(() => {\n            this._ymetadata.delete(key);\n            const jupyter = this.getMetadata('jupyter');\n            if (key === 'collapsed' && jupyter) {\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const { outputs_hidden, ...others } = jupyter;\n                if (Object.keys(others).length === 0) {\n                    this._ymetadata.delete('jupyter');\n                }\n                else {\n                    this._ymetadata.set('jupyter', others);\n                }\n            }\n            else if (key === 'jupyter') {\n                this._ymetadata.delete('collapsed');\n            }\n        }, false);\n    }\n    getMetadata(key) {\n        const metadata = this._ymetadata;\n        // Transiently the metadata can be missing - like during destruction\n        if (metadata === undefined) {\n            return undefined;\n        }\n        if (typeof key === 'string') {\n            const value = metadata.get(key);\n            return typeof value === 'undefined'\n                ? undefined // undefined is converted to `{}` by `JSONExt.deepCopy`\n                : JSONExt.deepCopy(metadata.get(key));\n        }\n        else {\n            return JSONExt.deepCopy(metadata.toJSON());\n        }\n    }\n    setMetadata(metadata, value) {\n        var _a, _b;\n        if (typeof metadata === 'string') {\n            if (typeof value === 'undefined') {\n                throw new TypeError(`Metadata value for ${metadata} cannot be 'undefined'; use deleteMetadata.`);\n            }\n            const key = metadata;\n            // Only set metadata if we change something to avoid infinite\n            // loop of signal changes.\n            if (JSONExt.deepEqual((_a = this.getMetadata(key)) !== null && _a !== void 0 ? _a : null, value)) {\n                return;\n            }\n            this.transact(() => {\n                var _a;\n                this._ymetadata.set(key, value);\n                if (key === 'collapsed') {\n                    const jupyter = ((_a = this.getMetadata('jupyter')) !== null && _a !== void 0 ? _a : {});\n                    if (jupyter.outputs_hidden !== value) {\n                        this.setMetadata('jupyter', {\n                            ...jupyter,\n                            outputs_hidden: value\n                        });\n                    }\n                }\n                else if (key === 'jupyter') {\n                    const isHidden = value['outputs_hidden'];\n                    if (typeof isHidden !== 'undefined') {\n                        if (this.getMetadata('collapsed') !== isHidden) {\n                            this.setMetadata('collapsed', isHidden);\n                        }\n                    }\n                    else {\n                        this.deleteMetadata('collapsed');\n                    }\n                }\n            }, false);\n        }\n        else {\n            const clone = JSONExt.deepCopy(metadata);\n            if (clone.collapsed != null) {\n                clone.jupyter = clone.jupyter || {};\n                clone.jupyter.outputs_hidden = clone.collapsed;\n            }\n            else if (((_b = clone === null || clone === void 0 ? void 0 : clone.jupyter) === null || _b === void 0 ? void 0 : _b.outputs_hidden) != null) {\n                clone.collapsed = clone.jupyter.outputs_hidden;\n            }\n            if (!JSONExt.deepEqual(clone, this.getMetadata())) {\n                this.transact(() => {\n                    for (const [key, value] of Object.entries(clone)) {\n                        this._ymetadata.set(key, value);\n                    }\n                }, false);\n            }\n        }\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return {\n            id: this.getId(),\n            cell_type: this.cell_type,\n            source: this.getSource(),\n            metadata: this.getMetadata()\n        };\n    }\n    /**\n     * Perform a transaction. While the function f is called, all changes to the shared\n     * document are bundled into a single event.\n     *\n     * @param f Transaction to execute\n     * @param undoable Whether to track the change in the action history or not (default `true`)\n     */\n    transact(f, undoable = true) {\n        !this.notebook || this.notebook.disableDocumentWideUndoRedo\n            ? this.ymodel.doc == null\n                ? f()\n                : this.ymodel.doc.transact(f, undoable ? this : null)\n            : this.notebook.transact(f, undoable);\n    }\n    /**\n     * Extract changes from YJS events\n     *\n     * @param events YJS events\n     * @returns Cell changes\n     */\n    getChanges(events) {\n        const changes = {};\n        const sourceEvent = events.find(event => event.target === this.ymodel.get('source'));\n        if (sourceEvent) {\n            changes.sourceChange = sourceEvent.changes.delta;\n        }\n        const metadataEvents = events.find(event => event.target === this._ymetadata);\n        if (metadataEvents) {\n            changes.metadataChange = metadataEvents.changes.keys;\n            metadataEvents.changes.keys.forEach((change, key) => {\n                switch (change.action) {\n                    case 'add':\n                        this._metadataChanged.emit({\n                            key,\n                            newValue: this._ymetadata.get(key),\n                            type: 'add'\n                        });\n                        break;\n                    case 'delete':\n                        this._metadataChanged.emit({\n                            key,\n                            oldValue: change.oldValue,\n                            type: 'remove'\n                        });\n                        break;\n                    case 'update':\n                        {\n                            const newValue = this._ymetadata.get(key);\n                            const oldValue = change.oldValue;\n                            let equal = true;\n                            if (typeof oldValue == 'object' && typeof newValue == 'object') {\n                                equal = JSONExt.deepEqual(oldValue, newValue);\n                            }\n                            else {\n                                equal = oldValue === newValue;\n                            }\n                            if (!equal) {\n                                this._metadataChanged.emit({\n                                    key,\n                                    type: 'change',\n                                    oldValue,\n                                    newValue\n                                });\n                            }\n                        }\n                        break;\n                }\n            });\n        }\n        const modelEvent = events.find(event => event.target === this.ymodel);\n        // The model allows us to replace the complete source with a new string. We express this in the Delta format\n        // as a replace of the complete string.\n        const ysource = this.ymodel.get('source');\n        if (modelEvent && modelEvent.keysChanged.has('source')) {\n            changes.sourceChange = [\n                { delete: this._prevSourceLength },\n                { insert: ysource.toString() }\n            ];\n        }\n        this._prevSourceLength = ysource.length;\n        return changes;\n    }\n}\n/**\n * Shareable code cell.\n */\nexport class YCodeCell extends YBaseCell {\n    /**\n     * Create a new YCodeCell that works standalone. It cannot be\n     * inserted into a YNotebook because the Yjs model is already\n     * attached to an anonymous Y.Doc instance.\n     */\n    static create(id) {\n        return super.create(id);\n    }\n    /**\n     * Code cell constructor\n     *\n     * ### Notes\n     * Don't use the constructor directly - prefer using ``YNotebook.insertCell``\n     *\n     * The ``ysource`` is needed because ``ymodel.get('source')`` will\n     * not return the real source if the model is not yet attached to\n     * a document. Requesting it explicitly allows to introspect a non-empty\n     * source before the cell is attached to the document.\n     *\n     * @param ymodel Cell map\n     * @param ysource Cell source\n     * @param youtputs Code cell outputs\n     * @param options \\{ notebook?: The notebook the cell is attached to \\}\n     * @param ymetadata Cell metadata\n     */\n    constructor(ymodel, ysource, youtputs, options = {}, ymetadata) {\n        super(ymodel, ysource, options, ymetadata);\n        this._youtputs = youtputs;\n    }\n    /**\n     * The type of the cell.\n     */\n    get cell_type() {\n        return 'code';\n    }\n    /**\n     * The code cell's prompt number. Will be null if the cell has not been run.\n     */\n    get execution_count() {\n        return this.ymodel.get('execution_count') || null;\n    }\n    set execution_count(count) {\n        // Do not use `this.execution_count`. When initializing the\n        // cell, we need to set execution_count to `null` if we compare\n        // using `this.execution_count` it will return `null` and we will\n        // never initialize it\n        if (this.ymodel.get('execution_count') !== count) {\n            this.transact(() => {\n                this.ymodel.set('execution_count', count);\n            }, false);\n        }\n    }\n    /**\n     * Cell outputs.\n     */\n    get outputs() {\n        return this.getOutputs();\n    }\n    set outputs(v) {\n        this.setOutputs(v);\n    }\n    /**\n     * Execution, display, or stream outputs.\n     */\n    getOutputs() {\n        return JSONExt.deepCopy(this._youtputs.toArray());\n    }\n    /**\n     * Replace all outputs.\n     */\n    setOutputs(outputs) {\n        this.transact(() => {\n            this._youtputs.delete(0, this._youtputs.length);\n            this._youtputs.insert(0, outputs);\n        }, false);\n    }\n    /**\n     * Replace content from `start' to `end` with `outputs`.\n     *\n     * @param start: The start index of the range to replace (inclusive).\n     *\n     * @param end: The end index of the range to replace (exclusive).\n     *\n     * @param outputs: New outputs (optional).\n     */\n    updateOutputs(start, end, outputs = []) {\n        const fin = end < this._youtputs.length ? end - start : this._youtputs.length - start;\n        this.transact(() => {\n            this._youtputs.delete(start, fin);\n            this._youtputs.insert(start, outputs);\n        }, false);\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            outputs: this.getOutputs(),\n            execution_count: this.execution_count\n        };\n    }\n    /**\n     * Extract changes from YJS events\n     *\n     * @param events YJS events\n     * @returns Cell changes\n     */\n    getChanges(events) {\n        const changes = super.getChanges(events);\n        const outputEvent = events.find(event => event.target === this.ymodel.get('outputs'));\n        if (outputEvent) {\n            changes.outputsChange = outputEvent.changes.delta;\n        }\n        const modelEvent = events.find(event => event.target === this.ymodel);\n        if (modelEvent && modelEvent.keysChanged.has('execution_count')) {\n            const change = modelEvent.changes.keys.get('execution_count');\n            changes.executionCountChange = {\n                oldValue: change.oldValue,\n                newValue: this.ymodel.get('execution_count')\n            };\n        }\n        return changes;\n    }\n}\nclass YAttachmentCell extends YBaseCell {\n    /**\n     * Cell attachments\n     */\n    get attachments() {\n        return this.getAttachments();\n    }\n    set attachments(v) {\n        this.setAttachments(v);\n    }\n    /**\n     * Gets the cell attachments.\n     *\n     * @returns The cell attachments.\n     */\n    getAttachments() {\n        return this.ymodel.get('attachments');\n    }\n    /**\n     * Sets the cell attachments\n     *\n     * @param attachments: The cell attachments.\n     */\n    setAttachments(attachments) {\n        this.transact(() => {\n            if (attachments == null) {\n                this.ymodel.delete('attachments');\n            }\n            else {\n                this.ymodel.set('attachments', attachments);\n            }\n        }, false);\n    }\n    /**\n     * Extract changes from YJS events\n     *\n     * @param events YJS events\n     * @returns Cell changes\n     */\n    getChanges(events) {\n        const changes = super.getChanges(events);\n        const modelEvent = events.find(event => event.target === this.ymodel);\n        if (modelEvent && modelEvent.keysChanged.has('attachments')) {\n            const change = modelEvent.changes.keys.get('attachments');\n            changes.executionCountChange = {\n                oldValue: change.oldValue,\n                newValue: this.ymodel.get('attachments')\n            };\n        }\n        return changes;\n    }\n}\n/**\n * Shareable raw cell.\n */\nexport class YRawCell extends YAttachmentCell {\n    /**\n     * Create a new YRawCell that works standalone. It cannot be\n     * inserted into a YNotebook because the Yjs model is already\n     * attached to an anonymous Y.Doc instance.\n     */\n    static create(id) {\n        return super.create(id);\n    }\n    /**\n     * String identifying the type of cell.\n     */\n    get cell_type() {\n        return 'raw';\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return {\n            id: this.getId(),\n            cell_type: 'raw',\n            source: this.getSource(),\n            metadata: this.getMetadata(),\n            attachments: this.getAttachments()\n        };\n    }\n}\n/**\n * Shareable markdown cell.\n */\nexport class YMarkdownCell extends YAttachmentCell {\n    /**\n     * Create a new YMarkdownCell that works standalone. It cannot be\n     * inserted into a YNotebook because the Yjs model is already\n     * attached to an anonymous Y.Doc instance.\n     */\n    static create(id) {\n        return super.create(id);\n    }\n    /**\n     * String identifying the type of cell.\n     */\n    get cell_type() {\n        return 'markdown';\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return {\n            id: this.getId(),\n            cell_type: 'markdown',\n            source: this.getSource(),\n            metadata: this.getMetadata(),\n            attachments: this.getAttachments()\n        };\n    }\n}\n//# sourceMappingURL=ycell.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport * as Y from 'yjs';\nimport { YDocument } from './ydocument.js';\nimport { createCell, createCellModelFromSharedType } from './ycell.js';\n/**\n * Shared implementation of the Shared Document types.\n *\n * Shared cells can be inserted into a SharedNotebook.\n * Shared cells only start emitting events when they are connected to a SharedNotebook.\n *\n * \"Standalone\" cells must not be inserted into a (Shared)Notebook.\n * Standalone cells emit events immediately after they have been created, but they must not\n * be included into a (Shared)Notebook.\n */\nexport class YNotebook extends YDocument {\n    /**\n     * Create a new notebook\n     *\n     * #### Notes\n     * The document is empty and must be populated\n     *\n     * @param options\n     */\n    constructor(options = {}) {\n        var _a;\n        super();\n        /**\n         * Document version\n         */\n        this.version = '1.0.0';\n        /**\n         * YJS map for the notebook metadata\n         */\n        this.ymeta = this.ydoc.getMap('meta');\n        /**\n         * Handle a change to the ystate.\n         */\n        this._onMetaChanged = (events) => {\n            const metadataEvents = events.find(event => event.target === this.ymeta.get('metadata'));\n            if (metadataEvents) {\n                const metadataChange = metadataEvents.changes.keys;\n                const ymetadata = this.ymeta.get('metadata');\n                metadataEvents.changes.keys.forEach((change, key) => {\n                    switch (change.action) {\n                        case 'add':\n                            this._metadataChanged.emit({\n                                key,\n                                type: 'add',\n                                newValue: ymetadata.get(key)\n                            });\n                            break;\n                        case 'delete':\n                            this._metadataChanged.emit({\n                                key,\n                                type: 'remove',\n                                oldValue: change.oldValue\n                            });\n                            break;\n                        case 'update':\n                            {\n                                const newValue = ymetadata.get(key);\n                                const oldValue = change.oldValue;\n                                let equal = true;\n                                if (typeof oldValue == 'object' && typeof newValue == 'object') {\n                                    equal = JSONExt.deepEqual(oldValue, newValue);\n                                }\n                                else {\n                                    equal = oldValue === newValue;\n                                }\n                                if (!equal) {\n                                    this._metadataChanged.emit({\n                                        key,\n                                        type: 'change',\n                                        oldValue,\n                                        newValue\n                                    });\n                                }\n                            }\n                            break;\n                    }\n                });\n                this._changed.emit({ metadataChange });\n            }\n            const metaEvent = events.find(event => event.target === this.ymeta);\n            if (!metaEvent) {\n                return;\n            }\n            if (metaEvent.keysChanged.has('metadata')) {\n                // Handle metadata change when adding/removing the YMap\n                const change = metaEvent.changes.keys.get('metadata');\n                if ((change === null || change === void 0 ? void 0 : change.action) === 'add' && !change.oldValue) {\n                    const metadataChange = new Map();\n                    for (const key of Object.keys(this.metadata)) {\n                        metadataChange.set(key, {\n                            action: 'add',\n                            oldValue: undefined\n                        });\n                        this._metadataChanged.emit({\n                            key,\n                            type: 'add',\n                            newValue: this.getMetadata(key)\n                        });\n                    }\n                    this._changed.emit({ metadataChange });\n                }\n            }\n            if (metaEvent.keysChanged.has('nbformat')) {\n                const change = metaEvent.changes.keys.get('nbformat');\n                const nbformatChanged = {\n                    key: 'nbformat',\n                    oldValue: (change === null || change === void 0 ? void 0 : change.oldValue) ? change.oldValue : undefined,\n                    newValue: this.nbformat\n                };\n                this._changed.emit({ nbformatChanged });\n            }\n            if (metaEvent.keysChanged.has('nbformat_minor')) {\n                const change = metaEvent.changes.keys.get('nbformat_minor');\n                const nbformatChanged = {\n                    key: 'nbformat_minor',\n                    oldValue: (change === null || change === void 0 ? void 0 : change.oldValue) ? change.oldValue : undefined,\n                    newValue: this.nbformat_minor\n                };\n                this._changed.emit({ nbformatChanged });\n            }\n        };\n        /**\n         * Handle a change to the list of cells.\n         */\n        this._onYCellsChanged = (event) => {\n            // update the type cell mapping by iterating through the added/removed types\n            event.changes.added.forEach(item => {\n                const type = item.content.type;\n                if (!this._ycellMapping.has(type)) {\n                    const c = createCellModelFromSharedType(type, { notebook: this });\n                    c.setUndoManager();\n                    this._ycellMapping.set(type, c);\n                }\n            });\n            event.changes.deleted.forEach(item => {\n                const type = item.content.type;\n                const model = this._ycellMapping.get(type);\n                if (model) {\n                    model.dispose();\n                    this._ycellMapping.delete(type);\n                }\n            });\n            let index = 0;\n            // this reflects the event.changes.delta, but replaces the content of delta.insert with ycells\n            const cellsChange = [];\n            event.changes.delta.forEach((d) => {\n                if (d.insert != null) {\n                    const insertedCells = d.insert.map((ycell) => this._ycellMapping.get(ycell));\n                    cellsChange.push({ insert: insertedCells });\n                    this.cells.splice(index, 0, ...insertedCells);\n                    index += d.insert.length;\n                }\n                else if (d.delete != null) {\n                    cellsChange.push(d);\n                    this.cells.splice(index, d.delete);\n                }\n                else if (d.retain != null) {\n                    cellsChange.push(d);\n                    index += d.retain;\n                }\n            });\n            this._changed.emit({\n                cellsChange: cellsChange\n            });\n        };\n        this._metadataChanged = new Signal(this);\n        /**\n         * Internal Yjs cells list\n         */\n        this._ycells = this.ydoc.getArray('cells');\n        this._ycellMapping = new WeakMap();\n        this._disableDocumentWideUndoRedo =\n            (_a = options.disableDocumentWideUndoRedo) !== null && _a !== void 0 ? _a : false;\n        this.cells = this._ycells.toArray().map(ycell => {\n            if (!this._ycellMapping.has(ycell)) {\n                this._ycellMapping.set(ycell, createCellModelFromSharedType(ycell, { notebook: this }));\n            }\n            return this._ycellMapping.get(ycell);\n        });\n        this.undoManager.addToScope(this._ycells);\n        this._ycells.observe(this._onYCellsChanged);\n        this.ymeta.observeDeep(this._onMetaChanged);\n    }\n    /**\n     * Creates a standalone YNotebook\n     *\n     * Note: This method is useful when we need to initialize\n     * the YNotebook from the JavaScript side.\n     */\n    static create(options = {}) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const ynotebook = new YNotebook({\n            disableDocumentWideUndoRedo: (_a = options.disableDocumentWideUndoRedo) !== null && _a !== void 0 ? _a : false\n        });\n        const data = {\n            cells: (_c = (_b = options.data) === null || _b === void 0 ? void 0 : _b.cells) !== null && _c !== void 0 ? _c : [],\n            nbformat: (_e = (_d = options.data) === null || _d === void 0 ? void 0 : _d.nbformat) !== null && _e !== void 0 ? _e : 4,\n            nbformat_minor: (_g = (_f = options.data) === null || _f === void 0 ? void 0 : _f.nbformat_minor) !== null && _g !== void 0 ? _g : 5,\n            metadata: (_j = (_h = options.data) === null || _h === void 0 ? void 0 : _h.metadata) !== null && _j !== void 0 ? _j : {}\n        };\n        ynotebook.fromJSON(data);\n        return ynotebook;\n    }\n    /**\n     * Wether the undo/redo logic should be\n     * considered on the full document across all cells.\n     *\n     * Default: false\n     */\n    get disableDocumentWideUndoRedo() {\n        return this._disableDocumentWideUndoRedo;\n    }\n    /**\n     * Notebook metadata\n     */\n    get metadata() {\n        return this.getMetadata();\n    }\n    set metadata(v) {\n        this.setMetadata(v);\n    }\n    /**\n     * Signal triggered when a metadata changes.\n     */\n    get metadataChanged() {\n        return this._metadataChanged;\n    }\n    /**\n     * nbformat major version\n     */\n    get nbformat() {\n        return this.ymeta.get('nbformat');\n    }\n    set nbformat(value) {\n        this.transact(() => {\n            this.ymeta.set('nbformat', value);\n        }, false);\n    }\n    /**\n     * nbformat minor version\n     */\n    get nbformat_minor() {\n        return this.ymeta.get('nbformat_minor');\n    }\n    set nbformat_minor(value) {\n        this.transact(() => {\n            this.ymeta.set('nbformat_minor', value);\n        }, false);\n    }\n    /**\n     * Dispose of the resources.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._ycells.unobserve(this._onYCellsChanged);\n        this.ymeta.unobserveDeep(this._onMetaChanged);\n        super.dispose();\n    }\n    /**\n     * Get a shared cell by index.\n     *\n     * @param index: Cell's position.\n     *\n     * @returns The requested shared cell.\n     */\n    getCell(index) {\n        return this.cells[index];\n    }\n    /**\n     * Add a shared cell at the notebook bottom.\n     *\n     * @param cell Cell to add.\n     *\n     * @returns The added cell.\n     */\n    addCell(cell) {\n        return this.insertCell(this._ycells.length, cell);\n    }\n    /**\n     * Insert a shared cell into a specific position.\n     *\n     * @param index: Cell's position.\n     * @param cell: Cell to insert.\n     *\n     * @returns The inserted cell.\n     */\n    insertCell(index, cell) {\n        return this.insertCells(index, [cell])[0];\n    }\n    /**\n     * Insert a list of shared cells into a specific position.\n     *\n     * @param index: Position to insert the cells.\n     * @param cells: Array of shared cells to insert.\n     *\n     * @returns The inserted cells.\n     */\n    insertCells(index, cells) {\n        const yCells = cells.map(c => {\n            const cell = createCell(c, this);\n            this._ycellMapping.set(cell.ymodel, cell);\n            return cell;\n        });\n        this.transact(() => {\n            this._ycells.insert(index, yCells.map(cell => cell.ymodel));\n        });\n        yCells.forEach(c => {\n            c.setUndoManager();\n        });\n        return yCells;\n    }\n    /**\n     * Move a cell.\n     *\n     * @param fromIndex: Index of the cell to move.\n     * @param toIndex: New position of the cell.\n     */\n    moveCell(fromIndex, toIndex) {\n        this.moveCells(fromIndex, toIndex);\n    }\n    /**\n     * Move cells.\n     *\n     * @param fromIndex: Index of the first cells to move.\n     * @param toIndex: New position of the first cell (in the current array).\n     * @param n: Number of cells to move (default 1)\n     */\n    moveCells(fromIndex, toIndex, n = 1) {\n        // FIXME we need to use yjs move feature to preserve undo history\n        const clones = new Array(n)\n            .fill(true)\n            .map((_, idx) => this.getCell(fromIndex + idx).toJSON());\n        this.transact(() => {\n            this._ycells.delete(fromIndex, n);\n            this._ycells.insert(fromIndex > toIndex ? toIndex : toIndex - n + 1, clones.map(clone => createCell(clone, this).ymodel));\n        });\n    }\n    /**\n     * Remove a cell.\n     *\n     * @param index: Index of the cell to remove.\n     */\n    deleteCell(index) {\n        this.deleteCellRange(index, index + 1);\n    }\n    /**\n     * Remove a range of cells.\n     *\n     * @param from: The start index of the range to remove (inclusive).\n     * @param to: The end index of the range to remove (exclusive).\n     */\n    deleteCellRange(from, to) {\n        // Cells will be removed from the mapping in the model event listener.\n        this.transact(() => {\n            this._ycells.delete(from, to - from);\n        });\n    }\n    /**\n     * Delete a metadata notebook.\n     *\n     * @param key The key to delete\n     */\n    deleteMetadata(key) {\n        if (typeof this.getMetadata(key) === 'undefined') {\n            return;\n        }\n        const allMetadata = this.metadata;\n        delete allMetadata[key];\n        this.setMetadata(allMetadata);\n    }\n    getMetadata(key) {\n        const ymetadata = this.ymeta.get('metadata');\n        // Transiently the metadata can be missing - like during destruction\n        if (ymetadata === undefined) {\n            return undefined;\n        }\n        if (typeof key === 'string') {\n            const value = ymetadata.get(key);\n            return typeof value === 'undefined'\n                ? undefined // undefined is converted to `{}` by `JSONExt.deepCopy`\n                : JSONExt.deepCopy(value);\n        }\n        else {\n            return JSONExt.deepCopy(ymetadata.toJSON());\n        }\n    }\n    setMetadata(metadata, value) {\n        var _a;\n        if (typeof metadata === 'string') {\n            if (typeof value === 'undefined') {\n                throw new TypeError(`Metadata value for ${metadata} cannot be 'undefined'; use deleteMetadata.`);\n            }\n            if (JSONExt.deepEqual((_a = this.getMetadata(metadata)) !== null && _a !== void 0 ? _a : null, value)) {\n                return;\n            }\n            const update = {};\n            update[metadata] = value;\n            this.updateMetadata(update);\n        }\n        else {\n            if (!this.metadata || !JSONExt.deepEqual(this.metadata, metadata)) {\n                const clone = JSONExt.deepCopy(metadata);\n                const ymetadata = this.ymeta.get('metadata');\n                // Transiently the metadata can be missing - like during destruction\n                if (ymetadata === undefined) {\n                    return undefined;\n                }\n                this.transact(() => {\n                    ymetadata.clear();\n                    for (const [key, value] of Object.entries(clone)) {\n                        ymetadata.set(key, value);\n                    }\n                });\n            }\n        }\n    }\n    /**\n     * Updates the metadata associated with the notebook.\n     *\n     * @param value: Metadata's attribute to update.\n     */\n    updateMetadata(value) {\n        // TODO: Maybe modify only attributes instead of replacing the whole metadata?\n        const clone = JSONExt.deepCopy(value);\n        const ymetadata = this.ymeta.get('metadata');\n        // Transiently the metadata can be missing - like during destruction\n        if (ymetadata === undefined) {\n            return undefined;\n        }\n        this.transact(() => {\n            for (const [key, value] of Object.entries(clone)) {\n                ymetadata.set(key, value);\n            }\n        });\n    }\n    /**\n     * Override the notebook with a JSON-serialized document.\n     *\n     * @param value The notebook\n     */\n    fromJSON(value) {\n        this.transact(() => {\n            this.nbformat = value.nbformat;\n            this.nbformat_minor = value.nbformat_minor;\n            const metadata = value.metadata;\n            if (metadata['orig_nbformat'] !== undefined) {\n                delete metadata['orig_nbformat'];\n            }\n            if (!this.metadata) {\n                const ymetadata = new Y.Map();\n                for (const [key, value] of Object.entries(metadata)) {\n                    ymetadata.set(key, value);\n                }\n                this.ymeta.set('metadata', ymetadata);\n            }\n            else {\n                this.metadata = metadata;\n            }\n            const useId = value.nbformat === 4 && value.nbformat_minor >= 5;\n            const ycells = value.cells.map(cell => {\n                if (!useId) {\n                    delete cell.id;\n                }\n                return cell;\n            });\n            this.insertCells(this.cells.length, ycells);\n            this.deleteCellRange(0, this.cells.length);\n        });\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        // strip cell ids if we have notebook format 4.0-4.4\n        const pruneCellId = this.nbformat === 4 && this.nbformat_minor <= 4;\n        return {\n            metadata: this.metadata,\n            nbformat_minor: this.nbformat_minor,\n            nbformat: this.nbformat,\n            cells: this.cells.map(c => {\n                const raw = c.toJSON();\n                if (pruneCellId) {\n                    delete raw.id;\n                }\n                return raw;\n            })\n        };\n    }\n}\n//# sourceMappingURL=ynotebook.js.map","/**\n * Utility module to work with Arrays.\n *\n * @module array\n */\n\nimport * as set from './set.js'\n\n/**\n * Return the last element of an array. The element must exist\n *\n * @template L\n * @param {ArrayLike<L>} arr\n * @return {L}\n */\nexport const last = arr => arr[arr.length - 1]\n\n/**\n * @template C\n * @return {Array<C>}\n */\nexport const create = () => /** @type {Array<C>} */ ([])\n\n/**\n * @template D\n * @param {Array<D>} a\n * @return {Array<D>}\n */\nexport const copy = a => /** @type {Array<D>} */ (a.slice())\n\n/**\n * Append elements from src to dest\n *\n * @template M\n * @param {Array<M>} dest\n * @param {Array<M>} src\n */\nexport const appendTo = (dest, src) => {\n  for (let i = 0; i < src.length; i++) {\n    dest.push(src[i])\n  }\n}\n\n/**\n * Transforms something array-like to an actual Array.\n *\n * @function\n * @template T\n * @param {ArrayLike<T>|Iterable<T>} arraylike\n * @return {T}\n */\nexport const from = Array.from\n\n/**\n * True iff condition holds on every element in the Array.\n *\n * @function\n * @template ITEM\n * @template {ArrayLike<ITEM>} ARR\n *\n * @param {ARR} arr\n * @param {function(ITEM, number, ARR):boolean} f\n * @return {boolean}\n */\nexport const every = (arr, f) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (!f(arr[i], i, arr)) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * True iff condition holds on some element in the Array.\n *\n * @function\n * @template S\n * @template {ArrayLike<S>} ARR\n * @param {ARR} arr\n * @param {function(S, number, ARR):boolean} f\n * @return {boolean}\n */\nexport const some = (arr, f) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (f(arr[i], i, arr)) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * @template ELEM\n *\n * @param {ArrayLike<ELEM>} a\n * @param {ArrayLike<ELEM>} b\n * @return {boolean}\n */\nexport const equalFlat = (a, b) => a.length === b.length && every(a, (item, index) => item === b[index])\n\n/**\n * @template ELEM\n * @param {Array<Array<ELEM>>} arr\n * @return {Array<ELEM>}\n */\nexport const flatten = arr => arr.reduce((acc, val) => acc.concat(val), [])\n\nexport const isArray = Array.isArray\n\n/**\n * @template T\n * @param {Array<T>} arr\n * @return {Array<T>}\n */\nexport const unique = arr => from(set.from(arr))\n\n/**\n * @template T\n * @template M\n * @param {ArrayLike<T>} arr\n * @param {function(T):M} mapper\n * @return {Array<T>}\n */\nexport const uniqueBy = (arr, mapper) => {\n  /**\n   * @type {Set<M>}\n   */\n  const happened = set.create()\n  /**\n   * @type {Array<T>}\n   */\n  const result = []\n  for (let i = 0; i < arr.length; i++) {\n    const el = arr[i]\n    const mapped = mapper(el)\n    if (!happened.has(mapped)) {\n      happened.add(mapped)\n      result.push(el)\n    }\n  }\n  return result\n}\n","/**\n * Common functions and function call helpers.\n *\n * @module function\n */\n\nimport * as array from './array.js'\nimport * as object from './object.js'\n\n/**\n * Calls all functions in `fs` with args. Only throws after all functions were called.\n *\n * @param {Array<function>} fs\n * @param {Array<any>} args\n */\nexport const callAll = (fs, args, i = 0) => {\n  try {\n    for (; i < fs.length; i++) {\n      fs[i](...args)\n    }\n  } finally {\n    if (i < fs.length) {\n      callAll(fs, args, i + 1)\n    }\n  }\n}\n\nexport const nop = () => {}\n\n/**\n * @template T\n * @param {function():T} f\n * @return {T}\n */\nexport const apply = f => f()\n\n/**\n * @template A\n *\n * @param {A} a\n * @return {A}\n */\nexport const id = a => a\n\n/**\n * @template T\n *\n * @param {T} a\n * @param {T} b\n * @return {boolean}\n */\nexport const equalityStrict = (a, b) => a === b\n\n/**\n * @template T\n *\n * @param {Array<T>|object} a\n * @param {Array<T>|object} b\n * @return {boolean}\n */\nexport const equalityFlat = (a, b) => a === b || (a != null && b != null && a.constructor === b.constructor && ((a instanceof Array && array.equalFlat(a, /** @type {Array<T>} */ (b))) || (typeof a === 'object' && object.equalFlat(a, b))))\n\n/* c8 ignore start */\n\n/**\n * @param {any} a\n * @param {any} b\n * @return {boolean}\n */\nexport const equalityDeep = (a, b) => {\n  if (a == null || b == null) {\n    return equalityStrict(a, b)\n  }\n  if (a.constructor !== b.constructor) {\n    return false\n  }\n  if (a === b) {\n    return true\n  }\n  switch (a.constructor) {\n    case ArrayBuffer:\n      a = new Uint8Array(a)\n      b = new Uint8Array(b)\n    // eslint-disable-next-line no-fallthrough\n    case Uint8Array: {\n      if (a.byteLength !== b.byteLength) {\n        return false\n      }\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n          return false\n        }\n      }\n      break\n    }\n    case Set: {\n      if (a.size !== b.size) {\n        return false\n      }\n      for (const value of a) {\n        if (!b.has(value)) {\n          return false\n        }\n      }\n      break\n    }\n    case Map: {\n      if (a.size !== b.size) {\n        return false\n      }\n      for (const key of a.keys()) {\n        if (!b.has(key) || !equalityDeep(a.get(key), b.get(key))) {\n          return false\n        }\n      }\n      break\n    }\n    case Object:\n      if (object.length(a) !== object.length(b)) {\n        return false\n      }\n      for (const key in a) {\n        if (!object.hasProperty(a, key) || !equalityDeep(a[key], b[key])) {\n          return false\n        }\n      }\n      break\n    case Array:\n      if (a.length !== b.length) {\n        return false\n      }\n      for (let i = 0; i < a.length; i++) {\n        if (!equalityDeep(a[i], b[i])) {\n          return false\n        }\n      }\n      break\n    default:\n      return false\n  }\n  return true\n}\n\n/**\n * @template V\n * @template {V} OPTS\n *\n * @param {V} value\n * @param {Array<OPTS>} options\n */\n// @ts-ignore\nexport const isOneOf = (value, options) => options.includes(value)\n/* c8 ignore stop */\n","/**\n * Utility module to work with key-value stores.\n *\n * @module map\n */\n\n/**\n * Creates a new Map instance.\n *\n * @function\n * @return {Map<any, any>}\n *\n * @function\n */\nexport const create = () => new Map()\n\n/**\n * Copy a Map object into a fresh Map object.\n *\n * @function\n * @template X,Y\n * @param {Map<X,Y>} m\n * @return {Map<X,Y>}\n */\nexport const copy = m => {\n  const r = create()\n  m.forEach((v, k) => { r.set(k, v) })\n  return r\n}\n\n/**\n * Get map property. Create T if property is undefined and set T on map.\n *\n * ```js\n * const listeners = map.setIfUndefined(events, 'eventName', set.create)\n * listeners.add(listener)\n * ```\n *\n * @function\n * @template V,K\n * @template {Map<K,V>} MAP\n * @param {MAP} map\n * @param {K} key\n * @param {function():V} createT\n * @return {V}\n */\nexport const setIfUndefined = (map, key, createT) => {\n  let set = map.get(key)\n  if (set === undefined) {\n    map.set(key, set = createT())\n  }\n  return set\n}\n\n/**\n * Creates an Array and populates it with the content of all key-value pairs using the `f(value, key)` function.\n *\n * @function\n * @template K\n * @template V\n * @template R\n * @param {Map<K,V>} m\n * @param {function(V,K):R} f\n * @return {Array<R>}\n */\nexport const map = (m, f) => {\n  const res = []\n  for (const [key, value] of m) {\n    res.push(f(value, key))\n  }\n  return res\n}\n\n/**\n * Tests whether any key-value pairs pass the test implemented by `f(value, key)`.\n *\n * @todo should rename to some - similarly to Array.some\n *\n * @function\n * @template K\n * @template V\n * @param {Map<K,V>} m\n * @param {function(V,K):boolean} f\n * @return {boolean}\n */\nexport const any = (m, f) => {\n  for (const [key, value] of m) {\n    if (f(value, key)) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * Tests whether all key-value pairs pass the test implemented by `f(value, key)`.\n *\n * @function\n * @template K\n * @template V\n * @param {Map<K,V>} m\n * @param {function(V,K):boolean} f\n * @return {boolean}\n */\nexport const all = (m, f) => {\n  for (const [key, value] of m) {\n    if (!f(value, key)) {\n      return false\n    }\n  }\n  return true\n}\n","/**\n * Common Math expressions.\n *\n * @module math\n */\n\nexport const floor = Math.floor\nexport const ceil = Math.ceil\nexport const abs = Math.abs\nexport const imul = Math.imul\nexport const round = Math.round\nexport const log10 = Math.log10\nexport const log2 = Math.log2\nexport const log = Math.log\nexport const sqrt = Math.sqrt\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The sum of a and b\n */\nexport const add = (a, b) => a + b\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The smaller element of a and b\n */\nexport const min = (a, b) => a < b ? a : b\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The bigger element of a and b\n */\nexport const max = (a, b) => a > b ? a : b\n\nexport const isNaN = Number.isNaN\n\nexport const pow = Math.pow\n/**\n * Base 10 exponential function. Returns the value of 10 raised to the power of pow.\n *\n * @param {number} exp\n * @return {number}\n */\nexport const exp10 = exp => Math.pow(10, exp)\n\nexport const sign = Math.sign\n\n/**\n * @param {number} n\n * @return {boolean} Wether n is negative. This function also differentiates between -0 and +0\n */\nexport const isNegativeZero = n => n !== 0 ? n < 0 : 1 / n < 0\n","/**\n * Utility functions for working with EcmaScript objects.\n *\n * @module object\n */\n\n/**\n * @return {Object<string,any>} obj\n */\nexport const create = () => Object.create(null)\n\n/**\n * Object.assign\n */\nexport const assign = Object.assign\n\n/**\n * @param {Object<string,any>} obj\n */\nexport const keys = Object.keys\n\n/**\n * @template V\n * @param {{[k:string]:V}} obj\n * @param {function(V,string):any} f\n */\nexport const forEach = (obj, f) => {\n  for (const key in obj) {\n    f(obj[key], key)\n  }\n}\n\n/**\n * @todo implement mapToArray & map\n *\n * @template R\n * @param {Object<string,any>} obj\n * @param {function(any,string):R} f\n * @return {Array<R>}\n */\nexport const map = (obj, f) => {\n  const results = []\n  for (const key in obj) {\n    results.push(f(obj[key], key))\n  }\n  return results\n}\n\n/**\n * @param {Object<string,any>} obj\n * @return {number}\n */\nexport const length = obj => keys(obj).length\n\n/**\n * @param {Object<string,any>} obj\n * @param {function(any,string):boolean} f\n * @return {boolean}\n */\nexport const some = (obj, f) => {\n  for (const key in obj) {\n    if (f(obj[key], key)) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * @param {Object|undefined} obj\n */\nexport const isEmpty = obj => {\n  for (const _k in obj) {\n    return false\n  }\n  return true\n}\n\n/**\n * @param {Object<string,any>} obj\n * @param {function(any,string):boolean} f\n * @return {boolean}\n */\nexport const every = (obj, f) => {\n  for (const key in obj) {\n    if (!f(obj[key], key)) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * Calls `Object.prototype.hasOwnProperty`.\n *\n * @param {any} obj\n * @param {string|symbol} key\n * @return {boolean}\n */\nexport const hasProperty = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key)\n\n/**\n * @param {Object<string,any>} a\n * @param {Object<string,any>} b\n * @return {boolean}\n */\nexport const equalFlat = (a, b) => a === b || (length(a) === length(b) && every(a, (val, key) => (val !== undefined || hasProperty(b, key)) && b[key] === val))\n","/**\n * Observable class prototype.\n *\n * @module observable\n */\n\nimport * as map from './map.js'\nimport * as set from './set.js'\nimport * as array from './array.js'\n\n/**\n * Handles named events.\n *\n * @template N\n */\nexport class Observable {\n  constructor () {\n    /**\n     * Some desc.\n     * @type {Map<N, any>}\n     */\n    this._observers = map.create()\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  on (name, f) {\n    map.setIfUndefined(this._observers, name, set.create).add(f)\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  once (name, f) {\n    /**\n     * @param  {...any} args\n     */\n    const _f = (...args) => {\n      this.off(name, _f)\n      f(...args)\n    }\n    this.on(name, _f)\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  off (name, f) {\n    const observers = this._observers.get(name)\n    if (observers !== undefined) {\n      observers.delete(f)\n      if (observers.size === 0) {\n        this._observers.delete(name)\n      }\n    }\n  }\n\n  /**\n   * Emit a named event. All registered event listeners that listen to the\n   * specified name will receive the event.\n   *\n   * @todo This should catch exceptions\n   *\n   * @param {N} name The event name.\n   * @param {Array<any>} args The arguments that are applied to the event listener.\n   */\n  emit (name, args) {\n    // copy all listeners to an array first to make sure that no event is emitted to listeners that are subscribed while the event handler is called.\n    return array.from((this._observers.get(name) || map.create()).values()).forEach(f => f(...args))\n  }\n\n  destroy () {\n    this._observers = map.create()\n  }\n}\n","/**\n * Utility module to work with sets.\n *\n * @module set\n */\n\nexport const create = () => new Set()\n\n/**\n * @template T\n * @param {Set<T>} set\n * @return {Array<T>}\n */\nexport const toArray = set => Array.from(set)\n\n/**\n * @template T\n * @param {Set<T>} set\n * @return {T}\n */\nexport const first = set =>\n  set.values().next().value || undefined\n\n/**\n * @template T\n * @param {Iterable<T>} entries\n * @return {Set<T>}\n */\nexport const from = entries => new Set(entries)\n","/**\n * Utility module to work with time.\n *\n * @module time\n */\n\nimport * as metric from './metric.js'\nimport * as math from './math.js'\n\n/**\n * Return current time.\n *\n * @return {Date}\n */\nexport const getDate = () => new Date()\n\n/**\n * Return current unix time.\n *\n * @return {number}\n */\nexport const getUnixTime = Date.now\n\n/**\n * Transform time (in ms) to a human readable format. E.g. 1100 => 1.1s. 60s => 1min. .001 => 10μs.\n *\n * @param {number} d duration in milliseconds\n * @return {string} humanized approximation of time\n */\nexport const humanizeDuration = d => {\n  if (d < 60000) {\n    const p = metric.prefix(d, -1)\n    return math.round(p.n * 100) / 100 + p.prefix + 's'\n  }\n  d = math.floor(d / 1000)\n  const seconds = d % 60\n  const minutes = math.floor(d / 60) % 60\n  const hours = math.floor(d / 3600) % 24\n  const days = math.floor(d / 86400)\n  if (days > 0) {\n    return days + 'd' + ((hours > 0 || minutes > 30) ? ' ' + (minutes > 30 ? hours + 1 : hours) + 'h' : '')\n  }\n  if (hours > 0) {\n    /* c8 ignore next */\n    return hours + 'h' + ((minutes > 0 || seconds > 30) ? ' ' + (seconds > 30 ? minutes + 1 : minutes) + 'min' : '')\n  }\n  return minutes + 'min' + (seconds > 0 ? ' ' + seconds + 's' : '')\n}\n"],"names":["convertYMapEventToMapChange","event","changes","Map","keys","forEach","key","set","action","oldValue","newValue","this","ymeta","get","createMutex","token","f","outdatedTimeout","Awareness","constructor","doc","super","clientID","states","meta","_checkInterval","setInterval","now","getLocalState","lastUpdated","setLocalState","remove","clientid","has","push","length","removeAwarenessStates","math","on","destroy","emit","clearInterval","state","currLocalMeta","clock","undefined","prevState","delete","added","updated","filteredUpdated","removed","setLocalStateField","field","value","getStates","awareness","clients","origin","i","curMeta","encodeAwarenessUpdate","len","encoder","encoding","createEncoder","writeVarUint","writeVarString","JSON","stringify","toUint8Array","modifyAwarenessUpdate","update","modify","decoder","decoding","createDecoder","readVarUint","parse","readVarString","modifiedState","applyAwarenessUpdate","timestamp","time","getUnixTime","clientMeta","currClock","equalityDeep","YDocument","options","_a","onStateChanged","stateChange","Array","keysChanged","change","name","ystate","_changed","Signal","_isDisposed","_disposed","_ydoc","ydoc","_ystate","getMap","_undoManager","trackedOrigins","Set","_awareness","observe","undoManager","changed","disposed","isDisposed","JSONExt","toJSON","canUndo","undoStack","canRedo","redoStack","dispose","unobserve","getState","setState","undo","redo","clearUndoHistory","clear","transact","undoable","YFile","version","ysource","getText","_modelObserver","sourceChange","delta","addToScope","static","source","getSource","v","setSource","toString","ytext","insert","updateSource","start","end","createCellModelFromSharedType","type","YCodeCell","YMarkdownCell","YRawCell","Error","createCell","cell","notebook","_b","ymodel","ymetadata","cell_type","id","UUID","ycell","attachments","setAttachments","youtputs","cCell","execution_count","outputs","setOutputs","metadata","setMetadata","join","createStandaloneCell","YBaseCell","prototype","events","getChanges","_metadataChanged","_notebook","_ysource","_ymetadata","_prevSourceLength","getArray","observeDeep","_c","getId","isStandalone","getMetadata","metadataChanged","disableDocumentWideUndoRedo","setUndoManager","unobserveDeep","deleteMetadata","jupyter","outputs_hidden","others","Object","TypeError","isHidden","clone","collapsed","entries","sourceEvent","find","target","metadataEvents","metadataChange","equal","modelEvent","create","_youtputs","count","getOutputs","toArray","updateOutputs","fin","outputEvent","outputsChange","executionCountChange","YAttachmentCell","getAttachments","YNotebook","_onMetaChanged","metaEvent","nbformatChanged","nbformat","nbformat_minor","_onYCellsChanged","item","content","_ycellMapping","c","deleted","model","index","cellsChange","d","insertedCells","map","cells","splice","retain","_ycells","WeakMap","_disableDocumentWideUndoRedo","_d","_e","_f","_g","_h","_j","ynotebook","data","fromJSON","getCell","addCell","insertCell","insertCells","yCells","moveCell","fromIndex","toIndex","moveCells","n","clones","fill","_","idx","deleteCell","deleteCellRange","from","to","allMetadata","updateMetadata","useId","ycells","pruneCellId","raw","last","arr","copy","a","slice","appendTo","dest","src","every","some","equalFlat","b","flatten","reduce","acc","val","concat","isArray","unique","uniqueBy","mapper","happened","result","el","mapped","add","callAll","fs","args","nop","apply","equalityStrict","equalityFlat","array","object","ArrayBuffer","Uint8Array","byteLength","size","isOneOf","includes","m","r","k","setIfUndefined","createT","res","any","all","floor","Math","ceil","abs","imul","round","log10","log2","log","sqrt","min","max","isNaN","Number","pow","exp10","exp","sign","isNegativeZero","assign","obj","results","isEmpty","_k","hasProperty","hasOwnProperty","call","Observable","_observers","once","off","observers","values","first","next","getDate","Date","humanizeDuration","p","metric","prefix","seconds","minutes","hours","days"],"sourceRoot":""}