{"version":3,"file":"4416.0910e13351a889d404df.js?v=0910e13351a889d404df","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/@jupyter-widgets/base-manager/lib/utils.js","webpack://@jupyterlab/application-top/./node_modules/@jupyter-widgets/base-manager/lib/latex.js","webpack://@jupyterlab/application-top/./node_modules/@jupyter-widgets/base-manager/lib/manager-base.js","webpack://@jupyterlab/application-top/./node_modules/base64-js/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { toByteArray, fromByteArray } from 'base64-js';\nconst hexTable = [\n    '00',\n    '01',\n    '02',\n    '03',\n    '04',\n    '05',\n    '06',\n    '07',\n    '08',\n    '09',\n    '0A',\n    '0B',\n    '0C',\n    '0D',\n    '0E',\n    '0F',\n    '10',\n    '11',\n    '12',\n    '13',\n    '14',\n    '15',\n    '16',\n    '17',\n    '18',\n    '19',\n    '1A',\n    '1B',\n    '1C',\n    '1D',\n    '1E',\n    '1F',\n    '20',\n    '21',\n    '22',\n    '23',\n    '24',\n    '25',\n    '26',\n    '27',\n    '28',\n    '29',\n    '2A',\n    '2B',\n    '2C',\n    '2D',\n    '2E',\n    '2F',\n    '30',\n    '31',\n    '32',\n    '33',\n    '34',\n    '35',\n    '36',\n    '37',\n    '38',\n    '39',\n    '3A',\n    '3B',\n    '3C',\n    '3D',\n    '3E',\n    '3F',\n    '40',\n    '41',\n    '42',\n    '43',\n    '44',\n    '45',\n    '46',\n    '47',\n    '48',\n    '49',\n    '4A',\n    '4B',\n    '4C',\n    '4D',\n    '4E',\n    '4F',\n    '50',\n    '51',\n    '52',\n    '53',\n    '54',\n    '55',\n    '56',\n    '57',\n    '58',\n    '59',\n    '5A',\n    '5B',\n    '5C',\n    '5D',\n    '5E',\n    '5F',\n    '60',\n    '61',\n    '62',\n    '63',\n    '64',\n    '65',\n    '66',\n    '67',\n    '68',\n    '69',\n    '6A',\n    '6B',\n    '6C',\n    '6D',\n    '6E',\n    '6F',\n    '70',\n    '71',\n    '72',\n    '73',\n    '74',\n    '75',\n    '76',\n    '77',\n    '78',\n    '79',\n    '7A',\n    '7B',\n    '7C',\n    '7D',\n    '7E',\n    '7F',\n    '80',\n    '81',\n    '82',\n    '83',\n    '84',\n    '85',\n    '86',\n    '87',\n    '88',\n    '89',\n    '8A',\n    '8B',\n    '8C',\n    '8D',\n    '8E',\n    '8F',\n    '90',\n    '91',\n    '92',\n    '93',\n    '94',\n    '95',\n    '96',\n    '97',\n    '98',\n    '99',\n    '9A',\n    '9B',\n    '9C',\n    '9D',\n    '9E',\n    '9F',\n    'A0',\n    'A1',\n    'A2',\n    'A3',\n    'A4',\n    'A5',\n    'A6',\n    'A7',\n    'A8',\n    'A9',\n    'AA',\n    'AB',\n    'AC',\n    'AD',\n    'AE',\n    'AF',\n    'B0',\n    'B1',\n    'B2',\n    'B3',\n    'B4',\n    'B5',\n    'B6',\n    'B7',\n    'B8',\n    'B9',\n    'BA',\n    'BB',\n    'BC',\n    'BD',\n    'BE',\n    'BF',\n    'C0',\n    'C1',\n    'C2',\n    'C3',\n    'C4',\n    'C5',\n    'C6',\n    'C7',\n    'C8',\n    'C9',\n    'CA',\n    'CB',\n    'CC',\n    'CD',\n    'CE',\n    'CF',\n    'D0',\n    'D1',\n    'D2',\n    'D3',\n    'D4',\n    'D5',\n    'D6',\n    'D7',\n    'D8',\n    'D9',\n    'DA',\n    'DB',\n    'DC',\n    'DD',\n    'DE',\n    'DF',\n    'E0',\n    'E1',\n    'E2',\n    'E3',\n    'E4',\n    'E5',\n    'E6',\n    'E7',\n    'E8',\n    'E9',\n    'EA',\n    'EB',\n    'EC',\n    'ED',\n    'EE',\n    'EF',\n    'F0',\n    'F1',\n    'F2',\n    'F3',\n    'F4',\n    'F5',\n    'F6',\n    'F7',\n    'F8',\n    'F9',\n    'FA',\n    'FB',\n    'FC',\n    'FD',\n    'FE',\n    'FF',\n];\n/**\n * Convert an ArrayBuffer to a hex string.\n */\nexport function bufferToHex(buffer) {\n    const x = new Uint8Array(buffer);\n    const s = [];\n    for (let i = 0; i < x.length; i++) {\n        s.push(hexTable[x[i]]);\n    }\n    return s.join('');\n}\n/**\n * Convert a hex string to an ArrayBuffer.\n */\nexport function hexToBuffer(hex) {\n    const x = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < hex.length; i += 2) {\n        x[i / 2] = parseInt(hex.slice(i, i + 2), 16);\n    }\n    return x.buffer;\n}\n/**\n * Convert an ArrayBuffer to a base64 string.\n */\nexport function bufferToBase64(buffer) {\n    return fromByteArray(new Uint8Array(buffer));\n}\n/**\n * Convert a base64 string to an ArrayBuffer.\n */\nexport function base64ToBuffer(base64) {\n    return toByteArray(base64).buffer;\n}\n//# sourceMappingURL=utils.js.map","/*-----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n// Some magic for deferring mathematical expressions to MathJax\n// by hiding them from the Markdown parser.\n// Some of the code here is adapted with permission from Davide Cervone\n// under the terms of the Apache2 license governing the MathJax project.\n// Other minor modifications are also due to StackExchange and are used with\n// permission.\nconst inline = '$'; // the inline math delimiter\n// MATHSPLIT contains the pattern for math delimiters and special symbols\n// needed for searching for math in the text input.\nconst MATHSPLIT = /(\\$\\$?|\\\\(?:begin|end)\\{[a-z]*\\*?\\}|\\\\[{}$]|[{}]|(?:\\n\\s*)+|@@\\d+@@|\\\\\\\\(?:\\(|\\)|\\[|\\]))/i;\n/**\n *  Break up the text into its component parts and search\n *    through them for math delimiters, braces, linebreaks, etc.\n *  Math delimiters must match and braces must balance.\n *  Don't allow math to pass through a double linebreak\n *    (which will be a paragraph).\n */\nexport function removeMath(text) {\n    const math = []; // stores math strings for later\n    let start = null;\n    let end = null;\n    let last = null;\n    let braces = 0;\n    let deTilde;\n    // Except for extreme edge cases, this should catch precisely those pieces of the markdown\n    // source that will later be turned into code spans. While MathJax will not TeXify code spans,\n    // we still have to consider them at this point; the following issue has happened several times:\n    //\n    //     `$foo` and `$bar` are variables.  -->  <code>$foo ` and `$bar</code> are variables.\n    const hasCodeSpans = /`/.test(text);\n    if (hasCodeSpans) {\n        text = text\n            .replace(/~/g, '~T')\n            .replace(/(^|[^\\\\])(`+)([^\\n]*?[^`\\n])\\2(?!`)/gm, (wholematch) => wholematch.replace(/\\$/g, '~D'));\n        deTilde = (text) => {\n            return text.replace(/~([TD])/g, (wholematch, character) => character === 'T' ? '~' : inline);\n        };\n    }\n    else {\n        deTilde = (text) => {\n            return text;\n        };\n    }\n    let blocks = text.replace(/\\r\\n?/g, '\\n').split(MATHSPLIT);\n    for (let i = 1, m = blocks.length; i < m; i += 2) {\n        const block = blocks[i];\n        if (block.charAt(0) === '@') {\n            //\n            //  Things that look like our math markers will get\n            //  stored and then retrieved along with the math.\n            //\n            blocks[i] = '@@' + math.length + '@@';\n            math.push(block);\n        }\n        else if (start !== null) {\n            //\n            //  If we are in math, look for the end delimiter,\n            //    but don't go past double line breaks, and\n            //    and balance braces within the math.\n            //\n            if (block === end) {\n                if (braces) {\n                    last = i;\n                }\n                else {\n                    blocks = processMath(start, i, deTilde, math, blocks);\n                    start = null;\n                    end = null;\n                    last = null;\n                }\n            }\n            else if (block.match(/\\n.*\\n/)) {\n                if (last !== null) {\n                    i = last;\n                    blocks = processMath(start, i, deTilde, math, blocks);\n                }\n                start = null;\n                end = null;\n                last = null;\n                braces = 0;\n            }\n            else if (block === '{') {\n                braces++;\n            }\n            else if (block === '}' && braces) {\n                braces--;\n            }\n        }\n        else {\n            //\n            //  Look for math start delimiters and when\n            //    found, set up the end delimiter.\n            //\n            if (block === inline || block === '$$') {\n                start = i;\n                end = block;\n                braces = 0;\n            }\n            else if (block === '\\\\\\\\(' || block === '\\\\\\\\[') {\n                start = i;\n                end = block.slice(-1) === '(' ? '\\\\\\\\)' : '\\\\\\\\]';\n                braces = 0;\n            }\n            else if (block.substr(1, 5) === 'begin') {\n                start = i;\n                end = '\\\\end' + block.substr(6);\n                braces = 0;\n            }\n        }\n    }\n    if (start !== null && last !== null) {\n        blocks = processMath(start, last, deTilde, math, blocks);\n        start = null;\n        end = null;\n        last = null;\n    }\n    return { text: deTilde(blocks.join('')), math };\n}\n/**\n * Put back the math strings that were saved,\n * and clear the math array (no need to keep it around).\n */\nexport function replaceMath(text, math) {\n    /**\n     * Replace a math placeholder with its corresponding group.\n     * The math delimiters \"\\\\(\", \"\\\\[\", \"\\\\)\" and \"\\\\]\" are replaced\n     * removing one backslash in order to be interpreted correctly by MathJax.\n     */\n    const process = (match, n) => {\n        let group = math[n];\n        if (group.substr(0, 3) === '\\\\\\\\(' &&\n            group.substr(group.length - 3) === '\\\\\\\\)') {\n            group = '\\\\(' + group.substring(3, group.length - 3) + '\\\\)';\n        }\n        else if (group.substr(0, 3) === '\\\\\\\\[' &&\n            group.substr(group.length - 3) === '\\\\\\\\]') {\n            group = '\\\\[' + group.substring(3, group.length - 3) + '\\\\]';\n        }\n        return group;\n    };\n    // Replace all the math group placeholders in the text\n    // with the saved strings.\n    return text.replace(/@@(\\d+)@@/g, process);\n}\n/**\n * Process math blocks.\n *\n * The math is in blocks i through j, so\n *   collect it into one block and clear the others.\n *  Replace &, <, and > by named entities.\n *  For IE, put <br> at the ends of comments since IE removes \\n.\n *  Clear the current math positions and store the index of the\n *   math, then push the math string onto the storage array.\n *  The preProcess function is called on all blocks if it has been passed in\n */\nfunction processMath(i, j, preProcess, math, blocks) {\n    let block = blocks\n        .slice(i, j + 1)\n        .join('')\n        .replace(/&/g, '&amp;') // use HTML entity for &\n        .replace(/</g, '&lt;') // use HTML entity for <\n        .replace(/>/g, '&gt;'); // use HTML entity for >\n    if (navigator && navigator.appName === 'Microsoft Internet Explorer') {\n        block = block.replace(/(%[^\\n]*)\\n/g, '$1<br/>\\n');\n    }\n    while (j > i) {\n        blocks[j] = '';\n        j--;\n    }\n    blocks[i] = '@@' + math.length + '@@'; // replace the current block text with a unique tag to find later\n    if (preProcess) {\n        block = preProcess(block);\n    }\n    math.push(block);\n    return blocks;\n}\n//# sourceMappingURL=latex.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as widgets from '@jupyter-widgets/base';\nimport { PromiseDelegate, } from '@lumino/coreutils';\nimport { put_buffers, remove_buffers, resolvePromisesDict, reject, uuid, PROTOCOL_VERSION, } from '@jupyter-widgets/base';\nimport { base64ToBuffer, bufferToBase64, hexToBuffer } from './utils';\nimport { removeMath, replaceMath } from './latex';\nimport sanitize from 'sanitize-html';\nconst PROTOCOL_MAJOR_VERSION = PROTOCOL_VERSION.split('.', 1)[0];\n/**\n * The control comm target name.\n */\nexport const CONTROL_COMM_TARGET = 'jupyter.widget.control';\n/**\n * The supported version for the control comm channel.\n */\nexport const CONTROL_COMM_PROTOCOL_VERSION = '1.0.0';\n/**\n * Time (in ms) after which we consider the control comm target not responding.\n */\nexport const CONTROL_COMM_TIMEOUT = 4000;\n/**\n * Sanitize HTML-formatted descriptions.\n */\nfunction default_inline_sanitize(s) {\n    const allowedTags = [\n        'a',\n        'abbr',\n        'b',\n        'code',\n        'em',\n        'i',\n        'img',\n        'li',\n        'ol',\n        'span',\n        'strong',\n        'ul',\n    ];\n    const allowedAttributes = {\n        '*': ['aria-*', 'class', 'style', 'title'],\n        a: ['href'],\n        img: ['src'],\n        style: ['media', 'type'],\n    };\n    return sanitize(s, {\n        allowedTags: allowedTags,\n        allowedAttributes: allowedAttributes,\n    });\n}\n/**\n * Manager abstract base class\n */\nexport class ManagerBase {\n    constructor() {\n        /**\n         * The comm target name to register\n         */\n        this.comm_target_name = 'jupyter.widget';\n        /**\n         * Dictionary of model ids and model instance promises\n         */\n        this._models = Object.create(null);\n    }\n    /**\n     * Modifies view options. Generally overloaded in custom widget manager\n     * implementations.\n     */\n    setViewOptions(options = {}) {\n        return options;\n    }\n    create_view(model, options = {}) {\n        const id = uuid();\n        const viewPromise = (model.state_change = model.state_change.then(async () => {\n            const _view_name = model.get('_view_name');\n            const _view_module = model.get('_view_module');\n            try {\n                const ViewType = (await this.loadViewClass(_view_name, _view_module, model.get('_view_module_version')));\n                const view = new ViewType({\n                    model: model,\n                    options: this.setViewOptions(options),\n                });\n                view.listenTo(model, 'destroy', view.remove);\n                await view.render();\n                // This presumes the view is added to the list of model views below\n                view.once('remove', () => {\n                    if (model.views) {\n                        delete model.views[id];\n                    }\n                });\n                return view;\n            }\n            catch (e) {\n                console.error(`Could not create a view for model id ${model.model_id}`);\n                const msg = `Failed to create view for '${_view_name}' from module '${_view_module}' with model '${model.name}' from module '${model.module}'`;\n                const ModelCls = widgets.createErrorWidgetModel(e, msg);\n                const errorModel = new ModelCls();\n                const view = new widgets.ErrorWidgetView({\n                    model: errorModel,\n                    options: this.setViewOptions(options),\n                });\n                await view.render();\n                return view;\n            }\n        }));\n        if (model.views) {\n            model.views[id] = viewPromise;\n        }\n        return viewPromise;\n    }\n    /**\n     * callback handlers specific to a view\n     */\n    callbacks(view) {\n        return {};\n    }\n    /**\n     * Get a promise for a model by model id.\n     *\n     * #### Notes\n     * If the model is not found, the returned Promise object is rejected.\n     *\n     * If you would like to synchronously test if a model exists, use .has_model().\n     */\n    async get_model(model_id) {\n        const modelPromise = this._models[model_id];\n        if (modelPromise === undefined) {\n            throw new Error('widget model not found');\n        }\n        return modelPromise;\n    }\n    /**\n     * Returns true if the given model is registered, otherwise false.\n     *\n     * #### Notes\n     * This is a synchronous way to check if a model is registered.\n     */\n    has_model(model_id) {\n        return this._models[model_id] !== undefined;\n    }\n    /**\n     * Handle when a comm is opened.\n     */\n    handle_comm_open(comm, msg) {\n        const protocolVersion = (msg.metadata || {})['version'] || '';\n        if (protocolVersion.split('.', 1)[0] !== PROTOCOL_MAJOR_VERSION) {\n            const error = `Wrong widget protocol version: received protocol version '${protocolVersion}', but was expecting major version '${PROTOCOL_MAJOR_VERSION}'`;\n            console.error(error);\n            return Promise.reject(error);\n        }\n        const data = msg.content.data;\n        const buffer_paths = data.buffer_paths || [];\n        const buffers = msg.buffers || [];\n        put_buffers(data.state, buffer_paths, buffers);\n        return this.new_model({\n            model_name: data.state['_model_name'],\n            model_module: data.state['_model_module'],\n            model_module_version: data.state['_model_module_version'],\n            comm: comm,\n        }, data.state).catch(reject('Could not create a model.', true));\n    }\n    /**\n     * Create a comm and new widget model.\n     * @param  options - same options as new_model but comm is not\n     *                          required and additional options are available.\n     * @param  serialized_state - serialized model attributes.\n     */\n    new_widget(options, serialized_state = {}) {\n        let commPromise;\n        // we check to make sure the view information is provided, to help catch\n        // backwards incompatibility errors.\n        if (options.view_name === undefined ||\n            options.view_module === undefined ||\n            options.view_module_version === undefined) {\n            return Promise.reject('new_widget(...) must be given view information in the options.');\n        }\n        // If no comm is provided, a new comm is opened for the jupyter.widget\n        // target.\n        if (options.comm) {\n            commPromise = Promise.resolve(options.comm);\n        }\n        else {\n            commPromise = this._create_comm(this.comm_target_name, options.model_id, {\n                state: {\n                    _model_module: options.model_module,\n                    _model_module_version: options.model_module_version,\n                    _model_name: options.model_name,\n                    _view_module: options.view_module,\n                    _view_module_version: options.view_module_version,\n                    _view_name: options.view_name,\n                },\n            }, { version: PROTOCOL_VERSION });\n        }\n        // The options dictionary is copied since data will be added to it.\n        const options_clone = Object.assign({}, options);\n        // Create the model. In the case where the comm promise is rejected a\n        // comm-less model is still created with the required model id.\n        return commPromise.then((comm) => {\n            // Comm Promise Resolved.\n            options_clone.comm = comm;\n            const widget_model = this.new_model(options_clone, serialized_state);\n            return widget_model.then((model) => {\n                model.sync('create', model);\n                return model;\n            });\n        }, () => {\n            // Comm Promise Rejected.\n            if (!options_clone.model_id) {\n                options_clone.model_id = uuid();\n            }\n            return this.new_model(options_clone, serialized_state);\n        });\n    }\n    register_model(model_id, modelPromise) {\n        this._models[model_id] = modelPromise;\n        modelPromise.then((model) => {\n            model.once('comm:close', () => {\n                delete this._models[model_id];\n            });\n        });\n    }\n    /**\n     * Create and return a promise for a new widget model\n     *\n     * @param options - the options for creating the model.\n     * @param serialized_state - attribute values for the model.\n     *\n     * @example\n     * widget_manager.new_model({\n     *      model_name: 'IntSlider',\n     *      model_module: '@jupyter-widgets/controls',\n     *      model_module_version: '1.0.0',\n     *      model_id: 'u-u-i-d'\n     * }).then((model) => { console.log('Create success!', model); },\n     *  (err) => {console.error(err)});\n     *\n     */\n    async new_model(options, serialized_state = {}) {\n        var _a, _b;\n        const model_id = (_a = options.model_id) !== null && _a !== void 0 ? _a : (_b = options.comm) === null || _b === void 0 ? void 0 : _b.comm_id;\n        if (!model_id) {\n            throw new Error('Neither comm nor model_id provided in options object. At least one must exist.');\n        }\n        options.model_id = model_id;\n        const modelPromise = this._make_model(options, serialized_state);\n        // this call needs to happen before the first `await`, see note in `set_state`:\n        this.register_model(model_id, modelPromise);\n        return await modelPromise;\n    }\n    /**\n     * Fetch all widgets states from the kernel using the control comm channel\n     * If this fails (control comm handler not implemented kernel side),\n     * it will fall back to `_loadFromKernelModels`.\n     *\n     * This is a utility function that can be used in subclasses.\n     */\n    async _loadFromKernel() {\n        // Try fetching all widget states through the control comm\n        let data;\n        let buffers;\n        try {\n            const initComm = await this._create_comm(CONTROL_COMM_TARGET, uuid(), {}, { version: CONTROL_COMM_PROTOCOL_VERSION });\n            await new Promise((resolve, reject) => {\n                initComm.on_msg((msg) => {\n                    data = msg['content']['data'];\n                    if (data.method !== 'update_states') {\n                        console.warn(`\n              Unknown ${data.method} message on the Control channel\n            `);\n                        return;\n                    }\n                    buffers = (msg.buffers || []).map((b) => {\n                        if (b instanceof DataView) {\n                            return b;\n                        }\n                        else {\n                            return new DataView(b instanceof ArrayBuffer ? b : b.buffer);\n                        }\n                    });\n                    resolve(null);\n                });\n                initComm.on_close(() => reject('Control comm was closed too early'));\n                // Send a states request msg\n                initComm.send({ method: 'request_states' }, {});\n                // Reject if we didn't get a response in time\n                setTimeout(() => reject('Control comm did not respond in time'), CONTROL_COMM_TIMEOUT);\n            });\n            initComm.close();\n        }\n        catch (error) {\n            console.warn('Failed to fetch ipywidgets through the \"jupyter.widget.control\" comm channel, fallback to fetching individual model state. Reason:', error);\n            // Fall back to the old implementation for old ipywidgets backend versions (ipywidgets<=7.6)\n            return this._loadFromKernelModels();\n        }\n        const states = data.states;\n        const bufferPaths = {};\n        const bufferGroups = {};\n        // Group buffers and buffer paths by widget id\n        for (let i = 0; i < data.buffer_paths.length; i++) {\n            const [widget_id, ...path] = data.buffer_paths[i];\n            const b = buffers[i];\n            if (!bufferPaths[widget_id]) {\n                bufferPaths[widget_id] = [];\n                bufferGroups[widget_id] = [];\n            }\n            bufferPaths[widget_id].push(path);\n            bufferGroups[widget_id].push(b);\n        }\n        // Create comms for all new widgets.\n        const widget_comms = await Promise.all(Object.keys(states).map(async (widget_id) => {\n            const comm = this.has_model(widget_id)\n                ? undefined\n                : await this._create_comm('jupyter.widget', widget_id);\n            return { widget_id, comm };\n        }));\n        await Promise.all(widget_comms.map(async ({ widget_id, comm }) => {\n            const state = states[widget_id];\n            // Put binary buffers\n            if (widget_id in bufferPaths) {\n                put_buffers(state, bufferPaths[widget_id], bufferGroups[widget_id]);\n            }\n            try {\n                if (comm) {\n                    // This must be the first await in the code path that\n                    // reaches here so that registering the model promise in\n                    // new_model can register the widget promise before it may\n                    // be required by other widgets.\n                    await this.new_model({\n                        model_name: state.model_name,\n                        model_module: state.model_module,\n                        model_module_version: state.model_module_version,\n                        model_id: widget_id,\n                        comm: comm,\n                    }, state.state);\n                }\n                else {\n                    // model already exists here\n                    const model = await this.get_model(widget_id);\n                    const deserializedState = await model.constructor._deserialize_state(state.state, this);\n                    model.set_state(deserializedState);\n                }\n            }\n            catch (error) {\n                // Failed to create a widget model, we continue creating other models so that\n                // other widgets can render\n                console.error(error);\n            }\n        }));\n    }\n    /**\n     * Old implementation of fetching widget models one by one using\n     * the request_state message on each comm.\n     *\n     * This is a utility function that can be used in subclasses.\n     */\n    async _loadFromKernelModels() {\n        const comm_ids = await this._get_comm_info();\n        // For each comm id that we do not know about, create the comm, and request the state.\n        const widgets_info = await Promise.all(Object.keys(comm_ids).map(async (comm_id) => {\n            if (this.has_model(comm_id)) {\n                return;\n            }\n            const comm = await this._create_comm(this.comm_target_name, comm_id);\n            let msg_id = '';\n            const info = new PromiseDelegate();\n            comm.on_msg((msg) => {\n                if (msg.parent_header.msg_id === msg_id &&\n                    msg.header.msg_type === 'comm_msg' &&\n                    msg.content.data.method === 'update') {\n                    const data = msg.content.data;\n                    const buffer_paths = data.buffer_paths || [];\n                    const buffers = msg.buffers || [];\n                    put_buffers(data.state, buffer_paths, buffers);\n                    info.resolve({ comm, msg });\n                }\n            });\n            msg_id = comm.send({\n                method: 'request_state',\n            }, this.callbacks(undefined));\n            return info.promise;\n        }));\n        // We put in a synchronization barrier here so that we don't have to\n        // topologically sort the restored widgets. `new_model` synchronously\n        // registers the widget ids before reconstructing their state\n        // asynchronously, so promises to every widget reference should be available\n        // by the time they are used.\n        await Promise.all(widgets_info.map(async (widget_info) => {\n            if (!widget_info) {\n                return;\n            }\n            const content = widget_info.msg.content;\n            await this.new_model({\n                model_name: content.data.state._model_name,\n                model_module: content.data.state._model_module,\n                model_module_version: content.data.state._model_module_version,\n                comm: widget_info.comm,\n            }, content.data.state);\n        }));\n    }\n    async _make_model(options, serialized_state = {}) {\n        const model_id = options.model_id;\n        const model_promise = this.loadModelClass(options.model_name, options.model_module, options.model_module_version);\n        let ModelType;\n        const makeErrorModel = (error, msg) => {\n            const Cls = widgets.createErrorWidgetModel(error, msg);\n            const widget_model = new Cls();\n            return widget_model;\n        };\n        try {\n            ModelType = await model_promise;\n        }\n        catch (error) {\n            const msg = 'Could not instantiate widget';\n            console.error(msg);\n            return makeErrorModel(error, msg);\n        }\n        if (!ModelType) {\n            const msg = 'Could not instantiate widget';\n            console.error(msg);\n            const error = new Error(`Cannot find model module ${options.model_module}@${options.model_module_version}, ${options.model_name}`);\n            return makeErrorModel(error, msg);\n        }\n        let widget_model;\n        try {\n            const attributes = await ModelType._deserialize_state(serialized_state, this);\n            const modelOptions = {\n                widget_manager: this,\n                model_id: model_id,\n                comm: options.comm,\n            };\n            widget_model = new ModelType(attributes, modelOptions);\n        }\n        catch (error) {\n            console.error(error);\n            const msg = `Model class '${options.model_name}' from module '${options.model_module}' is loaded but can not be instantiated`;\n            widget_model = makeErrorModel(error, msg);\n        }\n        widget_model.name = options.model_name;\n        widget_model.module = options.model_module;\n        return widget_model;\n    }\n    /**\n     * Close all widgets and empty the widget state.\n     * @return Promise that resolves when the widget state is cleared.\n     */\n    clear_state() {\n        return resolvePromisesDict(this._models).then((models) => {\n            Object.keys(models).forEach((id) => models[id].close());\n            this._models = Object.create(null);\n        });\n    }\n    /**\n     * Asynchronously get the state of the widget manager.\n     *\n     * This includes all of the widget models, and follows the format given in\n     * the @jupyter-widgets/schema package.\n     *\n     * @param options - The options for what state to return.\n     * @returns Promise for a state dictionary\n     */\n    get_state(options = {}) {\n        const modelPromises = Object.keys(this._models).map((id) => this._models[id]);\n        return Promise.all(modelPromises).then((models) => {\n            return serialize_state(models, options);\n        });\n    }\n    /**\n     * Set the widget manager state.\n     *\n     * @param state - a Javascript object conforming to the application/vnd.jupyter.widget-state+json spec.\n     *\n     * Reconstructs all of the widget models in the state, merges that with the\n     * current manager state, and then attempts to redisplay the widgets in the\n     * state.\n     */\n    set_state(state) {\n        // Check to make sure that it's the same version we are parsing.\n        if (!(state.version_major && state.version_major <= 2)) {\n            throw 'Unsupported widget state format';\n        }\n        const models = state.state;\n        // Recreate all the widget models for the given widget manager state.\n        const all_models = this._get_comm_info().then((live_comms) => {\n            /* Note: It is currently safe to just loop over the models in any order,\n                     given that the following holds (does at the time of writing):\n                     1: any call to `new_model` with state registers the model promise (e.g. with `register_model`)\n                        synchronously (before it's first `await` statement).\n                     2: any calls to a model constructor or the `set_state` method on a model,\n                        happens asynchronously (in a `then` clause, or after an `await` statement).\n      \n                    Without these assumptions, one risks trying to set model state with a reference\n                    to another model that doesn't exist yet!\n                  */\n            return Promise.all(Object.keys(models).map((model_id) => {\n                // First put back the binary buffers\n                const decode = {\n                    base64: base64ToBuffer,\n                    hex: hexToBuffer,\n                };\n                const model = models[model_id];\n                const modelState = model.state;\n                if (model.buffers) {\n                    const bufferPaths = model.buffers.map((b) => b.path);\n                    // put_buffers expects buffers to be DataViews\n                    const buffers = model.buffers.map((b) => new DataView(decode[b.encoding](b.data)));\n                    put_buffers(model.state, bufferPaths, buffers);\n                }\n                // If the model has already been created, set its state and then\n                // return it.\n                if (this.has_model(model_id)) {\n                    return this.get_model(model_id).then((model) => {\n                        // deserialize state\n                        return model.constructor\n                            ._deserialize_state(modelState || {}, this)\n                            .then((attributes) => {\n                            model.set_state(attributes); // case 2\n                            return model;\n                        });\n                    });\n                }\n                const modelCreate = {\n                    model_id: model_id,\n                    model_name: model.model_name,\n                    model_module: model.model_module,\n                    model_module_version: model.model_module_version,\n                };\n                if (Object.prototype.hasOwnProperty.call(live_comms, 'model_id')) {\n                    // live comm\n                    // This connects to an existing comm if it exists, and\n                    // should *not* send a comm open message.\n                    return this._create_comm(this.comm_target_name, model_id).then((comm) => {\n                        modelCreate.comm = comm;\n                        return this.new_model(modelCreate); // No state, so safe wrt. case 1\n                    });\n                }\n                else {\n                    return this.new_model(modelCreate, modelState); // case 1\n                }\n            }));\n        });\n        return all_models;\n    }\n    /**\n     * Disconnect the widget manager from the kernel, setting each model's comm\n     * as dead.\n     */\n    disconnect() {\n        Object.keys(this._models).forEach((i) => {\n            this._models[i].then((model) => {\n                model.comm_live = false;\n            });\n        });\n    }\n    /**\n     * Resolve a URL relative to the current notebook location.\n     *\n     * The default implementation just returns the original url.\n     */\n    resolveUrl(url) {\n        return Promise.resolve(url);\n    }\n    inline_sanitize(source) {\n        const parts = removeMath(source);\n        // Sanitize tags for inline output.\n        const sanitized = default_inline_sanitize(parts['text']);\n        return replaceMath(sanitized, parts['math']);\n    }\n    async loadModelClass(className, moduleName, moduleVersion) {\n        try {\n            const promise = this.loadClass(className, moduleName, moduleVersion);\n            await promise;\n            return promise;\n        }\n        catch (error) {\n            console.error(error);\n            const msg = `Failed to load model class '${className}' from module '${moduleName}'`;\n            return widgets.createErrorWidgetModel(error, msg);\n        }\n    }\n    async loadViewClass(className, moduleName, moduleVersion) {\n        try {\n            const promise = this.loadClass(className, moduleName, moduleVersion);\n            await promise;\n            return promise;\n        }\n        catch (error) {\n            console.error(error);\n            const msg = `Failed to load view class '${className}' from module '${moduleName}'`;\n            return widgets.createErrorWidgetView(error, msg);\n        }\n    }\n    /**\n     * Filter serialized widget state to remove any ID's already present in manager.\n     *\n     * @param {*} state Serialized state to filter\n     *\n     * @returns {*} A copy of the state, with its 'state' attribute filtered\n     */\n    filterExistingModelState(serialized_state) {\n        let models = serialized_state.state;\n        models = Object.keys(models)\n            .filter((model_id) => !this.has_model(model_id))\n            .reduce((res, model_id) => {\n            res[model_id] = models[model_id];\n            return res;\n        }, {});\n        return Object.assign(Object.assign({}, serialized_state), { state: models });\n    }\n}\n/**\n * Serialize an array of widget models\n *\n * #### Notes\n * The return value follows the format given in the\n * @jupyter-widgets/schema package.\n */\nexport function serialize_state(models, options = {}) {\n    const state = {};\n    models.forEach((model) => {\n        const model_id = model.model_id;\n        const split = remove_buffers(model.serialize(model.get_state(options.drop_defaults)));\n        const buffers = split.buffers.map((buffer, index) => {\n            return {\n                data: bufferToBase64(buffer),\n                path: split.buffer_paths[index],\n                encoding: 'base64',\n            };\n        });\n        state[model_id] = {\n            model_name: model.name,\n            model_module: model.module,\n            model_module_version: model.get('_model_module_version'),\n            state: split.state,\n        };\n        // To save space, only include the buffers key if we have buffers\n        if (buffers.length > 0) {\n            state[model_id].buffers = buffers;\n        }\n    });\n    return { version_major: 2, version_minor: 0, state: state };\n}\n//# sourceMappingURL=manager-base.js.map","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n"],"names":["hexTable","bufferToHex","buffer","x","Uint8Array","s","i","length","push","join","hexToBuffer","hex","parseInt","slice","bufferToBase64","base64ToBuffer","base64","inline","MATHSPLIT","removeMath","text","math","start","end","last","braces","deTilde","hasCodeSpans","test","replace","wholematch","character","blocks","split","m","block","charAt","processMath","match","substr","replaceMath","process","n","group","substring","j","preProcess","navigator","appName","PROTOCOL_MAJOR_VERSION","PROTOCOL_VERSION","CONTROL_COMM_TARGET","CONTROL_COMM_PROTOCOL_VERSION","CONTROL_COMM_TIMEOUT","default_inline_sanitize","allowedTags","allowedAttributes","a","img","style","ManagerBase","constructor","this","comm_target_name","_models","Object","create","setViewOptions","options","create_view","model","id","uuid","viewPromise","state_change","then","async","_view_name","get","_view_module","ViewType","loadViewClass","view","listenTo","remove","render","once","views","e","console","error","model_id","msg","name","module","ModelCls","errorModel","callbacks","modelPromise","undefined","Error","has_model","handle_comm_open","comm","protocolVersion","metadata","Promise","reject","data","content","buffer_paths","buffers","put_buffers","state","new_model","model_name","model_module","model_module_version","catch","new_widget","serialized_state","commPromise","view_name","view_module","view_module_version","resolve","_create_comm","_model_module","_model_module_version","_model_name","_view_module_version","version","options_clone","assign","widget_model","sync","register_model","_a","_b","comm_id","_make_model","initComm","on_msg","method","warn","map","b","DataView","ArrayBuffer","on_close","send","setTimeout","close","_loadFromKernelModels","states","bufferPaths","bufferGroups","widget_id","path","widget_comms","all","keys","get_model","deserializedState","_deserialize_state","set_state","comm_ids","_get_comm_info","widgets_info","msg_id","info","PromiseDelegate","parent_header","header","msg_type","promise","widget_info","model_promise","loadModelClass","ModelType","makeErrorModel","Cls","attributes","modelOptions","widget_manager","clear_state","resolvePromisesDict","models","forEach","get_state","modelPromises","serialize_state","version_major","all_models","live_comms","decode","modelState","encoding","modelCreate","prototype","hasOwnProperty","call","disconnect","comm_live","resolveUrl","url","inline_sanitize","source","parts","sanitized","className","moduleName","moduleVersion","loadClass","filterExistingModelState","filter","reduce","res","remove_buffers","serialize","drop_defaults","index","version_minor","byteLength","exports","toByteArray","fromByteArray","lookup","revLookup","Arr","Array","code","len","charCodeAt","getLens","b64","validLen","indexOf","placeHoldersLen","lens","_byteLength","tmp","arr","curByte","tripletToBase64","num","encodeChunk","uint8","output","extraBytes","maxChunkLength","len2"],"sourceRoot":""}