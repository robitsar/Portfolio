{"version":3,"file":"8302.ec97d2ce1ae9df71a3fa.js?v=ec97d2ce1ae9df71a3fa","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/@lumino/datagrid/dist/index.es6.js"],"sourcesContent":["import { Platform, ClipboardExt, ElementExt } from '@lumino/domutils';\nimport { getKeyboardLayout } from '@lumino/keyboard';\nimport { Drag } from '@lumino/dragdrop';\nimport { some, ArrayExt } from '@lumino/algorithm';\nimport { Signal } from '@lumino/signaling';\nimport { Widget, ScrollBar, GridLayout } from '@lumino/widgets';\nimport { ConflatableMessage, MessageLoop } from '@lumino/messaging';\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * A basic implementation of a data grid key handler.\n *\n * #### Notes\n * This class may be subclassed and customized as needed.\n */\nclass BasicKeyHandler {\n    constructor() {\n        this._disposed = false;\n    }\n    /**\n     * Whether the key handler is disposed.\n     */\n    get isDisposed() {\n        return this._disposed;\n    }\n    /**\n     * Dispose of the resources held by the key handler.\n     */\n    dispose() {\n        this._disposed = true;\n    }\n    /**\n     * Handle the key down event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keydown event of interest.\n     *\n     * #### Notes\n     * This will not be called if the mouse button is pressed.\n     */\n    onKeyDown(grid, event) {\n        // if grid is editable and cell selection available, start cell editing\n        // on key press (letters, numbers and space only)\n        if (grid.editable &&\n            grid.selectionModel.cursorRow !== -1 &&\n            grid.selectionModel.cursorColumn !== -1) {\n            const input = String.fromCharCode(event.keyCode);\n            if (/[a-zA-Z0-9-_ ]/.test(input)) {\n                const row = grid.selectionModel.cursorRow;\n                const column = grid.selectionModel.cursorColumn;\n                const cell = {\n                    grid: grid,\n                    row: row,\n                    column: column\n                };\n                grid.editorController.edit(cell);\n                if (getKeyboardLayout().keyForKeydownEvent(event) === 'Space') {\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n                return;\n            }\n        }\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'ArrowLeft':\n                this.onArrowLeft(grid, event);\n                break;\n            case 'ArrowRight':\n                this.onArrowRight(grid, event);\n                break;\n            case 'ArrowUp':\n                this.onArrowUp(grid, event);\n                break;\n            case 'ArrowDown':\n                this.onArrowDown(grid, event);\n                break;\n            case 'PageUp':\n                this.onPageUp(grid, event);\n                break;\n            case 'PageDown':\n                this.onPageDown(grid, event);\n                break;\n            case 'Escape':\n                this.onEscape(grid, event);\n                break;\n            case 'Delete':\n                this.onDelete(grid, event);\n                break;\n            case 'C':\n                this.onKeyC(grid, event);\n                break;\n            case 'Enter':\n                if (grid.selectionModel) {\n                    grid.moveCursor(event.shiftKey ? 'up' : 'down');\n                    grid.scrollToCursor();\n                }\n                break;\n            case 'Tab':\n                if (grid.selectionModel) {\n                    grid.moveCursor(event.shiftKey ? 'left' : 'right');\n                    grid.scrollToCursor();\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n                break;\n        }\n    }\n    /**\n     * Handle the `'ArrowLeft'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onArrowLeft(grid, event) {\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Fetch the modifier flags.\n        let shift = event.shiftKey;\n        let accel = Platform.accelKey(event);\n        // Handle no model with the accel modifier.\n        if (!model && accel) {\n            grid.scrollTo(0, grid.scrollY);\n            return;\n        }\n        // Handle no model and no modifier. (ignore shift)\n        if (!model) {\n            grid.scrollByStep('left');\n            return;\n        }\n        // Fetch the selection mode.\n        let mode = model.selectionMode;\n        // Handle the row selection mode with accel key.\n        if (mode === 'row' && accel) {\n            grid.scrollTo(0, grid.scrollY);\n            return;\n        }\n        // Handle the row selection mode with no modifier. (ignore shift)\n        if (mode === 'row') {\n            grid.scrollByStep('left');\n            return;\n        }\n        // Fetch the cursor and selection.\n        let r = model.cursorRow;\n        let c = model.cursorColumn;\n        let cs = model.currentSelection();\n        // Set up the selection variables.\n        let r1;\n        let r2;\n        let c1;\n        let c2;\n        let cr;\n        let cc;\n        let clear;\n        // Dispatch based on the modifier keys.\n        if (accel && shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 - 1 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (accel) {\n            r1 = r;\n            r2 = r;\n            c1 = 0;\n            c2 = 0;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        else {\n            r1 = r;\n            r2 = r;\n            c1 = c - 1;\n            c2 = c - 1;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1, c1, r2, c2, cursorRow: cr, cursorColumn: cc, clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        if (shift || mode === 'column') {\n            grid.scrollToColumn(cs.c2);\n        }\n        else {\n            grid.scrollToCursor();\n        }\n    }\n    /**\n     * Handle the `'ArrowRight'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onArrowRight(grid, event) {\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Fetch the modifier flags.\n        let shift = event.shiftKey;\n        let accel = Platform.accelKey(event);\n        // Handle no model with the accel modifier.\n        if (!model && accel) {\n            grid.scrollTo(grid.maxScrollX, grid.scrollY);\n            return;\n        }\n        // Handle no model and no modifier. (ignore shift)\n        if (!model) {\n            grid.scrollByStep('right');\n            return;\n        }\n        // Fetch the selection mode.\n        let mode = model.selectionMode;\n        // Handle the row selection model with accel key.\n        if (mode === 'row' && accel) {\n            grid.scrollTo(grid.maxScrollX, grid.scrollY);\n            return;\n        }\n        // Handle the row selection mode with no modifier. (ignore shift)\n        if (mode === 'row') {\n            grid.scrollByStep('right');\n            return;\n        }\n        // Fetch the cursor and selection.\n        let r = model.cursorRow;\n        let c = model.cursorColumn;\n        let cs = model.currentSelection();\n        // Set up the selection variables.\n        let r1;\n        let r2;\n        let c1;\n        let c2;\n        let cr;\n        let cc;\n        let clear;\n        // Dispatch based on the modifier keys.\n        if (accel && shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = Infinity;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 + 1 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (accel) {\n            r1 = r;\n            r2 = r;\n            c1 = Infinity;\n            c2 = Infinity;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        else {\n            r1 = r;\n            r2 = r;\n            c1 = c + 1;\n            c2 = c + 1;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1, c1, r2, c2, cursorRow: cr, cursorColumn: cc, clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        if (shift || mode === 'column') {\n            grid.scrollToColumn(cs.c2);\n        }\n        else {\n            grid.scrollToCursor();\n        }\n    }\n    /**\n     * Handle the `'ArrowUp'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onArrowUp(grid, event) {\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Fetch the modifier flags.\n        let shift = event.shiftKey;\n        let accel = Platform.accelKey(event);\n        // Handle no model with the accel modifier.\n        if (!model && accel) {\n            grid.scrollTo(grid.scrollX, 0);\n            return;\n        }\n        // Handle no model and no modifier. (ignore shift)\n        if (!model) {\n            grid.scrollByStep('up');\n            return;\n        }\n        // Fetch the selection mode.\n        let mode = model.selectionMode;\n        // Handle the column selection mode with accel key.\n        if (mode === 'column' && accel) {\n            grid.scrollTo(grid.scrollX, 0);\n            return;\n        }\n        // Handle the column selection mode with no modifier. (ignore shift)\n        if (mode === 'column') {\n            grid.scrollByStep('up');\n            return;\n        }\n        // Fetch the cursor and selection.\n        let r = model.cursorRow;\n        let c = model.cursorColumn;\n        let cs = model.currentSelection();\n        // Set up the selection variables.\n        let r1;\n        let r2;\n        let c1;\n        let c2;\n        let cr;\n        let cc;\n        let clear;\n        // Dispatch based on the modifier keys.\n        if (accel && shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 - 1 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (accel) {\n            r1 = 0;\n            r2 = 0;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        else {\n            r1 = r - 1;\n            r2 = r - 1;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1, c1, r2, c2, cursorRow: cr, cursorColumn: cc, clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        if (shift || mode === 'row') {\n            grid.scrollToRow(cs.r2);\n        }\n        else {\n            grid.scrollToCursor();\n        }\n    }\n    /**\n     * Handle the `'ArrowDown'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onArrowDown(grid, event) {\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Fetch the modifier flags.\n        let shift = event.shiftKey;\n        let accel = Platform.accelKey(event);\n        // Handle no model with the accel modifier.\n        if (!model && accel) {\n            grid.scrollTo(grid.scrollX, grid.maxScrollY);\n            return;\n        }\n        // Handle no model and no modifier. (ignore shift)\n        if (!model) {\n            grid.scrollByStep('down');\n            return;\n        }\n        // Fetch the selection mode.\n        let mode = model.selectionMode;\n        // Handle the column selection mode with accel key.\n        if (mode === 'column' && accel) {\n            grid.scrollTo(grid.scrollX, grid.maxScrollY);\n            return;\n        }\n        // Handle the column selection mode with no modifier. (ignore shift)\n        if (mode === 'column') {\n            grid.scrollByStep('down');\n            return;\n        }\n        // Fetch the cursor and selection.\n        let r = model.cursorRow;\n        let c = model.cursorColumn;\n        let cs = model.currentSelection();\n        // Set up the selection variables.\n        let r1;\n        let r2;\n        let c1;\n        let c2;\n        let cr;\n        let cc;\n        let clear;\n        // Dispatch based on the modifier keys.\n        if (accel && shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = Infinity;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 + 1 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (accel) {\n            r1 = Infinity;\n            r2 = Infinity;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        else {\n            r1 = r + 1;\n            r2 = r + 1;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1, c1, r2, c2, cursorRow: cr, cursorColumn: cc, clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        if (shift || mode === 'row') {\n            grid.scrollToRow(cs.r2);\n        }\n        else {\n            grid.scrollToCursor();\n        }\n    }\n    /**\n     * Handle the `'PageUp'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onPageUp(grid, event) {\n        // Ignore the event if the accel key is pressed.\n        if (Platform.accelKey(event)) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Scroll by page if there is no selection model.\n        if (!model || model.selectionMode === 'column') {\n            grid.scrollByPage('up');\n            return;\n        }\n        // Get the normal number of cells in the page height.\n        let n = Math.floor(grid.pageHeight / grid.defaultSizes.rowHeight);\n        // Fetch the cursor and selection.\n        let r = model.cursorRow;\n        let c = model.cursorColumn;\n        let cs = model.currentSelection();\n        // Set up the selection variables.\n        let r1;\n        let r2;\n        let c1;\n        let c2;\n        let cr;\n        let cc;\n        let clear;\n        // Select or resize as needed.\n        if (event.shiftKey) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 - n : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else {\n            r1 = cs ? cs.r1 - n : 0;\n            r2 = r1;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1, c1, r2, c2, cursorRow: cr, cursorColumn: cc, clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        grid.scrollToRow(cs.r2);\n    }\n    /**\n     * Handle the `'PageDown'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onPageDown(grid, event) {\n        // Ignore the event if the accel key is pressed.\n        if (Platform.accelKey(event)) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Scroll by page if there is no selection model.\n        if (!model || model.selectionMode === 'column') {\n            grid.scrollByPage('down');\n            return;\n        }\n        // Get the normal number of cells in the page height.\n        let n = Math.floor(grid.pageHeight / grid.defaultSizes.rowHeight);\n        // Fetch the cursor and selection.\n        let r = model.cursorRow;\n        let c = model.cursorColumn;\n        let cs = model.currentSelection();\n        // Set up the selection variables.\n        let r1;\n        let r2;\n        let c1;\n        let c2;\n        let cr;\n        let cc;\n        let clear;\n        // Select or resize as needed.\n        if (event.shiftKey) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 + n : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else {\n            r1 = cs ? cs.r1 + n : 0;\n            r2 = r1;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1, c1, r2, c2, cursorRow: cr, cursorColumn: cc, clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        grid.scrollToRow(cs.r2);\n    }\n    /**\n     * Handle the `'Escape'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onEscape(grid, event) {\n        if (grid.selectionModel) {\n            grid.selectionModel.clear();\n        }\n    }\n    /**\n     * Handle the `'Delete'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onDelete(grid, event) {\n        if (grid.editable && !grid.selectionModel.isEmpty) {\n            const dataModel = grid.dataModel;\n            // Fetch the max row and column.\n            let maxRow = dataModel.rowCount('body') - 1;\n            let maxColumn = dataModel.columnCount('body') - 1;\n            for (let s of grid.selectionModel.selections()) {\n                // Clamp the cell to the model bounds.\n                let sr1 = Math.max(0, Math.min(s.r1, maxRow));\n                let sc1 = Math.max(0, Math.min(s.c1, maxColumn));\n                let sr2 = Math.max(0, Math.min(s.r2, maxRow));\n                let sc2 = Math.max(0, Math.min(s.c2, maxColumn));\n                for (let r = sr1; r <= sr2; ++r) {\n                    for (let c = sc1; c <= sc2; ++c) {\n                        dataModel.setData('body', r, c, null);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Handle the `'C'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onKeyC(grid, event) {\n        // Bail early if the modifiers aren't correct for copy.\n        if (event.shiftKey || !Platform.accelKey(event)) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Copy the current selection to the clipboard.\n        grid.copyToClipboard();\n    }\n}\n\n/**\n * An object which renders the cells of a data grid.\n *\n * #### Notes\n * If the predefined cell renderers are insufficient for a particular\n * use case, a custom cell renderer can be defined which derives from\n * this class.\n *\n * The data grid renders cells in column-major order, by region. The\n * region order is: body, row header, column header, corner header.\n */\nclass CellRenderer {\n}\n/**\n * The namespace for the `CellRenderer` class statics.\n */\n(function (CellRenderer) {\n    /**\n     * Resolve a config option for a cell renderer.\n     *\n     * @param option - The config option to resolve.\n     *\n     * @param config - The cell config object.\n     *\n     * @returns The resolved value for the option.\n     */\n    function resolveOption(option, config) {\n        return typeof option === 'function'\n            ? option(config)\n            : option;\n    }\n    CellRenderer.resolveOption = resolveOption;\n})(CellRenderer || (CellRenderer = {}));\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * A cell renderer which renders data values as text.\n */\nclass TextRenderer extends CellRenderer {\n    /**\n     * Construct a new text renderer.\n     *\n     * @param options - The options for initializing the renderer.\n     */\n    constructor(options = {}) {\n        super();\n        this.font = options.font || '12px sans-serif';\n        this.textColor = options.textColor || '#000000';\n        this.backgroundColor = options.backgroundColor || '';\n        this.verticalAlignment = options.verticalAlignment || 'center';\n        this.horizontalAlignment = options.horizontalAlignment || 'left';\n        this.horizontalPadding = options.horizontalPadding || 8;\n        this.format = options.format || TextRenderer.formatGeneric();\n        this.elideDirection = options.elideDirection || 'none';\n        this.wrapText = options.wrapText || false;\n    }\n    /**\n     * Paint the content for a cell.\n     *\n     * @param gc - The graphics context to use for drawing.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    paint(gc, config) {\n        this.drawBackground(gc, config);\n        this.drawText(gc, config);\n    }\n    /**\n     * Draw the background for the cell.\n     *\n     * @param gc - The graphics context to use for drawing.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    drawBackground(gc, config) {\n        // Resolve the background color for the cell.\n        let color = CellRenderer.resolveOption(this.backgroundColor, config);\n        // Bail if there is no background color to draw.\n        if (!color) {\n            return;\n        }\n        // Fill the cell with the background color.\n        gc.fillStyle = color;\n        gc.fillRect(config.x, config.y, config.width, config.height);\n    }\n    /**\n     * Get the full text to be rendered by the cell.\n     */\n    getText(config) {\n        return this.format(config);\n    }\n    /**\n     * Draw the text for the cell.\n     *\n     * @param gc - The graphics context to use for drawing.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    drawText(gc, config) {\n        // Resolve the font for the cell.\n        let font = CellRenderer.resolveOption(this.font, config);\n        // Bail if there is no font to draw.\n        if (!font) {\n            return;\n        }\n        // Resolve the text color for the cell.\n        let color = CellRenderer.resolveOption(this.textColor, config);\n        // Bail if there is no text color to draw.\n        if (!color) {\n            return;\n        }\n        // Format the cell value to text.\n        let text = this.getText(config);\n        // Bail if there is no text to draw.\n        if (!text) {\n            return;\n        }\n        // Resolve the vertical and horizontal alignment.\n        let vAlign = CellRenderer.resolveOption(this.verticalAlignment, config);\n        let hAlign = CellRenderer.resolveOption(this.horizontalAlignment, config);\n        // Resolve the elision direction\n        let elideDirection = CellRenderer.resolveOption(this.elideDirection, config);\n        // Resolve the text wrapping flag\n        let wrapText = CellRenderer.resolveOption(this.wrapText, config);\n        // Compute the padded text box height for the specified alignment.\n        let boxHeight = config.height - (vAlign === 'center' ? 1 : 2);\n        // Bail if the text box has no effective size.\n        if (boxHeight <= 0) {\n            return;\n        }\n        // Compute the text height for the gc font.\n        let textHeight = TextRenderer.measureFontHeight(font);\n        // Set up the text position variables.\n        let textX;\n        let textY;\n        let boxWidth;\n        // Compute the Y position for the text.\n        switch (vAlign) {\n            case 'top':\n                textY = config.y + 2 + textHeight;\n                break;\n            case 'center':\n                textY = config.y + config.height / 2 + textHeight / 2;\n                break;\n            case 'bottom':\n                textY = config.y + config.height - 2;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Compute the X position for the text.\n        switch (hAlign) {\n            case 'left':\n                textX = config.x + this.horizontalPadding;\n                boxWidth = config.width - 14;\n                break;\n            case 'center':\n                textX = config.x + config.width / 2;\n                boxWidth = config.width;\n                break;\n            case 'right':\n                textX = config.x + config.width - this.horizontalPadding;\n                boxWidth = config.width - 14;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Clip the cell if the text is taller than the text box height.\n        if (textHeight > boxHeight) {\n            gc.beginPath();\n            gc.rect(config.x, config.y, config.width, config.height - 1);\n            gc.clip();\n        }\n        // Set the gc state.\n        gc.font = font;\n        gc.fillStyle = color;\n        gc.textAlign = hAlign;\n        gc.textBaseline = 'bottom';\n        // Terminate call here if we're not eliding or wrapping text\n        if (elideDirection === 'none' && !wrapText) {\n            gc.fillText(text, textX, textY);\n            return;\n        }\n        // The current text width in pixels.\n        let textWidth = gc.measureText(text).width;\n        // Apply text wrapping if enabled.\n        if (wrapText && textWidth > boxWidth) {\n            // Make sure box clipping happens.\n            gc.beginPath();\n            gc.rect(config.x, config.y, config.width, config.height - 1);\n            gc.clip();\n            // Split column name to words based on\n            // whitespace preceding a word boundary.\n            // \"Hello  world\" --> [\"Hello  \", \"world\"]\n            const wordsInColumn = text.split(/\\s(?=\\b)/);\n            // Y-coordinate offset for any additional lines\n            let curY = textY;\n            let textInCurrentLine = wordsInColumn.shift();\n            // Single word. Applying text wrap on word by splitting\n            // it into characters and fitting the maximum number of\n            // characters possible per line (box width).\n            if (wordsInColumn.length === 0) {\n                let curLineTextWidth = gc.measureText(textInCurrentLine).width;\n                while (curLineTextWidth > boxWidth && textInCurrentLine !== '') {\n                    // Iterating from the end of the string until we find a\n                    // substring (0,i) which has a width less than the box width.\n                    for (let i = textInCurrentLine.length; i > 0; i--) {\n                        const curSubString = textInCurrentLine.substring(0, i);\n                        const curSubStringWidth = gc.measureText(curSubString).width;\n                        if (curSubStringWidth < boxWidth || curSubString.length === 1) {\n                            // Found a substring which has a width less than the current\n                            // box width. Rendering that substring on the current line\n                            // and setting the remainder of the parent string as the next\n                            // string to iterate on for the next line.\n                            const nextLineText = textInCurrentLine.substring(i, textInCurrentLine.length);\n                            textInCurrentLine = nextLineText;\n                            curLineTextWidth = gc.measureText(textInCurrentLine).width;\n                            gc.fillText(curSubString, textX, curY);\n                            curY += textHeight;\n                            // No need to continue iterating after we identified\n                            // an index to break the string on.\n                            break;\n                        }\n                    }\n                }\n            }\n            // Multiple words in column header. Fitting maximum\n            // number of words possible per line (box width).\n            else {\n                while (wordsInColumn.length !== 0) {\n                    // Processing the next word in the queue.\n                    const curWord = wordsInColumn.shift();\n                    // Joining that word with the existing text for\n                    // the current line.\n                    const incrementedText = [textInCurrentLine, curWord].join(' ');\n                    const incrementedTextWidth = gc.measureText(incrementedText).width;\n                    if (incrementedTextWidth > boxWidth) {\n                        // If the newly combined text has a width larger than\n                        // the box width, we render the line before the current\n                        // word was added. We set the current word as the next\n                        // line.\n                        gc.fillText(textInCurrentLine, textX, curY);\n                        curY += textHeight;\n                        textInCurrentLine = curWord;\n                    }\n                    else {\n                        // The combined text hasd a width less than the box width. We\n                        // set the the current line text to be the new combined text.\n                        textInCurrentLine = incrementedText;\n                    }\n                }\n            }\n            gc.fillText(textInCurrentLine, textX, curY);\n            // Terminating the call here as we don't want\n            // to apply text eliding when wrapping is active.\n            return;\n        }\n        // Elide text that is too long\n        const elide = '\\u2026';\n        // Loop until text width fits box or only one character remains\n        while (textWidth > boxWidth && text.length > 1) {\n            // Convert text string to array for dealing with astral symbols\n            const textArr = [...text];\n            if (elideDirection === 'right') {\n                // If text width is substantially bigger, take half the string\n                if (textArr.length > 4 && textWidth >= 2 * boxWidth) {\n                    text =\n                        textArr.slice(0, Math.floor(textArr.length / 2 + 1)).join('') +\n                            elide;\n                }\n                else {\n                    // Otherwise incrementally remove the last character\n                    text = textArr.slice(0, textArr.length - 2).join('') + elide;\n                }\n            }\n            else {\n                // If text width is substantially bigger, take half the string\n                if (textArr.length > 4 && textWidth >= 2 * boxWidth) {\n                    text = elide + textArr.slice(Math.floor(textArr.length / 2)).join('');\n                }\n                else {\n                    // Otherwise incrementally remove the last character\n                    text = elide + textArr.slice(2).join('');\n                }\n            }\n            // Measure new text width\n            textWidth = gc.measureText(text).width;\n        }\n        // Draw the text for the cell.\n        gc.fillText(text, textX, textY);\n    }\n}\n/**\n * The namespace for the `TextRenderer` class statics.\n */\n(function (TextRenderer) {\n    /**\n     * Create a generic text format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new generic text format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `String()` to coerce any value\n     * to a string.\n     */\n    function formatGeneric(options = {}) {\n        let missing = options.missing || '';\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return String(value);\n        };\n    }\n    TextRenderer.formatGeneric = formatGeneric;\n    /**\n     * Create a fixed decimal format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new fixed decimal format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Number()` and `toFixed()` to\n     * coerce values.\n     *\n     * The `formatIntlNumber()` formatter is more flexible, but slower.\n     */\n    function formatFixed(options = {}) {\n        let digits = options.digits;\n        let missing = options.missing || '';\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return Number(value).toFixed(digits);\n        };\n    }\n    TextRenderer.formatFixed = formatFixed;\n    /**\n     * Create a significant figure format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new significant figure format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Number()` and `toPrecision()`\n     * to coerce values.\n     *\n     * The `formatIntlNumber()` formatter is more flexible, but slower.\n     */\n    function formatPrecision(options = {}) {\n        let digits = options.digits;\n        let missing = options.missing || '';\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return Number(value).toPrecision(digits);\n        };\n    }\n    TextRenderer.formatPrecision = formatPrecision;\n    /**\n     * Create a scientific notation format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new scientific notation format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Number()` and `toExponential()`\n     * to coerce values.\n     *\n     * The `formatIntlNumber()` formatter is more flexible, but slower.\n     */\n    function formatExponential(options = {}) {\n        let digits = options.digits;\n        let missing = options.missing || '';\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return Number(value).toExponential(digits);\n        };\n    }\n    TextRenderer.formatExponential = formatExponential;\n    /**\n     * Create an international number format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new international number format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Intl.NumberFormat` object to\n     * coerce values.\n     *\n     * This is the most flexible (but slowest) number formatter.\n     */\n    function formatIntlNumber(options = {}) {\n        let missing = options.missing || '';\n        let nft = new Intl.NumberFormat(options.locales, options.options);\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return nft.format(value);\n        };\n    }\n    TextRenderer.formatIntlNumber = formatIntlNumber;\n    /**\n     * Create a date format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new date format function.\n     *\n     * #### Notes\n     * This formatter uses `Date.toDateString()` to format the values.\n     *\n     * If a value is not a `Date` object, `new Date(value)` is used to\n     * coerce the value to a date.\n     *\n     * The `formatIntlDateTime()` formatter is more flexible, but slower.\n     */\n    function formatDate(options = {}) {\n        let missing = options.missing || '';\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            if (value instanceof Date) {\n                return value.toDateString();\n            }\n            return new Date(value).toDateString();\n        };\n    }\n    TextRenderer.formatDate = formatDate;\n    /**\n     * Create a time format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new time format function.\n     *\n     * #### Notes\n     * This formatter uses `Date.toTimeString()` to format the values.\n     *\n     * If a value is not a `Date` object, `new Date(value)` is used to\n     * coerce the value to a date.\n     *\n     * The `formatIntlDateTime()` formatter is more flexible, but slower.\n     */\n    function formatTime(options = {}) {\n        let missing = options.missing || '';\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            if (value instanceof Date) {\n                return value.toTimeString();\n            }\n            return new Date(value).toTimeString();\n        };\n    }\n    TextRenderer.formatTime = formatTime;\n    /**\n     * Create an ISO datetime format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new ISO datetime format function.\n     *\n     * #### Notes\n     * This formatter uses `Date.toISOString()` to format the values.\n     *\n     * If a value is not a `Date` object, `new Date(value)` is used to\n     * coerce the value to a date.\n     *\n     * The `formatIntlDateTime()` formatter is more flexible, but slower.\n     */\n    function formatISODateTime(options = {}) {\n        let missing = options.missing || '';\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            if (value instanceof Date) {\n                return value.toISOString();\n            }\n            return new Date(value).toISOString();\n        };\n    }\n    TextRenderer.formatISODateTime = formatISODateTime;\n    /**\n     * Create a UTC datetime format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new UTC datetime format function.\n     *\n     * #### Notes\n     * This formatter uses `Date.toUTCString()` to format the values.\n     *\n     * If a value is not a `Date` object, `new Date(value)` is used to\n     * coerce the value to a date.\n     *\n     * The `formatIntlDateTime()` formatter is more flexible, but slower.\n     */\n    function formatUTCDateTime(options = {}) {\n        let missing = options.missing || '';\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            if (value instanceof Date) {\n                return value.toUTCString();\n            }\n            return new Date(value).toUTCString();\n        };\n    }\n    TextRenderer.formatUTCDateTime = formatUTCDateTime;\n    /**\n     * Create an international datetime format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new international datetime format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Intl.DateTimeFormat` object to\n     * coerce values.\n     *\n     * This is the most flexible (but slowest) datetime formatter.\n     */\n    function formatIntlDateTime(options = {}) {\n        let missing = options.missing || '';\n        let dtf = new Intl.DateTimeFormat(options.locales, options.options);\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return dtf.format(value);\n        };\n    }\n    TextRenderer.formatIntlDateTime = formatIntlDateTime;\n    /**\n     * Measure the height of a font.\n     *\n     * @param font - The CSS font string of interest.\n     *\n     * @returns The height of the font bounding box.\n     *\n     * #### Notes\n     * This function uses a temporary DOM node to measure the text box\n     * height for the specified font. The first call for a given font\n     * will incur a DOM reflow, but the return value is cached, so any\n     * subsequent call for the same font will return the cached value.\n     */\n    function measureFontHeight(font) {\n        // Look up the cached font height.\n        let height = Private$6.fontHeightCache[font];\n        // Return the cached font height if it exists.\n        if (height !== undefined) {\n            return height;\n        }\n        // Normalize the font.\n        Private$6.fontMeasurementGC.font = font;\n        let normFont = Private$6.fontMeasurementGC.font;\n        // Set the font on the measurement node.\n        Private$6.fontMeasurementNode.style.font = normFont;\n        // Add the measurement node to the document.\n        document.body.appendChild(Private$6.fontMeasurementNode);\n        // Measure the node height.\n        height = Private$6.fontMeasurementNode.offsetHeight;\n        // Remove the measurement node from the document.\n        document.body.removeChild(Private$6.fontMeasurementNode);\n        // Cache the measured height for the font and norm font.\n        Private$6.fontHeightCache[font] = height;\n        Private$6.fontHeightCache[normFont] = height;\n        // Return the measured height.\n        return height;\n    }\n    TextRenderer.measureFontHeight = measureFontHeight;\n})(TextRenderer || (TextRenderer = {}));\n/**\n * The namespace for the module implementation details.\n */\nvar Private$6;\n(function (Private) {\n    /**\n     * A cache of measured font heights.\n     */\n    Private.fontHeightCache = Object.create(null);\n    /**\n     * The DOM node used for font height measurement.\n     */\n    Private.fontMeasurementNode = (() => {\n        let node = document.createElement('div');\n        node.style.position = 'absolute';\n        node.style.top = '-99999px';\n        node.style.left = '-99999px';\n        node.style.visibility = 'hidden';\n        node.textContent = 'M';\n        return node;\n    })();\n    /**\n     * The GC used for font measurement.\n     */\n    Private.fontMeasurementGC = (() => {\n        let canvas = document.createElement('canvas');\n        canvas.width = 0;\n        canvas.height = 0;\n        return canvas.getContext('2d');\n    })();\n})(Private$6 || (Private$6 = {}));\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * A cell renderer which renders data values as text.\n */\nclass HyperlinkRenderer extends TextRenderer {\n    /**\n     * Construct a new text renderer.\n     *\n     * @param options - The options for initializing the renderer.\n     */\n    constructor(options = {}) {\n        // Set default parameters before passing over the super.\n        options.textColor = options.textColor || 'navy';\n        options.font = options.font || 'bold 12px sans-serif';\n        super(options);\n        this.url = options.url;\n        this.urlName = options.urlName;\n    }\n    /**\n     * Get the full text to be rendered by the cell.\n     */\n    getText(config) {\n        let urlName = CellRenderer.resolveOption(this.urlName, config);\n        // If we have a friendly URL name, use that.\n        if (urlName) {\n            return this.format({\n                ...config,\n                value: urlName\n            });\n        }\n        // Otherwise use the raw value attribute.\n        return this.format(config);\n    }\n    /**\n     * Draw the text for the cell.\n     *\n     * @param gc - The graphics context to use for drawing.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    drawText(gc, config) {\n        // Resolve the font for the cell.\n        let font = CellRenderer.resolveOption(this.font, config);\n        // Bail if there is no font to draw.\n        if (!font) {\n            return;\n        }\n        // Resolve the text color for the cell.\n        let color = CellRenderer.resolveOption(this.textColor, config);\n        // Bail if there is no text color to draw.\n        if (!color) {\n            return;\n        }\n        let text = this.getText(config);\n        // Bail if there is no text to draw.\n        if (!text) {\n            return;\n        }\n        // Resolve the vertical and horizontal alignment.\n        let vAlign = CellRenderer.resolveOption(this.verticalAlignment, config);\n        let hAlign = CellRenderer.resolveOption(this.horizontalAlignment, config);\n        // Resolve the elision direction\n        let elideDirection = CellRenderer.resolveOption(this.elideDirection, config);\n        // Resolve the text wrapping flag\n        let wrapText = CellRenderer.resolveOption(this.wrapText, config);\n        // Compute the padded text box height for the specified alignment.\n        let boxHeight = config.height - (vAlign === 'center' ? 1 : 2);\n        // Bail if the text box has no effective size.\n        if (boxHeight <= 0) {\n            return;\n        }\n        // Compute the text height for the gc font.\n        let textHeight = HyperlinkRenderer.measureFontHeight(font);\n        // Set up the text position variables.\n        let textX;\n        let textY;\n        let boxWidth;\n        // Compute the Y position for the text.\n        switch (vAlign) {\n            case 'top':\n                textY = config.y + 2 + textHeight;\n                break;\n            case 'center':\n                textY = config.y + config.height / 2 + textHeight / 2;\n                break;\n            case 'bottom':\n                textY = config.y + config.height - 2;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Compute the X position for the text.\n        switch (hAlign) {\n            case 'left':\n                textX = config.x + 8;\n                boxWidth = config.width - 14;\n                break;\n            case 'center':\n                textX = config.x + config.width / 2;\n                boxWidth = config.width;\n                break;\n            case 'right':\n                textX = config.x + config.width - 8;\n                boxWidth = config.width - 14;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Clip the cell if the text is taller than the text box height.\n        if (textHeight > boxHeight) {\n            gc.beginPath();\n            gc.rect(config.x, config.y, config.width, config.height - 1);\n            gc.clip();\n        }\n        // Set the gc state.\n        gc.font = font;\n        gc.fillStyle = color;\n        gc.textAlign = hAlign;\n        gc.textBaseline = 'bottom';\n        // Terminate call here if we're not eliding or wrapping text\n        if (elideDirection === 'none' && !wrapText) {\n            gc.fillText(text, textX, textY);\n            return;\n        }\n        // The current text width in pixels.\n        let textWidth = gc.measureText(text).width;\n        // Apply text wrapping if enabled.\n        if (wrapText && textWidth > boxWidth) {\n            // Make sure box clipping happens.\n            gc.beginPath();\n            gc.rect(config.x, config.y, config.width, config.height - 1);\n            gc.clip();\n            // Split column name to words based on\n            // whitespace preceding a word boundary.\n            // \"Hello  world\" --> [\"Hello  \", \"world\"]\n            const wordsInColumn = text.split(/\\s(?=\\b)/);\n            // Y-coordinate offset for any additional lines\n            let curY = textY;\n            let textInCurrentLine = wordsInColumn.shift();\n            // Single word. Applying text wrap on word by splitting\n            // it into characters and fitting the maximum number of\n            // characters possible per line (box width).\n            if (wordsInColumn.length === 0) {\n                let curLineTextWidth = gc.measureText(textInCurrentLine).width;\n                while (curLineTextWidth > boxWidth && textInCurrentLine !== '') {\n                    // Iterating from the end of the string until we find a\n                    // substring (0,i) which has a width less than the box width.\n                    for (let i = textInCurrentLine.length; i > 0; i--) {\n                        const curSubString = textInCurrentLine.substring(0, i);\n                        const curSubStringWidth = gc.measureText(curSubString).width;\n                        if (curSubStringWidth < boxWidth || curSubString.length === 1) {\n                            // Found a substring which has a width less than the current\n                            // box width. Rendering that substring on the current line\n                            // and setting the remainder of the parent string as the next\n                            // string to iterate on for the next line.\n                            const nextLineText = textInCurrentLine.substring(i, textInCurrentLine.length);\n                            textInCurrentLine = nextLineText;\n                            curLineTextWidth = gc.measureText(textInCurrentLine).width;\n                            gc.fillText(curSubString, textX, curY);\n                            curY += textHeight;\n                            // No need to continue iterating after we identified\n                            // an index to break the string on.\n                            break;\n                        }\n                    }\n                }\n            }\n            // Multiple words in column header. Fitting maximum\n            // number of words possible per line (box width).\n            else {\n                while (wordsInColumn.length !== 0) {\n                    // Processing the next word in the queue.\n                    const curWord = wordsInColumn.shift();\n                    // Joining that word with the existing text for\n                    // the current line.\n                    const incrementedText = [textInCurrentLine, curWord].join(' ');\n                    const incrementedTextWidth = gc.measureText(incrementedText).width;\n                    if (incrementedTextWidth > boxWidth) {\n                        // If the newly combined text has a width larger than\n                        // the box width, we render the line before the current\n                        // word was added. We set the current word as the next\n                        // line.\n                        gc.fillText(textInCurrentLine, textX, curY);\n                        curY += textHeight;\n                        textInCurrentLine = curWord;\n                    }\n                    else {\n                        // The combined text hasd a width less than the box width. We\n                        // set the the current line text to be the new combined text.\n                        textInCurrentLine = incrementedText;\n                    }\n                }\n            }\n            gc.fillText(textInCurrentLine, textX, curY);\n            // Terminating the call here as we don't want\n            // to apply text eliding when wrapping is active.\n            return;\n        }\n        // Elide text that is too long\n        let elide = '\\u2026';\n        // Compute elided text\n        if (elideDirection === 'right') {\n            while (textWidth > boxWidth && text.length > 1) {\n                if (text.length > 4 && textWidth >= 2 * boxWidth) {\n                    // If text width is substantially bigger, take half the string\n                    text = text.substring(0, text.length / 2 + 1) + elide;\n                }\n                else {\n                    // Otherwise incrementally remove the last character\n                    text = text.substring(0, text.length - 2) + elide;\n                }\n                textWidth = gc.measureText(text).width;\n            }\n        }\n        else {\n            while (textWidth > boxWidth && text.length > 1) {\n                if (text.length > 4 && textWidth >= 2 * boxWidth) {\n                    // If text width is substantially bigger, take half the string\n                    text = elide + text.substring(text.length / 2);\n                }\n                else {\n                    // Otherwise incrementally remove the last character\n                    text = elide + text.substring(2);\n                }\n                textWidth = gc.measureText(text).width;\n            }\n        }\n        // Draw the text for the cell.\n        gc.fillText(text, textX, textY);\n    }\n}\n\n/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\n/**\n * A collection of helper functions relating to merged cell groups\n */\nvar CellGroup;\n(function (CellGroup) {\n    /**\n     * Checks if two cell-groups are intersecting\n     * in the given axis.\n     * @param group1\n     * @param group2\n     * @param axis\n     */\n    function areCellGroupsIntersectingAtAxis(group1, group2, axis) {\n        if (axis === 'row') {\n            return ((group1.r1 >= group2.r1 && group1.r1 <= group2.r2) ||\n                (group1.r2 >= group2.r1 && group1.r2 <= group2.r2) ||\n                (group2.r1 >= group1.r1 && group2.r1 <= group1.r2) ||\n                (group2.r2 >= group1.r1 && group2.r2 <= group1.r2));\n        }\n        return ((group1.c1 >= group2.c1 && group1.c1 <= group2.c2) ||\n            (group1.c2 >= group2.c1 && group1.c2 <= group2.c2) ||\n            (group2.c1 >= group1.c1 && group2.c1 <= group1.c2) ||\n            (group2.c2 >= group1.c1 && group2.c2 <= group1.c2));\n    }\n    CellGroup.areCellGroupsIntersectingAtAxis = areCellGroupsIntersectingAtAxis;\n    /**\n     * Checks if cell-groups are intersecting.\n     * @param group1\n     * @param group2\n     */\n    function areCellGroupsIntersecting(group1, group2) {\n        return (((group1.r1 >= group2.r1 && group1.r1 <= group2.r2) ||\n            (group1.r2 >= group2.r1 && group1.r2 <= group2.r2) ||\n            (group2.r1 >= group1.r1 && group2.r1 <= group1.r2) ||\n            (group2.r2 >= group1.r1 && group2.r2 <= group1.r2)) &&\n            ((group1.c1 >= group2.c1 && group1.c1 <= group2.c2) ||\n                (group1.c2 >= group2.c1 && group1.c2 <= group2.c2) ||\n                (group2.c1 >= group1.c1 && group2.c1 <= group1.c2) ||\n                (group2.c2 >= group1.c1 && group2.c2 <= group1.c2)));\n    }\n    CellGroup.areCellGroupsIntersecting = areCellGroupsIntersecting;\n    /**\n     * Retrieves the index of the cell-group to which\n     * the cell at the given row, column belongs.\n     * @param dataModel\n     * @param rgn\n     * @param row\n     * @param column\n     */\n    function getGroupIndex(dataModel, rgn, row, column) {\n        const numGroups = dataModel.groupCount(rgn);\n        for (let i = 0; i < numGroups; i++) {\n            const group = dataModel.group(rgn, i);\n            if (row >= group.r1 &&\n                row <= group.r2 &&\n                column >= group.c1 &&\n                column <= group.c2) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    CellGroup.getGroupIndex = getGroupIndex;\n    /**\n     * Returns a cell-group for the given row/index coordinates.\n     * @param dataModel\n     * @param rgn\n     * @param row\n     * @param column\n     */\n    function getGroup(dataModel, rgn, row, column) {\n        const groupIndex = getGroupIndex(dataModel, rgn, row, column);\n        if (groupIndex === -1) {\n            return null;\n        }\n        return dataModel.group(rgn, groupIndex);\n    }\n    CellGroup.getGroup = getGroup;\n    /**\n     * Returns all cell groups which belong to\n     * a given cell cell region.\n     * @param dataModel\n     * @param rgn\n     */\n    function getCellGroupsAtRegion(dataModel, rgn) {\n        let groupsAtRegion = [];\n        const numGroups = dataModel.groupCount(rgn);\n        for (let i = 0; i < numGroups; i++) {\n            const group = dataModel.group(rgn, i);\n            groupsAtRegion.push(group);\n        }\n        return groupsAtRegion;\n    }\n    CellGroup.getCellGroupsAtRegion = getCellGroupsAtRegion;\n    /**\n     * Calculates and returns a merged cell-group from\n     * two cell-group objects.\n     * @param groups\n     */\n    function joinCellGroups(groups) {\n        let startRow = Number.MAX_VALUE;\n        let endRow = Number.MIN_VALUE;\n        let startColumn = Number.MAX_VALUE;\n        let endColumn = Number.MIN_VALUE;\n        for (const group of groups) {\n            startRow = Math.min(startRow, group.r1);\n            endRow = Math.max(endRow, group.r2);\n            startColumn = Math.min(startColumn, group.c1);\n            endColumn = Math.max(endColumn, group.c2);\n        }\n        return { r1: startRow, r2: endRow, c1: startColumn, c2: endColumn };\n    }\n    CellGroup.joinCellGroups = joinCellGroups;\n    /**\n     * Merges a cell group with other cells groups in the\n     * same region if they intersect.\n     * @param dataModel the data model of the grid.\n     * @param group the target cell group.\n     * @param region the region of the cell group.\n     * @returns a new cell group after merging has happened.\n     */\n    function joinCellGroupWithMergedCellGroups(dataModel, group, region) {\n        let joinedGroup = { ...group };\n        const mergedCellGroups = getCellGroupsAtRegion(dataModel, region);\n        for (let g = 0; g < mergedCellGroups.length; g++) {\n            const mergedGroup = mergedCellGroups[g];\n            if (areCellGroupsIntersecting(joinedGroup, mergedGroup)) {\n                joinedGroup = joinCellGroups([joinedGroup, mergedGroup]);\n            }\n        }\n        return joinedGroup;\n    }\n    CellGroup.joinCellGroupWithMergedCellGroups = joinCellGroupWithMergedCellGroups;\n    /**\n     * Retrieves a list of cell groups intersecting at\n     * a given row.\n     * @param dataModel data model of the grid.\n     * @param rgn the cell region.\n     * @param row the target row to look for intersections at.\n     * @returns all cell groups intersecting with the row.\n     */\n    function getCellGroupsAtRow(dataModel, rgn, row) {\n        let groupsAtRow = [];\n        const numGroups = dataModel.groupCount(rgn);\n        for (let i = 0; i < numGroups; i++) {\n            const group = dataModel.group(rgn, i);\n            if (row >= group.r1 && row <= group.r2) {\n                groupsAtRow.push(group);\n            }\n        }\n        return groupsAtRow;\n    }\n    CellGroup.getCellGroupsAtRow = getCellGroupsAtRow;\n    /**\n     * Retrieves a list of cell groups intersecting at\n     * a given column.\n     * @param dataModel data model of the grid.\n     * @param rgn the cell region.\n     * @param column the target column to look for intersections at.\n     * @returns all cell groups intersecting with the column.\n     */\n    function getCellGroupsAtColumn(dataModel, rgn, column) {\n        let groupsAtColumn = [];\n        const numGroups = dataModel.groupCount(rgn);\n        for (let i = 0; i < numGroups; i++) {\n            const group = dataModel.group(rgn, i);\n            if (column >= group.c1 && column <= group.c2) {\n                groupsAtColumn.push(group);\n            }\n        }\n        return groupsAtColumn;\n    }\n    CellGroup.getCellGroupsAtColumn = getCellGroupsAtColumn;\n    /**\n     * Merges a target cell group with any cell groups\n     * it intersects with at a given row or column.\n     * @param dataModel data model of the grid.\n     * @param regions list of cell regions.\n     * @param axis row or column.\n     * @param group the target cell group.\n     * @returns a new merged cell group.\n     */\n    function joinCellGroupsIntersectingAtAxis(dataModel, regions, axis, group) {\n        let groupsAtAxis = [];\n        if (axis === 'row') {\n            for (const region of regions) {\n                for (let r = group.r1; r <= group.r2; r++) {\n                    groupsAtAxis = groupsAtAxis.concat(CellGroup.getCellGroupsAtRow(dataModel, region, r));\n                }\n            }\n        }\n        else {\n            for (const region of regions) {\n                for (let c = group.c1; c <= group.c2; c++) {\n                    groupsAtAxis = groupsAtAxis.concat(CellGroup.getCellGroupsAtColumn(dataModel, region, c));\n                }\n            }\n        }\n        let mergedGroupAtAxis = CellGroup.joinCellGroups(groupsAtAxis);\n        if (groupsAtAxis.length > 0) {\n            let mergedCellGroups = [];\n            for (const region of regions) {\n                mergedCellGroups = mergedCellGroups.concat(CellGroup.getCellGroupsAtRegion(dataModel, region));\n            }\n            for (let g = 0; g < mergedCellGroups.length; g++) {\n                const group = mergedCellGroups[g];\n                if (CellGroup.areCellGroupsIntersectingAtAxis(mergedGroupAtAxis, group, axis)) {\n                    mergedGroupAtAxis = CellGroup.joinCellGroups([\n                        group,\n                        mergedGroupAtAxis\n                    ]);\n                    mergedCellGroups.splice(g, 1);\n                    g = 0;\n                }\n            }\n        }\n        return mergedGroupAtAxis;\n    }\n    CellGroup.joinCellGroupsIntersectingAtAxis = joinCellGroupsIntersectingAtAxis;\n})(CellGroup || (CellGroup = {}));\n\n/**\n * A basic implementation of a data grid mouse handler.\n *\n * #### Notes\n * This class may be subclassed and customized as needed.\n */\nclass BasicMouseHandler {\n    constructor() {\n        this._disposed = false;\n        this._pressData = null;\n    }\n    /**\n     * Dispose of the resources held by the mouse handler.\n     */\n    dispose() {\n        // Bail early if the handler is already disposed.\n        if (this._disposed) {\n            return;\n        }\n        // Release any held resources.\n        this.release();\n        // Mark the handler as disposed.\n        this._disposed = true;\n    }\n    /**\n     * Whether the mouse handler is disposed.\n     */\n    get isDisposed() {\n        return this._disposed;\n    }\n    /**\n     * Release the resources held by the handler.\n     */\n    release() {\n        // Bail early if the is no press data.\n        if (!this._pressData) {\n            return;\n        }\n        // Clear the autoselect timeout.\n        if (this._pressData.type === 'select') {\n            this._pressData.timeout = -1;\n        }\n        // Clear the press data.\n        this._pressData.override.dispose();\n        this._pressData = null;\n    }\n    /**\n     * Handle the mouse hover event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse hover event of interest.\n     */\n    onMouseHover(grid, event) {\n        // Hit test the grid.\n        let hit = grid.hitTest(event.clientX, event.clientY);\n        // Get the resize handle for the hit test.\n        let handle = Private$5.resizeHandleForHitTest(hit);\n        // Fetch the cursor for the handle.\n        let cursor = this.cursorForHandle(handle);\n        // Hyperlink logic.\n        const config = Private$5.createCellConfigObject(grid, hit);\n        if (config) {\n            // Retrieve renderer for hovered cell.\n            const renderer = grid.cellRenderers.get(config);\n            if (renderer instanceof HyperlinkRenderer) {\n                cursor = this.cursorForHandle('hyperlink');\n            }\n        }\n        // Update the viewport cursor based on the part.\n        grid.viewport.node.style.cursor = cursor;\n        // TODO support user-defined hover items\n    }\n    /**\n     * Handle the mouse leave event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse hover event of interest.\n     */\n    onMouseLeave(grid, event) {\n        // TODO support user-defined hover popups.\n        // Clear the viewport cursor.\n        grid.viewport.node.style.cursor = '';\n    }\n    /**\n     * Handle the mouse down event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse down event of interest.\n     */\n    onMouseDown(grid, event) {\n        // Unpack the event.\n        let { clientX, clientY } = event;\n        // Hit test the grid.\n        let hit = grid.hitTest(clientX, clientY);\n        // Unpack the hit test.\n        const { region, row, column } = hit;\n        // Bail if the hit test is on an uninteresting region.\n        if (region === 'void') {\n            return;\n        }\n        // Fetch the modifier flags.\n        let shift = event.shiftKey;\n        let accel = Platform.accelKey(event);\n        // Hyperlink logic.\n        if (grid) {\n            // Create cell config object.\n            const config = Private$5.createCellConfigObject(grid, hit);\n            // Retrieve cell renderer.\n            let renderer = grid.cellRenderers.get(config);\n            // Only process hyperlink renderers.\n            if (renderer instanceof HyperlinkRenderer) {\n                // Use the url param if it exists.\n                let url = CellRenderer.resolveOption(renderer.url, config);\n                // Otherwise assume cell value is the URL.\n                if (!url) {\n                    const format = TextRenderer.formatGeneric();\n                    url = format(config);\n                }\n                // Open the hyperlink only if user hit Ctrl+Click.\n                if (accel) {\n                    window.open(url);\n                    // Reset cursor default after clicking\n                    const cursor = this.cursorForHandle('none');\n                    grid.viewport.node.style.cursor = cursor;\n                    // Not applying selections if navigating away.\n                    return;\n                }\n            }\n        }\n        // If the hit test is the body region, the only option is select.\n        if (region === 'body') {\n            // Fetch the selection model.\n            let model = grid.selectionModel;\n            // Bail early if there is no selection model.\n            if (!model) {\n                return;\n            }\n            // Override the document cursor.\n            let override = Drag.overrideCursor('default');\n            // Set up the press data.\n            this._pressData = {\n                type: 'select',\n                region,\n                row,\n                column,\n                override,\n                localX: -1,\n                localY: -1,\n                timeout: -1\n            };\n            // Set up the selection variables.\n            let r1;\n            let c1;\n            let r2;\n            let c2;\n            let cursorRow;\n            let cursorColumn;\n            let clear;\n            // Accel == new selection, keep old selections.\n            if (accel) {\n                r1 = row;\n                r2 = row;\n                c1 = column;\n                c2 = column;\n                cursorRow = row;\n                cursorColumn = column;\n                clear = 'none';\n            }\n            else if (shift) {\n                r1 = model.cursorRow;\n                r2 = row;\n                c1 = model.cursorColumn;\n                c2 = column;\n                cursorRow = model.cursorRow;\n                cursorColumn = model.cursorColumn;\n                clear = 'current';\n            }\n            else {\n                r1 = row;\n                r2 = row;\n                c1 = column;\n                c2 = column;\n                cursorRow = row;\n                cursorColumn = column;\n                clear = 'all';\n            }\n            // Make the selection.\n            model.select({ r1, c1, r2, c2, cursorRow, cursorColumn, clear });\n            // Done.\n            return;\n        }\n        // Otherwise, the hit test is on a header region.\n        // Convert the hit test into a part.\n        let handle = Private$5.resizeHandleForHitTest(hit);\n        // Fetch the cursor for the handle.\n        let cursor = this.cursorForHandle(handle);\n        // Handle horizontal resize.\n        if (handle === 'left' || handle === 'right') {\n            // Set up the resize data type.\n            const type = 'column-resize';\n            // Determine the column region.\n            let rgn = region === 'column-header' ? 'body' : 'row-header';\n            // Determine the section index.\n            let index = handle === 'left' ? column - 1 : column;\n            // Fetch the section size.\n            let size = grid.columnSize(rgn, index);\n            // Override the document cursor.\n            let override = Drag.overrideCursor(cursor);\n            // Create the temporary press data.\n            this._pressData = { type, region: rgn, index, size, clientX, override };\n            // Done.\n            return;\n        }\n        // Handle vertical resize\n        if (handle === 'top' || handle === 'bottom') {\n            // Set up the resize data type.\n            const type = 'row-resize';\n            // Determine the row region.\n            let rgn = region === 'row-header' ? 'body' : 'column-header';\n            // Determine the section index.\n            let index = handle === 'top' ? row - 1 : row;\n            // Fetch the section size.\n            let size = grid.rowSize(rgn, index);\n            // Override the document cursor.\n            let override = Drag.overrideCursor(cursor);\n            // Create the temporary press data.\n            this._pressData = { type, region: rgn, index, size, clientY, override };\n            // Done.\n            return;\n        }\n        // Otherwise, the only option is select.\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Bail if there is no selection model.\n        if (!model) {\n            return;\n        }\n        // Override the document cursor.\n        let override = Drag.overrideCursor('default');\n        // Set up the press data.\n        this._pressData = {\n            type: 'select',\n            region,\n            row,\n            column,\n            override,\n            localX: -1,\n            localY: -1,\n            timeout: -1\n        };\n        // Set up the selection variables.\n        let r1;\n        let c1;\n        let r2;\n        let c2;\n        let cursorRow;\n        let cursorColumn;\n        let clear;\n        // Compute the selection based on the pressed region.\n        if (region === 'corner-header') {\n            r1 = 0;\n            r2 = Infinity;\n            c1 = 0;\n            c2 = Infinity;\n            cursorRow = accel ? 0 : shift ? model.cursorRow : 0;\n            cursorColumn = accel ? 0 : shift ? model.cursorColumn : 0;\n            clear = accel ? 'none' : shift ? 'current' : 'all';\n        }\n        else if (region === 'row-header') {\n            r1 = accel ? row : shift ? model.cursorRow : row;\n            r2 = row;\n            const selectionGroup = { r1: r1, c1: 0, r2: r2, c2: 0 };\n            const joinedGroup = CellGroup.joinCellGroupsIntersectingAtAxis(grid.dataModel, ['row-header', 'body'], 'row', selectionGroup);\n            // Check if there are any merges\n            if (joinedGroup.r1 != Number.MAX_VALUE) {\n                r1 = joinedGroup.r1;\n                r2 = joinedGroup.r2;\n            }\n            c1 = 0;\n            c2 = Infinity;\n            cursorRow = accel ? row : shift ? model.cursorRow : row;\n            cursorColumn = accel ? 0 : shift ? model.cursorColumn : 0;\n            clear = accel ? 'none' : shift ? 'current' : 'all';\n        }\n        else if (region === 'column-header') {\n            r1 = 0;\n            r2 = Infinity;\n            c1 = accel ? column : shift ? model.cursorColumn : column;\n            c2 = column;\n            const selectionGroup = { r1: 0, c1: c1, r2: 0, c2: c2 };\n            const joinedGroup = CellGroup.joinCellGroupsIntersectingAtAxis(grid.dataModel, ['column-header', 'body'], 'column', selectionGroup);\n            // Check if there are any merges\n            if (joinedGroup.c1 != Number.MAX_VALUE) {\n                c1 = joinedGroup.c1;\n                c2 = joinedGroup.c2;\n            }\n            cursorRow = accel ? 0 : shift ? model.cursorRow : 0;\n            cursorColumn = accel ? column : shift ? model.cursorColumn : column;\n            clear = accel ? 'none' : shift ? 'current' : 'all';\n        }\n        else {\n            r1 = accel ? row : shift ? model.cursorRow : row;\n            r2 = row;\n            c1 = accel ? column : shift ? model.cursorColumn : column;\n            c2 = column;\n            cursorRow = accel ? row : shift ? model.cursorRow : row;\n            cursorColumn = accel ? column : shift ? model.cursorColumn : column;\n            clear = accel ? 'none' : shift ? 'current' : 'all';\n        }\n        // Make the selection.\n        model.select({ r1, c1, r2, c2, cursorRow, cursorColumn, clear });\n    }\n    /**\n     * Handle the mouse move event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse move event of interest.\n     */\n    onMouseMove(grid, event) {\n        // Fetch the press data.\n        const data = this._pressData;\n        // Bail early if there is no press data.\n        if (!data) {\n            return;\n        }\n        // Handle a row resize.\n        if (data.type === 'row-resize') {\n            let dy = event.clientY - data.clientY;\n            grid.resizeRow(data.region, data.index, data.size + dy);\n            return;\n        }\n        // Handle a column resize.\n        if (data.type === 'column-resize') {\n            let dx = event.clientX - data.clientX;\n            grid.resizeColumn(data.region, data.index, data.size + dx);\n            return;\n        }\n        // Otherwise, it's a select.\n        // Mouse moves during a corner header press are a no-op.\n        if (data.region === 'corner-header') {\n            return;\n        }\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Bail early if the selection model was removed.\n        if (!model) {\n            return;\n        }\n        // Map to local coordinates.\n        let { lx, ly } = grid.mapToLocal(event.clientX, event.clientY);\n        // Update the local mouse coordinates in the press data.\n        data.localX = lx;\n        data.localY = ly;\n        // Fetch the grid geometry.\n        let hw = grid.headerWidth;\n        let hh = grid.headerHeight;\n        let vpw = grid.viewportWidth;\n        let vph = grid.viewportHeight;\n        let sx = grid.scrollX;\n        let sy = grid.scrollY;\n        let msx = grid.maxScrollY;\n        let msy = grid.maxScrollY;\n        // Fetch the selection mode.\n        let mode = model.selectionMode;\n        // Set up the timeout variable.\n        let timeout = -1;\n        // Compute the timemout based on hit region and mouse position.\n        if (data.region === 'row-header' || mode === 'row') {\n            if (ly < hh && sy > 0) {\n                timeout = Private$5.computeTimeout(hh - ly);\n            }\n            else if (ly >= vph && sy < msy) {\n                timeout = Private$5.computeTimeout(ly - vph);\n            }\n        }\n        else if (data.region === 'column-header' || mode === 'column') {\n            if (lx < hw && sx > 0) {\n                timeout = Private$5.computeTimeout(hw - lx);\n            }\n            else if (lx >= vpw && sx < msx) {\n                timeout = Private$5.computeTimeout(lx - vpw);\n            }\n        }\n        else {\n            if (lx < hw && sx > 0) {\n                timeout = Private$5.computeTimeout(hw - lx);\n            }\n            else if (lx >= vpw && sx < msx) {\n                timeout = Private$5.computeTimeout(lx - vpw);\n            }\n            else if (ly < hh && sy > 0) {\n                timeout = Private$5.computeTimeout(hh - ly);\n            }\n            else if (ly >= vph && sy < msy) {\n                timeout = Private$5.computeTimeout(ly - vph);\n            }\n        }\n        // Update or initiate the autoselect if needed.\n        if (timeout >= 0) {\n            if (data.timeout < 0) {\n                data.timeout = timeout;\n                setTimeout(() => {\n                    Private$5.autoselect(grid, data);\n                }, timeout);\n            }\n            else {\n                data.timeout = timeout;\n            }\n            return;\n        }\n        // Otherwise, clear the autoselect timeout.\n        data.timeout = -1;\n        // Map the position to virtual coordinates.\n        let { vx, vy } = grid.mapToVirtual(event.clientX, event.clientY);\n        // Clamp the coordinates to the limits.\n        vx = Math.max(0, Math.min(vx, grid.bodyWidth - 1));\n        vy = Math.max(0, Math.min(vy, grid.bodyHeight - 1));\n        // Set up the selection variables.\n        let r1;\n        let c1;\n        let r2;\n        let c2;\n        let cursorRow = model.cursorRow;\n        let cursorColumn = model.cursorColumn;\n        let clear = 'current';\n        // Compute the selection based pressed region.\n        if (data.region === 'row-header' || mode === 'row') {\n            r1 = data.row;\n            r2 = grid.rowAt('body', vy);\n            const selectionGroup = { r1: r1, c1: 0, r2: r2, c2: 0 };\n            const joinedGroup = CellGroup.joinCellGroupsIntersectingAtAxis(grid.dataModel, ['row-header', 'body'], 'row', selectionGroup);\n            // Check if there are any merges\n            if (joinedGroup.r1 != Number.MAX_VALUE) {\n                r1 = Math.min(r1, joinedGroup.r1);\n                r2 = Math.max(r2, joinedGroup.r2);\n            }\n            c1 = 0;\n            c2 = Infinity;\n        }\n        else if (data.region === 'column-header' || mode === 'column') {\n            r1 = 0;\n            r2 = Infinity;\n            c1 = data.column;\n            c2 = grid.columnAt('body', vx);\n            const selectionGroup = { r1: 0, c1: c1, r2: 0, c2: c2 };\n            const joinedGroup = CellGroup.joinCellGroupsIntersectingAtAxis(grid.dataModel, ['column-header', 'body'], 'column', selectionGroup);\n            // Check if there are any merges\n            if (joinedGroup.c1 != Number.MAX_VALUE) {\n                c1 = joinedGroup.c1;\n                c2 = joinedGroup.c2;\n            }\n        }\n        else {\n            r1 = cursorRow;\n            r2 = grid.rowAt('body', vy);\n            c1 = cursorColumn;\n            c2 = grid.columnAt('body', vx);\n        }\n        // Make the selection.\n        model.select({ r1, c1, r2, c2, cursorRow, cursorColumn, clear });\n    }\n    /**\n     * Handle the mouse up event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse up event of interest.\n     */\n    onMouseUp(grid, event) {\n        this.release();\n    }\n    /**\n     * Handle the mouse double click event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse up event of interest.\n     */\n    onMouseDoubleClick(grid, event) {\n        if (!grid.dataModel) {\n            this.release();\n            return;\n        }\n        // Unpack the event.\n        let { clientX, clientY } = event;\n        // Hit test the grid.\n        let hit = grid.hitTest(clientX, clientY);\n        // Unpack the hit test.\n        let { region, row, column } = hit;\n        if (region === 'void') {\n            this.release();\n            return;\n        }\n        if (region === 'column-header' || region === 'corner-header') {\n            // Convert the hit test into a part.\n            const handle = Private$5.resizeHandleForHitTest(hit);\n            if (handle === 'left' || handle === 'right') {\n                let colIndex = handle === 'left' ? column - 1 : column;\n                let colRegion = region === 'column-header' ? 'body' : 'row-header';\n                if (colIndex < 0) {\n                    if (region === 'column-header') {\n                        // If the column is -1, it means we are in the corner header\n                        colIndex = grid.dataModel.columnCount('row-header') - 1;\n                        colRegion = 'row-header';\n                    }\n                    else {\n                        // If we are on the left edge of the row header, do nothing\n                        return;\n                    }\n                }\n                grid.resizeColumn(colRegion, colIndex, null);\n            }\n        }\n        if (region === 'body') {\n            if (grid.editable) {\n                const cell = {\n                    grid: grid,\n                    row: row,\n                    column: column\n                };\n                grid.editorController.edit(cell);\n            }\n        }\n        this.release();\n    }\n    /**\n     * Handle the context menu event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The context menu event of interest.\n     */\n    onContextMenu(grid, event) {\n        // TODO support user-defined context menus\n    }\n    /**\n     * Handle the wheel event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The wheel event of interest.\n     */\n    onWheel(grid, event) {\n        // Bail if a mouse press is in progress.\n        if (this._pressData) {\n            return;\n        }\n        // Extract the delta X and Y movement.\n        let dx = event.deltaX;\n        let dy = event.deltaY;\n        // Convert the delta values to pixel values.\n        switch (event.deltaMode) {\n            case 0: // DOM_DELTA_PIXEL\n                break;\n            case 1: {\n                // DOM_DELTA_LINE\n                let ds = grid.defaultSizes;\n                dx *= ds.columnWidth;\n                dy *= ds.rowHeight;\n                break;\n            }\n            case 2: // DOM_DELTA_PAGE\n                dx *= grid.pageWidth;\n                dy *= grid.pageHeight;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Only scroll and stop the event propagation if needed.\n        if (\n        // Scrolling left and not reached min already\n        (dx < 0 && grid.scrollX !== 0) ||\n            // Scrolling right and not reached max already\n            (dx > 0 && grid.scrollX !== grid.maxScrollX) ||\n            // Scrolling top and not reached min already\n            (dy < 0 && grid.scrollY !== 0) ||\n            // Scrolling down and not reached max already\n            (dy > 0 && grid.scrollY !== grid.maxScrollY)) {\n            event.preventDefault();\n            event.stopPropagation();\n            // Scroll by the desired amount.\n            grid.scrollBy(dx, dy);\n        }\n    }\n    /**\n     * Convert a resize handle into a cursor.\n     */\n    cursorForHandle(handle) {\n        return Private$5.cursorMap[handle];\n    }\n    /**\n     * Get the current pressData\n     */\n    get pressData() {\n        return this._pressData;\n    }\n}\n/**\n * The namespace for the module implementation details.\n */\nvar Private$5;\n(function (Private) {\n    /**\n     * Creates a CellConfig object from a hit region.\n     */\n    function createCellConfigObject(grid, hit) {\n        const { region, row, column } = hit;\n        // Terminate call if region is void.\n        if (region === 'void') {\n            return undefined;\n        }\n        // Augment hit region params with value and metadata.\n        const value = grid.dataModel.data(region, row, column);\n        const metadata = grid.dataModel.metadata(region, row, column);\n        // Create cell config object to retrieve cell renderer.\n        const config = {\n            ...hit,\n            value: value,\n            metadata: metadata\n        };\n        return config;\n    }\n    Private.createCellConfigObject = createCellConfigObject;\n    /**\n     * Get the resize handle for a grid hit test.\n     */\n    function resizeHandleForHitTest(hit) {\n        // Fetch the row and column.\n        let r = hit.row;\n        let c = hit.column;\n        // Fetch the leading and trailing sizes.\n        let lw = hit.x;\n        let lh = hit.y;\n        let tw = hit.width - hit.x;\n        let th = hit.height - hit.y;\n        // Set up the result variable.\n        let result;\n        // Dispatch based on hit test region.\n        switch (hit.region) {\n            case 'corner-header':\n                if (c > 0 && lw <= 5) {\n                    result = 'left';\n                }\n                else if (tw <= 6) {\n                    result = 'right';\n                }\n                else if (r > 0 && lh <= 5) {\n                    result = 'top';\n                }\n                else if (th <= 6) {\n                    result = 'bottom';\n                }\n                else {\n                    result = 'none';\n                }\n                break;\n            case 'column-header':\n                if (c > 0 && lw <= 5) {\n                    result = 'left';\n                }\n                else if (tw <= 6) {\n                    result = 'right';\n                }\n                else if (r > 0 && lh <= 5) {\n                    result = 'top';\n                }\n                else if (th <= 6) {\n                    result = 'bottom';\n                }\n                else {\n                    result = 'none';\n                }\n                break;\n            case 'row-header':\n                if (c > 0 && lw <= 5) {\n                    result = 'left';\n                }\n                else if (tw <= 6) {\n                    result = 'right';\n                }\n                else if (r > 0 && lh <= 5) {\n                    result = 'top';\n                }\n                else if (th <= 6) {\n                    result = 'bottom';\n                }\n                else {\n                    result = 'none';\n                }\n                break;\n            case 'body':\n                result = 'none';\n                break;\n            case 'void':\n                result = 'none';\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Return the result.\n        return result;\n    }\n    Private.resizeHandleForHitTest = resizeHandleForHitTest;\n    /**\n     * A timer callback for the autoselect loop.\n     *\n     * @param grid - The datagrid of interest.\n     *\n     * @param data - The select data of interest.\n     */\n    function autoselect(grid, data) {\n        // Bail early if the timeout has been reset.\n        if (data.timeout < 0) {\n            return;\n        }\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Bail early if the selection model has been removed.\n        if (!model) {\n            return;\n        }\n        // Fetch the current selection.\n        let cs = model.currentSelection();\n        // Bail early if there is no current selection.\n        if (!cs) {\n            return;\n        }\n        // Fetch local X and Y coordinates of the mouse.\n        let lx = data.localX;\n        let ly = data.localY;\n        // Set up the selection variables.\n        let r1 = cs.r1;\n        let c1 = cs.c1;\n        let r2 = cs.r2;\n        let c2 = cs.c2;\n        let cursorRow = model.cursorRow;\n        let cursorColumn = model.cursorColumn;\n        let clear = 'current';\n        // Fetch the grid geometry.\n        let hw = grid.headerWidth;\n        let hh = grid.headerHeight;\n        let vpw = grid.viewportWidth;\n        let vph = grid.viewportHeight;\n        // Fetch the selection mode.\n        let mode = model.selectionMode;\n        // Update the selection based on the hit region.\n        if (data.region === 'row-header' || mode === 'row') {\n            r2 += ly <= hh ? -1 : ly >= vph ? 1 : 0;\n        }\n        else if (data.region === 'column-header' || mode === 'column') {\n            c2 += lx <= hw ? -1 : lx >= vpw ? 1 : 0;\n        }\n        else {\n            r2 += ly <= hh ? -1 : ly >= vph ? 1 : 0;\n            c2 += lx <= hw ? -1 : lx >= vpw ? 1 : 0;\n        }\n        // Update the current selection.\n        model.select({ r1, c1, r2, c2, cursorRow, cursorColumn, clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid based on the hit region.\n        if (data.region === 'row-header' || mode === 'row') {\n            grid.scrollToRow(cs.r2);\n        }\n        else if (data.region === 'column-header' || mode == 'column') {\n            grid.scrollToColumn(cs.c2);\n        }\n        else if (mode === 'cell') {\n            grid.scrollToCell(cs.r2, cs.c2);\n        }\n        // Schedule the next call with the current timeout.\n        setTimeout(() => {\n            autoselect(grid, data);\n        }, data.timeout);\n    }\n    Private.autoselect = autoselect;\n    /**\n     * Compute the scroll timeout for the given delta distance.\n     *\n     * @param delta - The delta pixels from the origin.\n     *\n     * @returns The scaled timeout in milliseconds.\n     */\n    function computeTimeout(delta) {\n        return 5 + 120 * (1 - Math.min(128, Math.abs(delta)) / 128);\n    }\n    Private.computeTimeout = computeTimeout;\n    /**\n     * A mapping of resize handle to cursor.\n     */\n    Private.cursorMap = {\n        top: 'ns-resize',\n        left: 'ew-resize',\n        right: 'ew-resize',\n        bottom: 'ns-resize',\n        hyperlink: 'pointer',\n        none: 'default'\n    };\n})(Private$5 || (Private$5 = {}));\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * A base class for creating data grid selection models.\n *\n * #### Notes\n * If the predefined selection models are insufficient for a particular\n * use case, a custom model can be defined which derives from this class.\n */\nclass SelectionModel {\n    /**\n     * Construct a new selection model.\n     *\n     * @param options - The options for initializing the model.\n     */\n    constructor(options) {\n        this._changed = new Signal(this);\n        this._selectionMode = 'cell';\n        this.dataModel = options.dataModel;\n        this._selectionMode = options.selectionMode || 'cell';\n        this.dataModel.changed.connect(this.onDataModelChanged, this);\n    }\n    /**\n     * A signal emitted when the selection model has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Get the selection mode for the model.\n     */\n    get selectionMode() {\n        return this._selectionMode;\n    }\n    /**\n     * Set the selection mode for the model.\n     *\n     * #### Notes\n     * This will clear the selection model.\n     */\n    set selectionMode(value) {\n        // Bail early if the mode does not change.\n        if (this._selectionMode === value) {\n            return;\n        }\n        // Update the internal mode.\n        this._selectionMode = value;\n        // Clear the current selections.\n        this.clear();\n    }\n    /**\n     * Test whether any selection intersects a row.\n     *\n     * @param index - The row index of interest.\n     *\n     * @returns Whether any selection intersects the row.\n     *\n     * #### Notes\n     * This method may be reimplemented in a subclass.\n     */\n    isRowSelected(index) {\n        return some(this.selections(), s => Private$4.containsRow(s, index));\n    }\n    /**\n     * Test whether any selection intersects a column.\n     *\n     * @param index - The column index of interest.\n     *\n     * @returns Whether any selection intersects the column.\n     *\n     * #### Notes\n     * This method may be reimplemented in a subclass.\n     */\n    isColumnSelected(index) {\n        return some(this.selections(), s => Private$4.containsColumn(s, index));\n    }\n    /**\n     * Test whether any selection intersects a cell.\n     *\n     * @param row - The row index of interest.\n     *\n     * @param column - The column index of interest.\n     *\n     * @returns Whether any selection intersects the cell.\n     *\n     * #### Notes\n     * This method may be reimplemented in a subclass.\n     */\n    isCellSelected(row, column) {\n        return some(this.selections(), s => Private$4.containsCell(s, row, column));\n    }\n    /**\n     * A signal handler for the data model `changed` signal.\n     *\n     * @param args - The arguments for the signal.\n     *\n     * #### Notes\n     * Selection model implementations should update their selections\n     * in a manner that is relevant for the changes to the data model.\n     *\n     * The default implementation of this method is a no-op.\n     */\n    onDataModelChanged(sender, args) {\n        // pass\n    }\n    /**\n     * Emit the `changed` signal for the selection model.\n     *\n     * #### Notes\n     * Subclasses should call this method whenever the selection model\n     * has changed so that attached data grids can update themselves.\n     */\n    emitChanged() {\n        this._changed.emit(undefined);\n    }\n}\n/**\n * The namespace for the module implementation details.\n */\nvar Private$4;\n(function (Private) {\n    /**\n     * Test whether a selection contains a given row.\n     */\n    function containsRow(selection, row) {\n        let { r1, r2 } = selection;\n        return (row >= r1 && row <= r2) || (row >= r2 && row <= r1);\n    }\n    Private.containsRow = containsRow;\n    /**\n     * Test whether a selection contains a given column.\n     */\n    function containsColumn(selection, column) {\n        let { c1, c2 } = selection;\n        return (column >= c1 && column <= c2) || (column >= c2 && column <= c1);\n    }\n    Private.containsColumn = containsColumn;\n    /**\n     * Test whether a selection contains a given cell.\n     */\n    function containsCell(selection, row, column) {\n        return containsRow(selection, row) && containsColumn(selection, column);\n    }\n    Private.containsCell = containsCell;\n})(Private$4 || (Private$4 = {}));\n\n/**\n * A basic selection model implementation.\n *\n * #### Notes\n * This selection model is sufficient for most use cases where\n * structural knowledge of the data source is *not* required.\n */\nclass BasicSelectionModel extends SelectionModel {\n    constructor() {\n        super(...arguments);\n        this._cursorRow = -1;\n        this._cursorColumn = -1;\n        this._cursorRectIndex = -1;\n        this._selections = [];\n    }\n    /**\n     * Whether the selection model is empty.\n     */\n    get isEmpty() {\n        return this._selections.length === 0;\n    }\n    /**\n     * The row index of the cursor.\n     */\n    get cursorRow() {\n        return this._cursorRow;\n    }\n    /**\n     * The column index of the cursor.\n     */\n    get cursorColumn() {\n        return this._cursorColumn;\n    }\n    /**\n     * Move cursor down/up/left/right while making sure it remains\n     * within the bounds of selected rectangles\n     *\n     * @param direction - The direction of the movement.\n     */\n    moveCursorWithinSelections(direction) {\n        // Bail early if there are no selections or no existing cursor\n        if (this.isEmpty || this.cursorRow === -1 || this._cursorColumn === -1) {\n            return;\n        }\n        // Bail early if only single cell is selected\n        const firstSelection = this._selections[0];\n        if (this._selections.length === 1 &&\n            firstSelection.r1 === firstSelection.r2 &&\n            firstSelection.c1 === firstSelection.c2) {\n            return;\n        }\n        // start from last selection rectangle\n        if (this._cursorRectIndex === -1) {\n            this._cursorRectIndex = this._selections.length - 1;\n        }\n        let cursorRect = this._selections[this._cursorRectIndex];\n        const dr = direction === 'down' ? 1 : direction === 'up' ? -1 : 0;\n        const dc = direction === 'right' ? 1 : direction === 'left' ? -1 : 0;\n        let newRow = this._cursorRow + dr;\n        let newColumn = this._cursorColumn + dc;\n        const r1 = Math.min(cursorRect.r1, cursorRect.r2);\n        const r2 = Math.max(cursorRect.r1, cursorRect.r2);\n        const c1 = Math.min(cursorRect.c1, cursorRect.c2);\n        const c2 = Math.max(cursorRect.c1, cursorRect.c2);\n        const moveToNextRect = () => {\n            this._cursorRectIndex =\n                (this._cursorRectIndex + 1) % this._selections.length;\n            cursorRect = this._selections[this._cursorRectIndex];\n            newRow = Math.min(cursorRect.r1, cursorRect.r2);\n            newColumn = Math.min(cursorRect.c1, cursorRect.c2);\n        };\n        const moveToPreviousRect = () => {\n            this._cursorRectIndex =\n                this._cursorRectIndex === 0\n                    ? this._selections.length - 1\n                    : this._cursorRectIndex - 1;\n            cursorRect = this._selections[this._cursorRectIndex];\n            newRow = Math.max(cursorRect.r1, cursorRect.r2);\n            newColumn = Math.max(cursorRect.c1, cursorRect.c2);\n        };\n        if (newRow > r2) {\n            newRow = r1;\n            newColumn += 1;\n            if (newColumn > c2) {\n                moveToNextRect();\n            }\n        }\n        else if (newRow < r1) {\n            newRow = r2;\n            newColumn -= 1;\n            if (newColumn < c1) {\n                moveToPreviousRect();\n            }\n        }\n        else if (newColumn > c2) {\n            newColumn = c1;\n            newRow += 1;\n            if (newRow > r2) {\n                moveToNextRect();\n            }\n        }\n        else if (newColumn < c1) {\n            newColumn = c2;\n            newRow -= 1;\n            if (newRow < r1) {\n                moveToPreviousRect();\n            }\n        }\n        this._cursorRow = newRow;\n        this._cursorColumn = newColumn;\n        // Emit the changed signal.\n        this.emitChanged();\n    }\n    /**\n     * Get the current selection in the selection model.\n     *\n     * @returns The current selection or `null`.\n     *\n     * #### Notes\n     * This is the selection which holds the cursor.\n     */\n    currentSelection() {\n        return this._selections[this._selections.length - 1] || null;\n    }\n    /**\n     * Get an iterator of the selections in the model.\n     *\n     * @returns A new iterator of the current selections.\n     *\n     * #### Notes\n     * The data grid will render the selections in order.\n     */\n    *selections() {\n        yield* this._selections;\n    }\n    /**\n     * Select the specified cells.\n     *\n     * @param args - The arguments for the selection.\n     */\n    select(args) {\n        // Fetch the current row and column counts;\n        let rowCount = this.dataModel.rowCount('body');\n        let columnCount = this.dataModel.columnCount('body');\n        // Bail early if there is no content.\n        if (rowCount <= 0 || columnCount <= 0) {\n            return;\n        }\n        // Unpack the arguments.\n        let { r1, c1, r2, c2, cursorRow, cursorColumn, clear } = args;\n        // Clear the necessary selections.\n        if (clear === 'all') {\n            this._selections.length = 0;\n        }\n        else if (clear === 'current') {\n            this._selections.pop();\n        }\n        // Clamp to the data model bounds.\n        r1 = Math.max(0, Math.min(r1, rowCount - 1));\n        r2 = Math.max(0, Math.min(r2, rowCount - 1));\n        c1 = Math.max(0, Math.min(c1, columnCount - 1));\n        c2 = Math.max(0, Math.min(c2, columnCount - 1));\n        // Indicate if a row/column has already been selected.\n        let alreadySelected = false;\n        // Handle the selection mode.\n        if (this.selectionMode === 'row') {\n            c1 = 0;\n            c2 = columnCount - 1;\n            alreadySelected =\n                this._selections.filter(selection => selection.r1 === r1).length !== 0;\n            // Remove from selections if already selected.\n            this._selections = alreadySelected\n                ? this._selections.filter(selection => selection.r1 !== r1)\n                : this._selections;\n        }\n        else if (this.selectionMode === 'column') {\n            r1 = 0;\n            r2 = rowCount - 1;\n            alreadySelected =\n                this._selections.filter(selection => selection.c1 === c1).length !== 0;\n            // Remove from selections if already selected.\n            this._selections = alreadySelected\n                ? this._selections.filter(selection => selection.c1 !== c1)\n                : this._selections;\n        }\n        // Alias the cursor row and column.\n        let cr = cursorRow;\n        let cc = cursorColumn;\n        // Compute the new cursor location.\n        if (cr < 0 || (cr < r1 && cr < r2) || (cr > r1 && cr > r2)) {\n            cr = r1;\n        }\n        if (cc < 0 || (cc < c1 && cc < c2) || (cc > c1 && cc > c2)) {\n            cc = c1;\n        }\n        // Update the cursor.\n        this._cursorRow = cr;\n        this._cursorColumn = cc;\n        this._cursorRectIndex = this._selections.length;\n        // Add the new selection if it wasn't already selected.\n        if (!alreadySelected) {\n            this._selections.push({ r1, c1, r2, c2 });\n        }\n        // Emit the changed signal.\n        this.emitChanged();\n    }\n    /**\n     * Clear all selections in the selection model.\n     */\n    clear() {\n        // Bail early if there are no selections.\n        if (this._selections.length === 0) {\n            return;\n        }\n        // Reset the internal state.\n        this._cursorRow = -1;\n        this._cursorColumn = -1;\n        this._cursorRectIndex = -1;\n        this._selections.length = 0;\n        // Emit the changed signal.\n        this.emitChanged();\n    }\n    /**\n     * A signal handler for the data model `changed` signal.\n     *\n     * @param args - The arguments for the signal.\n     */\n    onDataModelChanged(sender, args) {\n        // Bail early if the model has no current selections.\n        if (this._selections.length === 0) {\n            return;\n        }\n        // Bail early if the cells have changed in place.\n        if (args.type === 'cells-changed') {\n            return;\n        }\n        // Bail early if there is no change to the row or column count.\n        if (args.type === 'rows-moved' || args.type === 'columns-moved') {\n            return;\n        }\n        // Fetch the last row and column index.\n        let lr = sender.rowCount('body') - 1;\n        let lc = sender.columnCount('body') - 1;\n        // Bail early if the data model is empty.\n        if (lr < 0 || lc < 0) {\n            this._selections.length = 0;\n            this.emitChanged();\n            return;\n        }\n        // Fetch the selection mode.\n        let mode = this.selectionMode;\n        // Set up the assignment index variable.\n        let j = 0;\n        // Iterate over the current selections.\n        for (let i = 0, n = this._selections.length; i < n; ++i) {\n            // Unpack the selection.\n            let { r1, c1, r2, c2 } = this._selections[i];\n            // Skip the selection if it will disappear.\n            if ((lr < r1 && lr < r2) || (lc < c1 && lc < c2)) {\n                continue;\n            }\n            // Modify the bounds based on the selection mode.\n            if (mode === 'row') {\n                r1 = Math.max(0, Math.min(r1, lr));\n                r2 = Math.max(0, Math.min(r2, lr));\n                c1 = 0;\n                c2 = lc;\n            }\n            else if (mode === 'column') {\n                r1 = 0;\n                r2 = lr;\n                c1 = Math.max(0, Math.min(c1, lc));\n                c2 = Math.max(0, Math.min(c2, lc));\n            }\n            else {\n                r1 = Math.max(0, Math.min(r1, lr));\n                r2 = Math.max(0, Math.min(r2, lr));\n                c1 = Math.max(0, Math.min(c1, lc));\n                c2 = Math.max(0, Math.min(c2, lc));\n            }\n            // Assign the modified selection to the array.\n            this._selections[j++] = { r1, c1, r2, c2 };\n        }\n        // Remove the stale selections.\n        this._selections.length = j;\n        // Emit the changed signal.\n        this.emitChanged();\n    }\n}\n\n/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\n// default validation error message\nconst DEFAULT_INVALID_INPUT_MESSAGE = 'Invalid input!';\n/**\n * A cell input validator object which always returns valid.\n */\nclass PassInputValidator {\n    /**\n     * Validate cell input.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param value - The cell value input.\n     *\n     * @returns An object with validation result.\n     */\n    validate(cell, value) {\n        return { valid: true };\n    }\n}\n/**\n * Text cell input validator.\n */\nclass TextInputValidator {\n    constructor() {\n        /**\n         * Minimum text length\n         *\n         * The default is Number.NaN, meaning no minimum constraint\n         */\n        this.minLength = Number.NaN;\n        /**\n         * Maximum text length\n         *\n         * The default is Number.NaN, meaning no maximum constraint\n         */\n        this.maxLength = Number.NaN;\n        /**\n         * Required text pattern as regular expression\n         *\n         * The default is null, meaning no pattern constraint\n         */\n        this.pattern = null;\n    }\n    /**\n     * Validate cell input.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param value - The cell value input.\n     *\n     * @returns An object with validation result.\n     */\n    validate(cell, value) {\n        if (value === null) {\n            return { valid: true };\n        }\n        if (typeof value !== 'string') {\n            return {\n                valid: false,\n                message: 'Input must be valid text'\n            };\n        }\n        if (!isNaN(this.minLength) && value.length < this.minLength) {\n            return {\n                valid: false,\n                message: `Text length must be greater than ${this.minLength}`\n            };\n        }\n        if (!isNaN(this.maxLength) && value.length > this.maxLength) {\n            return {\n                valid: false,\n                message: `Text length must be less than ${this.maxLength}`\n            };\n        }\n        if (this.pattern && !this.pattern.test(value)) {\n            return {\n                valid: false,\n                message: `Text doesn't match the required pattern`\n            };\n        }\n        return { valid: true };\n    }\n}\n/**\n * Integer cell input validator.\n */\nclass IntegerInputValidator {\n    constructor() {\n        /**\n         * Minimum value\n         *\n         * The default is Number.NaN, meaning no minimum constraint\n         */\n        this.min = Number.NaN;\n        /**\n         * Maximum value\n         *\n         * The default is Number.NaN, meaning no maximum constraint\n         */\n        this.max = Number.NaN;\n    }\n    /**\n     * Validate cell input.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param value - The cell value input.\n     *\n     * @returns An object with validation result.\n     */\n    validate(cell, value) {\n        if (value === null) {\n            return { valid: true };\n        }\n        if (isNaN(value) || value % 1 !== 0) {\n            return {\n                valid: false,\n                message: 'Input must be valid integer'\n            };\n        }\n        if (!isNaN(this.min) && value < this.min) {\n            return {\n                valid: false,\n                message: `Input must be greater than ${this.min}`\n            };\n        }\n        if (!isNaN(this.max) && value > this.max) {\n            return {\n                valid: false,\n                message: `Input must be less than ${this.max}`\n            };\n        }\n        return { valid: true };\n    }\n}\n/**\n * Real number cell input validator.\n */\nclass NumberInputValidator {\n    constructor() {\n        /**\n         * Minimum value\n         *\n         * The default is Number.NaN, meaning no minimum constraint\n         */\n        this.min = Number.NaN;\n        /**\n         * Maximum value\n         *\n         * The default is Number.NaN, meaning no maximum constraint\n         */\n        this.max = Number.NaN;\n    }\n    /**\n     * Validate cell input.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param value - The cell value input.\n     *\n     * @returns An object with validation result.\n     */\n    validate(cell, value) {\n        if (value === null) {\n            return { valid: true };\n        }\n        if (isNaN(value)) {\n            return {\n                valid: false,\n                message: 'Input must be valid number'\n            };\n        }\n        if (!isNaN(this.min) && value < this.min) {\n            return {\n                valid: false,\n                message: `Input must be greater than ${this.min}`\n            };\n        }\n        if (!isNaN(this.max) && value > this.max) {\n            return {\n                valid: false,\n                message: `Input must be less than ${this.max}`\n            };\n        }\n        return { valid: true };\n    }\n}\n/**\n * An abstract base class that provides the most of the functionality\n * needed by a cell editor. All of the built-in cell editors\n * for various cell types are derived from this base class. Custom cell editors\n * can be easily implemented by extending this class.\n */\nclass CellEditor {\n    /**\n     * Construct a new cell editor.\n     */\n    constructor() {\n        /**\n         * A signal emitted when input changes.\n         */\n        this.inputChanged = new Signal(this);\n        /**\n         * Notification popup used to show validation error messages.\n         */\n        this.validityNotification = null;\n        /**\n         * Whether the cell editor is disposed.\n         */\n        this._disposed = false;\n        /**\n         * Whether the value input is valid.\n         */\n        this._validInput = true;\n        /**\n         * Grid wheel event handler.\n         */\n        this._gridWheelEventHandler = null;\n        this.inputChanged.connect(() => {\n            this.validate();\n        });\n    }\n    /**\n     * Whether the cell editor is disposed.\n     */\n    get isDisposed() {\n        return this._disposed;\n    }\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    dispose() {\n        if (this._disposed) {\n            return;\n        }\n        if (this._gridWheelEventHandler) {\n            this.cell.grid.node.removeEventListener('wheel', this._gridWheelEventHandler);\n            this._gridWheelEventHandler = null;\n        }\n        this._closeValidityNotification();\n        this._disposed = true;\n        this.cell.grid.node.removeChild(this.viewportOccluder);\n    }\n    /**\n     * Start editing the cell.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param options - The cell editing options.\n     */\n    edit(cell, options) {\n        this.cell = cell;\n        this.onCommit = options && options.onCommit;\n        this.onCancel = options && options.onCancel;\n        this.validator =\n            options && options.validator\n                ? options.validator\n                : this.createValidatorBasedOnType();\n        this._gridWheelEventHandler = () => {\n            this._closeValidityNotification();\n            this.updatePosition();\n        };\n        cell.grid.node.addEventListener('wheel', this._gridWheelEventHandler);\n        this._addContainer();\n        this.updatePosition();\n        this.startEditing();\n    }\n    /**\n     * Cancel editing the cell.\n     */\n    cancel() {\n        if (this._disposed) {\n            return;\n        }\n        this.dispose();\n        if (this.onCancel) {\n            this.onCancel();\n        }\n    }\n    /**\n     * Whether the value input is valid.\n     */\n    get validInput() {\n        return this._validInput;\n    }\n    /**\n     * Validate the cell input. Shows validation error notification when input is invalid.\n     */\n    validate() {\n        let value;\n        try {\n            value = this.getInput();\n        }\n        catch (error) {\n            console.log(`Input error: ${error.message}`);\n            this.setValidity(false, error.message || DEFAULT_INVALID_INPUT_MESSAGE);\n            return;\n        }\n        if (this.validator) {\n            const result = this.validator.validate(this.cell, value);\n            if (result.valid) {\n                this.setValidity(true);\n            }\n            else {\n                this.setValidity(false, result.message || DEFAULT_INVALID_INPUT_MESSAGE);\n            }\n        }\n        else {\n            this.setValidity(true);\n        }\n    }\n    /**\n     * Set validity flag.\n     *\n     * @param valid - Whether the input is valid.\n     *\n     * @param message - Notification message to show.\n     *\n     * If message is set to empty string (which is the default)\n     * existing notification popup is removed if any.\n     */\n    setValidity(valid, message = '') {\n        this._validInput = valid;\n        this._closeValidityNotification();\n        if (valid) {\n            this.editorContainer.classList.remove('lm-mod-invalid');\n        }\n        else {\n            this.editorContainer.classList.add('lm-mod-invalid');\n            // show a notification popup\n            if (message !== '') {\n                this.validityNotification = new CellEditor.Notification({\n                    target: this.editorContainer,\n                    message: message,\n                    placement: 'bottom',\n                    timeout: 5000\n                });\n                this.validityNotification.show();\n            }\n        }\n    }\n    /**\n     * Create and return a cell input validator based on configuration of the\n     * cell being edited. If no suitable validator can be found, it returns undefined.\n     */\n    createValidatorBasedOnType() {\n        const cell = this.cell;\n        const metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        switch (metadata && metadata.type) {\n            case 'string':\n                {\n                    const validator = new TextInputValidator();\n                    if (typeof metadata.format === 'string') {\n                        const format = metadata.format;\n                        switch (format) {\n                            case 'email':\n                                validator.pattern = new RegExp('^([a-z0-9_.-]+)@([da-z.-]+).([a-z.]{2,6})$');\n                                break;\n                            case 'uuid':\n                                validator.pattern = new RegExp('[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}');\n                                break;\n                        }\n                    }\n                    if (metadata.constraint) {\n                        if (metadata.constraint.minLength !== undefined) {\n                            validator.minLength = metadata.constraint.minLength;\n                        }\n                        if (metadata.constraint.maxLength !== undefined) {\n                            validator.maxLength = metadata.constraint.maxLength;\n                        }\n                        if (typeof metadata.constraint.pattern === 'string') {\n                            validator.pattern = new RegExp(metadata.constraint.pattern);\n                        }\n                    }\n                    return validator;\n                }\n            case 'number':\n                {\n                    const validator = new NumberInputValidator();\n                    if (metadata.constraint) {\n                        if (metadata.constraint.minimum !== undefined) {\n                            validator.min = metadata.constraint.minimum;\n                        }\n                        if (metadata.constraint.maximum !== undefined) {\n                            validator.max = metadata.constraint.maximum;\n                        }\n                    }\n                    return validator;\n                }\n            case 'integer':\n                {\n                    const validator = new IntegerInputValidator();\n                    if (metadata.constraint) {\n                        if (metadata.constraint.minimum !== undefined) {\n                            validator.min = metadata.constraint.minimum;\n                        }\n                        if (metadata.constraint.maximum !== undefined) {\n                            validator.max = metadata.constraint.maximum;\n                        }\n                    }\n                    return validator;\n                }\n        }\n        return undefined;\n    }\n    /**\n     * Compute cell rectangle and return with other cell properties.\n     */\n    getCellInfo(cell) {\n        const { grid, row, column } = cell;\n        let data, columnX, rowY, width, height;\n        const cellGroup = CellGroup.getGroup(grid.dataModel, 'body', row, column);\n        if (cellGroup) {\n            columnX =\n                grid.headerWidth -\n                    grid.scrollX +\n                    grid.columnOffset('body', cellGroup.c1);\n            rowY =\n                grid.headerHeight - grid.scrollY + grid.rowOffset('body', cellGroup.r1);\n            width = 0;\n            height = 0;\n            for (let r = cellGroup.r1; r <= cellGroup.r2; r++) {\n                height += grid.rowSize('body', r);\n            }\n            for (let c = cellGroup.c1; c <= cellGroup.c2; c++) {\n                width += grid.columnSize('body', c);\n            }\n            data = grid.dataModel.data('body', cellGroup.r1, cellGroup.c1);\n        }\n        else {\n            columnX =\n                grid.headerWidth - grid.scrollX + grid.columnOffset('body', column);\n            rowY = grid.headerHeight - grid.scrollY + grid.rowOffset('body', row);\n            width = grid.columnSize('body', column);\n            height = grid.rowSize('body', row);\n            data = grid.dataModel.data('body', row, column);\n        }\n        return {\n            grid: grid,\n            row: row,\n            column: column,\n            data: data,\n            x: columnX,\n            y: rowY,\n            width: width,\n            height: height\n        };\n    }\n    /**\n     * Reposition cell editor by moving viewport occluder and cell editor container.\n     */\n    updatePosition() {\n        const grid = this.cell.grid;\n        const cellInfo = this.getCellInfo(this.cell);\n        const headerHeight = grid.headerHeight;\n        const headerWidth = grid.headerWidth;\n        this.viewportOccluder.style.top = headerHeight + 'px';\n        this.viewportOccluder.style.left = headerWidth + 'px';\n        this.viewportOccluder.style.width = grid.viewportWidth - headerWidth + 'px';\n        this.viewportOccluder.style.height =\n            grid.viewportHeight - headerHeight + 'px';\n        this.viewportOccluder.style.position = 'absolute';\n        this.editorContainer.style.left = cellInfo.x - 1 - headerWidth + 'px';\n        this.editorContainer.style.top = cellInfo.y - 1 - headerHeight + 'px';\n        this.editorContainer.style.width = cellInfo.width + 1 + 'px';\n        this.editorContainer.style.height = cellInfo.height + 1 + 'px';\n        this.editorContainer.style.visibility = 'visible';\n        this.editorContainer.style.position = 'absolute';\n    }\n    /**\n     * Commit the edited value.\n     *\n     * @param cursorMovement - Cursor move direction based on keys pressed to end the edit.\n     *\n     * @returns true on valid input, false otherwise.\n     */\n    commit(cursorMovement = 'none') {\n        this.validate();\n        if (!this._validInput) {\n            return false;\n        }\n        let value;\n        try {\n            value = this.getInput();\n        }\n        catch (error) {\n            console.log(`Input error: ${error.message}`);\n            return false;\n        }\n        this.dispose();\n        if (this.onCommit) {\n            this.onCommit({\n                cell: this.cell,\n                value: value,\n                cursorMovement: cursorMovement\n            });\n        }\n        return true;\n    }\n    /**\n     * Create container elements needed to prevent editor widget overflow\n     * beyond viewport and to position cell editor widget.\n     */\n    _addContainer() {\n        this.viewportOccluder = document.createElement('div');\n        this.viewportOccluder.className = 'lm-DataGrid-cellEditorOccluder';\n        this.cell.grid.node.appendChild(this.viewportOccluder);\n        this.editorContainer = document.createElement('div');\n        this.editorContainer.className = 'lm-DataGrid-cellEditorContainer';\n        this.viewportOccluder.appendChild(this.editorContainer);\n        // update mouse event pass-through state based on input validity\n        this.editorContainer.addEventListener('mouseleave', (event) => {\n            this.viewportOccluder.style.pointerEvents = this._validInput\n                ? 'none'\n                : 'auto';\n        });\n        this.editorContainer.addEventListener('mouseenter', (event) => {\n            this.viewportOccluder.style.pointerEvents = 'none';\n        });\n    }\n    /**\n     * Remove validity notification popup.\n     */\n    _closeValidityNotification() {\n        if (this.validityNotification) {\n            this.validityNotification.close();\n            this.validityNotification = null;\n        }\n    }\n}\n/**\n * Abstract base class with shared functionality\n * for cell editors which use HTML Input widget as editor.\n */\nclass InputCellEditor extends CellEditor {\n    /**\n     * Handle the DOM events for the editor.\n     *\n     * @param event - The DOM event sent to the editor.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'keydown':\n                this._onKeyDown(event);\n                break;\n            case 'blur':\n                this._onBlur(event);\n                break;\n            case 'input':\n                this._onInput(event);\n                break;\n        }\n    }\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._unbindEvents();\n        super.dispose();\n    }\n    /**\n     * Start editing the cell.\n     */\n    startEditing() {\n        this.createWidget();\n        const cell = this.cell;\n        const cellInfo = this.getCellInfo(cell);\n        this.input.value = this.deserialize(cellInfo.data);\n        this.editorContainer.appendChild(this.input);\n        this.input.focus();\n        this.input.select();\n        this.bindEvents();\n    }\n    deserialize(value) {\n        if (value === null || value === undefined) {\n            return '';\n        }\n        return value.toString();\n    }\n    createWidget() {\n        const input = document.createElement('input');\n        input.classList.add('lm-DataGrid-cellEditorWidget');\n        input.classList.add('lm-DataGrid-cellEditorInput');\n        input.spellcheck = false;\n        input.type = this.inputType;\n        this.input = input;\n    }\n    bindEvents() {\n        this.input.addEventListener('keydown', this);\n        this.input.addEventListener('blur', this);\n        this.input.addEventListener('input', this);\n    }\n    _unbindEvents() {\n        this.input.removeEventListener('keydown', this);\n        this.input.removeEventListener('blur', this);\n        this.input.removeEventListener('input', this);\n    }\n    _onKeyDown(event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    }\n    _onBlur(event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.input.focus();\n        }\n    }\n    _onInput(event) {\n        this.inputChanged.emit(void 0);\n    }\n}\n/**\n * Cell editor for text cells.\n */\nclass TextCellEditor extends InputCellEditor {\n    constructor() {\n        super(...arguments);\n        this.inputType = 'text';\n    }\n    /**\n     * Return the current text input entered.\n     */\n    getInput() {\n        return this.input.value;\n    }\n}\n/**\n * Cell editor for real number cells.\n */\nclass NumberCellEditor extends InputCellEditor {\n    constructor() {\n        super(...arguments);\n        this.inputType = 'number';\n    }\n    /**\n     * Start editing the cell.\n     */\n    startEditing() {\n        super.startEditing();\n        this.input.step = 'any';\n        const cell = this.cell;\n        const metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        const constraint = metadata.constraint;\n        if (constraint) {\n            if (constraint.minimum) {\n                this.input.min = constraint.minimum;\n            }\n            if (constraint.maximum) {\n                this.input.max = constraint.maximum;\n            }\n        }\n    }\n    /**\n     * Return the current number input entered. This method throws exception\n     * if input is invalid.\n     */\n    getInput() {\n        let value = this.input.value;\n        if (value.trim() === '') {\n            return null;\n        }\n        const floatValue = parseFloat(value);\n        if (isNaN(floatValue)) {\n            throw new Error('Invalid input');\n        }\n        return floatValue;\n    }\n}\n/**\n * Cell editor for integer cells.\n */\nclass IntegerCellEditor extends InputCellEditor {\n    constructor() {\n        super(...arguments);\n        this.inputType = 'number';\n    }\n    /**\n     * Start editing the cell.\n     */\n    startEditing() {\n        super.startEditing();\n        this.input.step = '1';\n        const cell = this.cell;\n        const metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        const constraint = metadata.constraint;\n        if (constraint) {\n            if (constraint.minimum) {\n                this.input.min = constraint.minimum;\n            }\n            if (constraint.maximum) {\n                this.input.max = constraint.maximum;\n            }\n        }\n    }\n    /**\n     * Return the current integer input entered. This method throws exception\n     * if input is invalid.\n     */\n    getInput() {\n        let value = this.input.value;\n        if (value.trim() === '') {\n            return null;\n        }\n        let intValue = parseInt(value);\n        if (isNaN(intValue)) {\n            throw new Error('Invalid input');\n        }\n        return intValue;\n    }\n}\n/**\n * Cell editor for date cells.\n */\nclass DateCellEditor extends CellEditor {\n    /**\n     * Handle the DOM events for the editor.\n     *\n     * @param event - The DOM event sent to the editor.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'keydown':\n                this._onKeyDown(event);\n                break;\n            case 'blur':\n                this._onBlur(event);\n                break;\n        }\n    }\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._unbindEvents();\n        super.dispose();\n    }\n    /**\n     * Start editing the cell.\n     */\n    startEditing() {\n        this._createWidget();\n        const cell = this.cell;\n        const cellInfo = this.getCellInfo(cell);\n        this._input.value = this._deserialize(cellInfo.data);\n        this.editorContainer.appendChild(this._input);\n        this._input.focus();\n        this._bindEvents();\n    }\n    /**\n     * Return the current date input entered.\n     */\n    getInput() {\n        return this._input.value;\n    }\n    _deserialize(value) {\n        if (value === null || value === undefined) {\n            return '';\n        }\n        return value.toString();\n    }\n    _createWidget() {\n        const input = document.createElement('input');\n        input.type = 'date';\n        input.pattern = 'd{4}-d{2}-d{2}';\n        input.classList.add('lm-DataGrid-cellEditorWidget');\n        input.classList.add('lm-DataGrid-cellEditorInput');\n        this._input = input;\n    }\n    _bindEvents() {\n        this._input.addEventListener('keydown', this);\n        this._input.addEventListener('blur', this);\n    }\n    _unbindEvents() {\n        this._input.removeEventListener('keydown', this);\n        this._input.removeEventListener('blur', this);\n    }\n    _onKeyDown(event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    }\n    _onBlur(event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this._input.focus();\n        }\n    }\n}\n/**\n * Cell editor for boolean cells.\n */\nclass BooleanCellEditor extends CellEditor {\n    /**\n     * Handle the DOM events for the editor.\n     *\n     * @param event - The DOM event sent to the editor.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'keydown':\n                this._onKeyDown(event);\n                break;\n            case 'mousedown':\n                // fix focus loss problem in Safari and Firefox\n                this._input.focus();\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'blur':\n                this._onBlur(event);\n                break;\n        }\n    }\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._unbindEvents();\n        super.dispose();\n    }\n    /**\n     * Start editing the cell.\n     */\n    startEditing() {\n        this._createWidget();\n        const cell = this.cell;\n        const cellInfo = this.getCellInfo(cell);\n        this._input.checked = this._deserialize(cellInfo.data);\n        this.editorContainer.appendChild(this._input);\n        this._input.focus();\n        this._bindEvents();\n    }\n    /**\n     * Return the current boolean input entered.\n     */\n    getInput() {\n        return this._input.checked;\n    }\n    _deserialize(value) {\n        if (value === null || value === undefined) {\n            return false;\n        }\n        return value == true;\n    }\n    _createWidget() {\n        const input = document.createElement('input');\n        input.classList.add('lm-DataGrid-cellEditorWidget');\n        input.classList.add('lm-DataGrid-cellEditorCheckbox');\n        input.type = 'checkbox';\n        input.spellcheck = false;\n        this._input = input;\n    }\n    _bindEvents() {\n        this._input.addEventListener('keydown', this);\n        this._input.addEventListener('mousedown', this);\n        this._input.addEventListener('blur', this);\n    }\n    _unbindEvents() {\n        this._input.removeEventListener('keydown', this);\n        this._input.removeEventListener('mousedown', this);\n        this._input.removeEventListener('blur', this);\n    }\n    _onKeyDown(event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    }\n    _onBlur(event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this._input.focus();\n        }\n    }\n}\n/**\n * Cell editor for option cells.\n *\n * It supports multiple option selection. If cell metadata contains\n * type attribute 'array', then it behaves as a multi select.\n * In that case cell data is expected to be list of string values.\n */\nclass OptionCellEditor extends CellEditor {\n    constructor() {\n        super(...arguments);\n        this._isMultiSelect = false;\n    }\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        if (this._isMultiSelect) {\n            document.body.removeChild(this._select);\n        }\n    }\n    /**\n     * Start editing the cell.\n     */\n    startEditing() {\n        const cell = this.cell;\n        const cellInfo = this.getCellInfo(cell);\n        const metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        this._isMultiSelect = metadata.type === 'array';\n        this._createWidget();\n        if (this._isMultiSelect) {\n            this._select.multiple = true;\n            const values = this._deserialize(cellInfo.data);\n            for (let i = 0; i < this._select.options.length; ++i) {\n                const option = this._select.options.item(i);\n                option.selected = values.indexOf(option.value) !== -1;\n            }\n            document.body.appendChild(this._select);\n        }\n        else {\n            this._select.value = this._deserialize(cellInfo.data);\n            this.editorContainer.appendChild(this._select);\n        }\n        this._select.focus();\n        this._bindEvents();\n        this.updatePosition();\n    }\n    /**\n     * Return the current option input.\n     */\n    getInput() {\n        if (this._isMultiSelect) {\n            const input = [];\n            for (let i = 0; i < this._select.selectedOptions.length; ++i) {\n                input.push(this._select.selectedOptions.item(i).value);\n            }\n            return input;\n        }\n        else {\n            return this._select.value;\n        }\n    }\n    /**\n     * Reposition cell editor.\n     */\n    updatePosition() {\n        super.updatePosition();\n        if (!this._isMultiSelect) {\n            return;\n        }\n        const cellInfo = this.getCellInfo(this.cell);\n        this._select.style.position = 'absolute';\n        const editorContainerRect = this.editorContainer.getBoundingClientRect();\n        this._select.style.left = editorContainerRect.left + 'px';\n        this._select.style.top = editorContainerRect.top + cellInfo.height + 'px';\n        this._select.style.width = editorContainerRect.width + 'px';\n        this._select.style.maxHeight = '60px';\n        this.editorContainer.style.visibility = 'hidden';\n    }\n    _deserialize(value) {\n        if (value === null || value === undefined) {\n            return '';\n        }\n        if (this._isMultiSelect) {\n            const values = [];\n            if (Array.isArray(value)) {\n                for (let item of value) {\n                    values.push(item.toString());\n                }\n            }\n            return values;\n        }\n        else {\n            return value.toString();\n        }\n    }\n    _createWidget() {\n        const cell = this.cell;\n        const metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        const items = metadata.constraint.enum;\n        const select = document.createElement('select');\n        select.classList.add('lm-DataGrid-cellEditorWidget');\n        for (let item of items) {\n            const option = document.createElement('option');\n            option.value = item;\n            option.text = item;\n            select.appendChild(option);\n        }\n        this._select = select;\n    }\n    _bindEvents() {\n        this._select.addEventListener('keydown', this._onKeyDown.bind(this));\n        this._select.addEventListener('blur', this._onBlur.bind(this));\n    }\n    _onKeyDown(event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    }\n    _onBlur(event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this._select.focus();\n        }\n    }\n}\n/**\n * Cell editor for option cells whose value can be any value\n * from set of pre-defined options or values that can be input by user.\n */\nclass DynamicOptionCellEditor extends CellEditor {\n    /**\n     * Handle the DOM events for the editor.\n     *\n     * @param event - The DOM event sent to the editor.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'keydown':\n                this._onKeyDown(event);\n                break;\n            case 'blur':\n                this._onBlur(event);\n                break;\n        }\n    }\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._unbindEvents();\n        super.dispose();\n    }\n    /**\n     * Start editing the cell.\n     */\n    startEditing() {\n        this._createWidget();\n        const cell = this.cell;\n        const cellInfo = this.getCellInfo(cell);\n        this._input.value = this._deserialize(cellInfo.data);\n        this.editorContainer.appendChild(this._input);\n        this._input.focus();\n        this._input.select();\n        this._bindEvents();\n    }\n    /**\n     * Return the current option input.\n     */\n    getInput() {\n        return this._input.value;\n    }\n    _deserialize(value) {\n        if (value === null || value === undefined) {\n            return '';\n        }\n        return value.toString();\n    }\n    _createWidget() {\n        const cell = this.cell;\n        const grid = cell.grid;\n        const dataModel = grid.dataModel;\n        const rowCount = dataModel.rowCount('body');\n        const listId = 'cell-editor-list';\n        const list = document.createElement('datalist');\n        list.id = listId;\n        const input = document.createElement('input');\n        input.classList.add('lm-DataGrid-cellEditorWidget');\n        input.classList.add('lm-DataGrid-cellEditorInput');\n        const valueSet = new Set();\n        for (let r = 0; r < rowCount; ++r) {\n            const data = dataModel.data('body', r, cell.column);\n            if (data) {\n                valueSet.add(data);\n            }\n        }\n        valueSet.forEach((value) => {\n            const option = document.createElement('option');\n            option.value = value;\n            option.text = value;\n            list.appendChild(option);\n        });\n        this.editorContainer.appendChild(list);\n        input.setAttribute('list', listId);\n        this._input = input;\n    }\n    _bindEvents() {\n        this._input.addEventListener('keydown', this);\n        this._input.addEventListener('blur', this);\n    }\n    _unbindEvents() {\n        this._input.removeEventListener('keydown', this);\n        this._input.removeEventListener('blur', this);\n    }\n    _onKeyDown(event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    }\n    _onBlur(event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this._input.focus();\n        }\n    }\n}\n/**\n * The namespace for the `CellEditor` class statics.\n */\n(function (CellEditor) {\n    /**\n     * A widget which implements a notification popup.\n     */\n    class Notification extends Widget {\n        /**\n         * Construct a new notification.\n         *\n         * @param options - The options for initializing the notification.\n         */\n        constructor(options) {\n            super({ node: Notification.createNode() });\n            this._message = '';\n            this.addClass('lm-DataGrid-notification');\n            this.setFlag(Widget.Flag.DisallowLayout);\n            this._target = options.target;\n            this._message = options.message || '';\n            this._placement = options.placement || 'bottom';\n            Widget.attach(this, document.body);\n            if (options.timeout && options.timeout > 0) {\n                setTimeout(() => {\n                    this.close();\n                }, options.timeout);\n            }\n        }\n        /**\n         * Handle the DOM events for the notification.\n         *\n         * @param event - The DOM event sent to the notification.\n         *\n         * #### Notes\n         * This method implements the DOM `EventListener` interface and is\n         * called in response to events on the notification's DOM node.\n         *\n         * This should not be called directly by user code.\n         */\n        handleEvent(event) {\n            switch (event.type) {\n                case 'mousedown':\n                    this._evtMouseDown(event);\n                    break;\n                case 'contextmenu':\n                    event.preventDefault();\n                    event.stopPropagation();\n                    break;\n            }\n        }\n        /**\n         * Get the placement of the notification.\n         */\n        get placement() {\n            return this._placement;\n        }\n        /**\n         * Set the placement of the notification.\n         */\n        set placement(value) {\n            // Do nothing if the placement does not change.\n            if (this._placement === value) {\n                return;\n            }\n            // Update the internal placement.\n            this._placement = value;\n            // Schedule an update for notification.\n            this.update();\n        }\n        /**\n         * Get the current value of the message.\n         */\n        get message() {\n            return this._message;\n        }\n        /**\n         * Set the current value of the message.\n         *\n         */\n        set message(value) {\n            // Do nothing if the value does not change.\n            if (this._message === value) {\n                return;\n            }\n            // Update the internal value.\n            this._message = value;\n            // Schedule an update for notification.\n            this.update();\n        }\n        /**\n         * Get the node presenting the message.\n         */\n        get messageNode() {\n            return this.node.getElementsByClassName('lm-DataGrid-notificationMessage')[0];\n        }\n        /**\n         * A method invoked on a 'before-attach' message.\n         */\n        onBeforeAttach(msg) {\n            this.node.addEventListener('mousedown', this);\n            this.update();\n        }\n        /**\n         * A method invoked on an 'after-detach' message.\n         */\n        onAfterDetach(msg) {\n            this.node.removeEventListener('mousedown', this);\n        }\n        /**\n         * A method invoked on an 'update-request' message.\n         */\n        onUpdateRequest(msg) {\n            const targetRect = this._target.getBoundingClientRect();\n            const style = this.node.style;\n            switch (this._placement) {\n                case 'bottom':\n                    style.left = targetRect.left + 'px';\n                    style.top = targetRect.bottom + 'px';\n                    break;\n                case 'top':\n                    style.left = targetRect.left + 'px';\n                    style.height = targetRect.top + 'px';\n                    style.top = '0';\n                    style.alignItems = 'flex-end';\n                    style.justifyContent = 'flex-end';\n                    break;\n                case 'left':\n                    style.left = '0';\n                    style.width = targetRect.left + 'px';\n                    style.top = targetRect.top + 'px';\n                    style.alignItems = 'flex-end';\n                    style.justifyContent = 'flex-end';\n                    break;\n                case 'right':\n                    style.left = targetRect.right + 'px';\n                    style.top = targetRect.top + 'px';\n                    break;\n            }\n            this.messageNode.innerHTML = this._message;\n        }\n        /**\n         * Handle the `'mousedown'` event for the notification.\n         */\n        _evtMouseDown(event) {\n            // Do nothing if it's not a left mouse press.\n            if (event.button !== 0) {\n                return;\n            }\n            event.preventDefault();\n            event.stopPropagation();\n            this.close();\n        }\n    }\n    CellEditor.Notification = Notification;\n    /**\n     * The namespace for the `Notification` class statics.\n     */\n    (function (Notification) {\n        /**\n         * Create the DOM node for notification.\n         */\n        function createNode() {\n            const node = document.createElement('div');\n            const container = document.createElement('div');\n            container.className = 'lm-DataGrid-notificationContainer';\n            const message = document.createElement('span');\n            message.className = 'lm-DataGrid-notificationMessage';\n            container.appendChild(message);\n            node.appendChild(container);\n            return node;\n        }\n        Notification.createNode = createNode;\n    })(Notification = CellEditor.Notification || (CellEditor.Notification = {}));\n})(CellEditor || (CellEditor = {}));\n\n/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * Resolve a config option for a cell editor.\n *\n * @param option - The config option to resolve.\n *\n * @param config - The cell config object.\n *\n * @returns The resolved value for the option.\n */\nfunction resolveOption(option, config) {\n    return typeof option === 'function'\n        ? option(config)\n        : option;\n}\n/**\n * An object which manages cell editing. It stores editor overrides,\n * decides which editor to use for a cell, makes sure there is only one editor active.\n */\nclass CellEditorController {\n    constructor() {\n        // active cell editor\n        this._editor = null;\n        // active cell being edited\n        this._cell = null;\n        // cell editor overrides based on cell data type identifier\n        this._typeBasedOverrides = new Map();\n        // cell editor overrides based on partial metadata match\n        this._metadataBasedOverrides = new Map();\n    }\n    /**\n     * Override cell editor for the cells matching the identifier.\n     *\n     * @param identifier - Cell identifier to use when matching cells.\n     * if identifier is a CellDataType, then cell matching is done using data type of the cell,\n     * if identifier is a Metadata, then partial match of the cell metadata with identifier is used for match,\n     * if identifier is 'default' then override is used as default editor when no other editor is found suitable\n     *\n     * @param editor - The cell editor to use or resolver to use to get an editor for matching cells.\n     */\n    setEditor(identifier, editor) {\n        if (typeof identifier === 'string') {\n            this._typeBasedOverrides.set(identifier, editor);\n        }\n        else {\n            const key = this._metadataIdentifierToKey(identifier);\n            this._metadataBasedOverrides.set(key, [identifier, editor]);\n        }\n    }\n    /**\n     * Start editing a cell.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param options - The cell editing options.\n     */\n    edit(cell, options) {\n        const grid = cell.grid;\n        if (!grid.editable) {\n            console.error('Grid cannot be edited!');\n            return false;\n        }\n        this.cancel();\n        this._cell = cell;\n        options = options || {};\n        options.onCommit = options.onCommit || this._onCommit.bind(this);\n        options.onCancel = options.onCancel || this._onCancel.bind(this);\n        // if an editor is passed in with options, then use it for editing\n        if (options.editor) {\n            this._editor = options.editor;\n            options.editor.edit(cell, options);\n            return true;\n        }\n        // choose an editor based on overrides / cell data type\n        const editor = this._getEditor(cell);\n        if (editor) {\n            this._editor = editor;\n            editor.edit(cell, options);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Cancel editing.\n     */\n    cancel() {\n        if (this._editor) {\n            this._editor.cancel();\n            this._editor = null;\n        }\n        this._cell = null;\n    }\n    _onCommit(response) {\n        const cell = this._cell;\n        if (!cell) {\n            return;\n        }\n        const grid = cell.grid;\n        const dataModel = grid.dataModel;\n        let row = cell.row;\n        let column = cell.column;\n        const cellGroup = CellGroup.getGroup(grid.dataModel, 'body', row, column);\n        if (cellGroup) {\n            row = cellGroup.r1;\n            column = cellGroup.c1;\n        }\n        dataModel.setData('body', row, column, response.value);\n        grid.viewport.node.focus();\n        if (response.cursorMovement !== 'none') {\n            grid.moveCursor(response.cursorMovement);\n            grid.scrollToCursor();\n        }\n    }\n    _onCancel() {\n        if (!this._cell) {\n            return;\n        }\n        this._cell.grid.viewport.node.focus();\n    }\n    _getDataTypeKey(cell) {\n        const metadata = cell.grid.dataModel\n            ? cell.grid.dataModel.metadata('body', cell.row, cell.column)\n            : null;\n        if (!metadata) {\n            return 'default';\n        }\n        let key = '';\n        if (metadata) {\n            key = metadata.type;\n        }\n        if (metadata.constraint && metadata.constraint.enum) {\n            if (metadata.constraint.enum === 'dynamic') {\n                key += ':dynamic-option';\n            }\n            else {\n                key += ':option';\n            }\n        }\n        return key;\n    }\n    _objectToKey(object) {\n        let str = '';\n        for (let key in object) {\n            const value = object[key];\n            if (typeof value === 'object') {\n                str += `${key}:${this._objectToKey(value)}`;\n            }\n            else {\n                str += `[${key}:${value}]`;\n            }\n        }\n        return str;\n    }\n    _metadataIdentifierToKey(metadata) {\n        return this._objectToKey(metadata);\n    }\n    _metadataMatchesIdentifier(metadata, identifier) {\n        for (let key in identifier) {\n            if (!metadata.hasOwnProperty(key)) {\n                return false;\n            }\n            const identifierValue = identifier[key];\n            const metadataValue = metadata[key];\n            if (typeof identifierValue === 'object') {\n                if (!this._metadataMatchesIdentifier(metadataValue, identifierValue)) {\n                    return false;\n                }\n            }\n            else if (metadataValue !== identifierValue) {\n                return false;\n            }\n        }\n        return true;\n    }\n    _getMetadataBasedEditor(cell) {\n        let editorMatched;\n        const metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        if (metadata) {\n            this._metadataBasedOverrides.forEach(value => {\n                if (!editorMatched) {\n                    let [identifier, editor] = value;\n                    if (this._metadataMatchesIdentifier(metadata, identifier)) {\n                        editorMatched = resolveOption(editor, cell);\n                    }\n                }\n            });\n        }\n        return editorMatched;\n    }\n    /**\n     * Choose the most appropriate cell editor to use based on overrides / cell data type.\n     *\n     * If no match is found in overrides or based on cell data type, and if cell has a primitive\n     * data type then TextCellEditor is used as default cell editor. If 'default' cell editor\n     * is overridden, then it is used instead of TextCellEditor for default.\n     */\n    _getEditor(cell) {\n        const dtKey = this._getDataTypeKey(cell);\n        // find an editor based on data type based override\n        if (this._typeBasedOverrides.has(dtKey)) {\n            const editor = this._typeBasedOverrides.get(dtKey);\n            return resolveOption(editor, cell);\n        } // find an editor based on metadata match based override\n        else if (this._metadataBasedOverrides.size > 0) {\n            const editor = this._getMetadataBasedEditor(cell);\n            if (editor) {\n                return editor;\n            }\n        }\n        // choose an editor based on data type\n        switch (dtKey) {\n            case 'string':\n                return new TextCellEditor();\n            case 'number':\n                return new NumberCellEditor();\n            case 'integer':\n                return new IntegerCellEditor();\n            case 'boolean':\n                return new BooleanCellEditor();\n            case 'date':\n                return new DateCellEditor();\n            case 'string:option':\n            case 'number:option':\n            case 'integer:option':\n            case 'date:option':\n            case 'array:option':\n                return new OptionCellEditor();\n            case 'string:dynamic-option':\n            case 'number:dynamic-option':\n            case 'integer:dynamic-option':\n            case 'date:dynamic-option':\n                return new DynamicOptionCellEditor();\n        }\n        // if an override exists for 'default', then use it\n        if (this._typeBasedOverrides.has('default')) {\n            const editor = this._typeBasedOverrides.get('default');\n            return resolveOption(editor, cell);\n        }\n        // if cell has a primitive data type then use TextCellEditor\n        const data = cell.grid.dataModel.data('body', cell.row, cell.column);\n        if (!data || typeof data !== 'object') {\n            return new TextCellEditor();\n        }\n        // no suitable editor found for the cell\n        return undefined;\n    }\n}\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * An object which provides the data for a data grid.\n *\n * #### Notes\n * If the predefined data models are insufficient for a particular use\n * case, a custom model can be defined which derives from this class.\n */\nclass DataModel {\n    constructor() {\n        this._changed = new Signal(this);\n    }\n    /**\n     * A signal emitted when the data model has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Get the count of merged cell groups pertaining to a given\n     * cell region.\n     * @param region the target cell region.\n     */\n    groupCount(region) {\n        return 0;\n    }\n    /**\n     * Get the metadata for a cell in the data model.\n     *\n     * @param region - The cell region of interest.\n     *\n     * @param row - The row index of the cell of interest.\n     *\n     * @param column - The column index of the cell of interest.\n     *\n     * @returns The metadata for the specified cell.\n     *\n     * #### Notes\n     * The returned metadata should be treated as immutable.\n     *\n     * This method is called often, and so should be efficient.\n     *\n     * The default implementation returns `{}`.\n     */\n    metadata(region, row, column) {\n        return DataModel.emptyMetadata;\n    }\n    /**\n     * Get the merged cell group corresponding to a region and index number.\n     * @param region the cell region of cell group.\n     * @param groupIndex the group index of the cell group.\n     * @returns a cell group.\n     */\n    group(region, groupIndex) {\n        return null;\n    }\n    /**\n     * Emit the `changed` signal for the data model.\n     *\n     * #### Notes\n     * Subclasses should call this method whenever the data model has\n     * changed so that attached data grids can update themselves.\n     */\n    emitChanged(args) {\n        this._changed.emit(args);\n    }\n}\n/**\n * An object which provides the mutable data for a data grid.\n *\n * #### Notes\n * This object is an extension to `DataModel` and it only adds ability to\n * change data for cells.\n */\nclass MutableDataModel extends DataModel {\n}\n/**\n * The namespace for the `DataModel` class statics.\n */\n(function (DataModel) {\n    /**\n     * A singleton empty metadata object.\n     */\n    DataModel.emptyMetadata = Object.freeze({});\n})(DataModel || (DataModel = {}));\n\n/**\n * A thin caching wrapper around a 2D canvas rendering context.\n *\n * #### Notes\n * This class is mostly a transparent wrapper around a canvas rendering\n * context which improves performance when writing context state.\n *\n * For best performance, avoid reading state from the `gc`. Writes are\n * cached based on the previously written value.\n *\n * Unless otherwise specified, the API and semantics of this class are\n * identical to the builtin 2D canvas rendering context:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\n *\n * The wrapped canvas context should not be manipulated externally\n * until the wrapping `GraphicsContext` object is disposed.\n */\nclass GraphicsContext {\n    /**\n     * Create a new graphics context object.\n     *\n     * @param context - The 2D canvas rendering context to wrap.\n     */\n    constructor(context) {\n        this._disposed = false;\n        this._context = context;\n        this._state = Private$3.State.create(context);\n    }\n    dispose() {\n        // Bail if the gc is already disposed.\n        if (this._disposed) {\n            return;\n        }\n        // Mark the gc as disposed.\n        this._disposed = true;\n        // Pop any unrestored saves.\n        while (this._state.next) {\n            this._state = this._state.next;\n            this._context.restore();\n        }\n    }\n    get isDisposed() {\n        return this._disposed;\n    }\n    get fillStyle() {\n        return this._context.fillStyle;\n    }\n    set fillStyle(value) {\n        if (this._state.fillStyle !== value) {\n            this._state.fillStyle = value;\n            this._context.fillStyle = value;\n        }\n    }\n    get strokeStyle() {\n        return this._context.strokeStyle;\n    }\n    set strokeStyle(value) {\n        if (this._state.strokeStyle !== value) {\n            this._state.strokeStyle = value;\n            this._context.strokeStyle = value;\n        }\n    }\n    get font() {\n        return this._context.font;\n    }\n    set font(value) {\n        if (this._state.font !== value) {\n            this._state.font = value;\n            this._context.font = value;\n        }\n    }\n    get textAlign() {\n        return this._context.textAlign;\n    }\n    set textAlign(value) {\n        if (this._state.textAlign !== value) {\n            this._state.textAlign = value;\n            this._context.textAlign = value;\n        }\n    }\n    get textBaseline() {\n        return this._context.textBaseline;\n    }\n    set textBaseline(value) {\n        if (this._state.textBaseline !== value) {\n            this._state.textBaseline = value;\n            this._context.textBaseline = value;\n        }\n    }\n    get lineCap() {\n        return this._context.lineCap;\n    }\n    set lineCap(value) {\n        if (this._state.lineCap !== value) {\n            this._state.lineCap = value;\n            this._context.lineCap = value;\n        }\n    }\n    get lineDashOffset() {\n        return this._context.lineDashOffset;\n    }\n    set lineDashOffset(value) {\n        if (this._state.lineDashOffset !== value) {\n            this._state.lineDashOffset = value;\n            this._context.lineDashOffset = value;\n        }\n    }\n    get lineJoin() {\n        return this._context.lineJoin;\n    }\n    set lineJoin(value) {\n        if (this._state.lineJoin !== value) {\n            this._state.lineJoin = value;\n            this._context.lineJoin = value;\n        }\n    }\n    get lineWidth() {\n        return this._context.lineWidth;\n    }\n    set lineWidth(value) {\n        if (this._state.lineWidth !== value) {\n            this._state.lineWidth = value;\n            this._context.lineWidth = value;\n        }\n    }\n    get miterLimit() {\n        return this._context.miterLimit;\n    }\n    set miterLimit(value) {\n        if (this._state.miterLimit !== value) {\n            this._state.miterLimit = value;\n            this._context.miterLimit = value;\n        }\n    }\n    get shadowBlur() {\n        return this._context.shadowBlur;\n    }\n    set shadowBlur(value) {\n        if (this._state.shadowBlur !== value) {\n            this._state.shadowBlur = value;\n            this._context.shadowBlur = value;\n        }\n    }\n    get shadowColor() {\n        return this._context.shadowColor;\n    }\n    set shadowColor(value) {\n        if (this._state.shadowColor !== value) {\n            this._state.shadowColor = value;\n            this._context.shadowColor = value;\n        }\n    }\n    get shadowOffsetX() {\n        return this._context.shadowOffsetX;\n    }\n    set shadowOffsetX(value) {\n        if (this._state.shadowOffsetX !== value) {\n            this._state.shadowOffsetX = value;\n            this._context.shadowOffsetX = value;\n        }\n    }\n    get shadowOffsetY() {\n        return this._context.shadowOffsetY;\n    }\n    set shadowOffsetY(value) {\n        if (this._state.shadowOffsetY !== value) {\n            this._state.shadowOffsetY = value;\n            this._context.shadowOffsetY = value;\n        }\n    }\n    get imageSmoothingEnabled() {\n        return this._context.imageSmoothingEnabled;\n    }\n    set imageSmoothingEnabled(value) {\n        if (this._state.imageSmoothingEnabled !== value) {\n            this._state.imageSmoothingEnabled = value;\n            this._context.imageSmoothingEnabled = value;\n        }\n    }\n    get globalAlpha() {\n        return this._context.globalAlpha;\n    }\n    set globalAlpha(value) {\n        if (this._state.globalAlpha !== value) {\n            this._state.globalAlpha = value;\n            this._context.globalAlpha = value;\n        }\n    }\n    get globalCompositeOperation() {\n        return this._context.globalCompositeOperation;\n    }\n    set globalCompositeOperation(value) {\n        if (this._state.globalCompositeOperation !== value) {\n            this._state.globalCompositeOperation = value;\n            this._context.globalCompositeOperation = value;\n        }\n    }\n    getLineDash() {\n        return this._context.getLineDash();\n    }\n    setLineDash(segments) {\n        this._context.setLineDash(segments);\n    }\n    rotate(angle) {\n        this._context.rotate(angle);\n    }\n    scale(x, y) {\n        this._context.scale(x, y);\n    }\n    transform(m11, m12, m21, m22, dx, dy) {\n        this._context.transform(m11, m12, m21, m22, dx, dy);\n    }\n    translate(x, y) {\n        this._context.translate(x, y);\n    }\n    setTransform(m11, m12, m21, m22, dx, dy) {\n        this._context.setTransform(m11, m12, m21, m22, dx, dy);\n    }\n    save() {\n        // Clone an push the current state to the stack.\n        this._state = Private$3.State.push(this._state);\n        // Save the wrapped context state.\n        this._context.save();\n    }\n    restore() {\n        // Bail if there is no state to restore.\n        if (!this._state.next) {\n            return;\n        }\n        // Pop the saved state from the stack.\n        this._state = Private$3.State.pop(this._state);\n        // Restore the wrapped context state.\n        this._context.restore();\n    }\n    beginPath() {\n        return this._context.beginPath();\n    }\n    closePath() {\n        this._context.closePath();\n    }\n    isPointInPath(x, y, fillRule) {\n        let result;\n        if (arguments.length === 2) {\n            result = this._context.isPointInPath(x, y);\n        }\n        else {\n            result = this._context.isPointInPath(x, y, fillRule);\n        }\n        return result;\n    }\n    arc(x, y, radius, startAngle, endAngle, anticlockwise) {\n        if (arguments.length === 5) {\n            this._context.arc(x, y, radius, startAngle, endAngle);\n        }\n        else {\n            this._context.arc(x, y, radius, startAngle, endAngle, anticlockwise);\n        }\n    }\n    arcTo(x1, y1, x2, y2, radius) {\n        this._context.arcTo(x1, y1, x2, y2, radius);\n    }\n    bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n        this._context.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n    }\n    ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {\n        if (arguments.length === 7) {\n            this._context.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle);\n        }\n        else {\n            this._context.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);\n        }\n    }\n    lineTo(x, y) {\n        this._context.lineTo(x, y);\n    }\n    moveTo(x, y) {\n        this._context.moveTo(x, y);\n    }\n    quadraticCurveTo(cpx, cpy, x, y) {\n        this._context.quadraticCurveTo(cpx, cpy, x, y);\n    }\n    rect(x, y, w, h) {\n        this._context.rect(x, y, w, h);\n    }\n    clip(fillRule) {\n        if (arguments.length === 0) {\n            this._context.clip();\n        }\n        else {\n            this._context.clip(fillRule);\n        }\n    }\n    fill(fillRule) {\n        if (arguments.length === 0) {\n            this._context.fill();\n        }\n        else {\n            this._context.fill(fillRule);\n        }\n    }\n    stroke() {\n        this._context.stroke();\n    }\n    clearRect(x, y, w, h) {\n        return this._context.clearRect(x, y, w, h);\n    }\n    fillRect(x, y, w, h) {\n        this._context.fillRect(x, y, w, h);\n    }\n    fillText(text, x, y, maxWidth) {\n        if (arguments.length === 3) {\n            this._context.fillText(text, x, y);\n        }\n        else {\n            this._context.fillText(text, x, y, maxWidth);\n        }\n    }\n    strokeRect(x, y, w, h) {\n        this._context.strokeRect(x, y, w, h);\n    }\n    strokeText(text, x, y, maxWidth) {\n        if (arguments.length === 3) {\n            this._context.strokeText(text, x, y);\n        }\n        else {\n            this._context.strokeText(text, x, y, maxWidth);\n        }\n    }\n    measureText(text) {\n        return this._context.measureText(text);\n    }\n    createLinearGradient(x0, y0, x1, y1) {\n        return this._context.createLinearGradient(x0, y0, x1, y1);\n    }\n    createRadialGradient(x0, y0, r0, x1, y1, r1) {\n        return this._context.createRadialGradient(x0, y0, r0, x1, y1, r1);\n    }\n    createPattern(image, repetition) {\n        return this._context.createPattern(image, repetition);\n    }\n    createImageData() {\n        // eslint-disable-next-line prefer-spread, prefer-rest-params\n        return this._context.createImageData.apply(this._context, arguments);\n    }\n    getImageData(sx, sy, sw, sh) {\n        return this._context.getImageData(sx, sy, sw, sh);\n    }\n    putImageData() {\n        // eslint-disable-next-line prefer-spread, prefer-rest-params\n        this._context.putImageData.apply(this._context, arguments);\n    }\n    drawImage() {\n        // eslint-disable-next-line prefer-spread, prefer-rest-params\n        this._context.drawImage.apply(this._context, arguments);\n    }\n    drawFocusIfNeeded(element) {\n        this._context.drawFocusIfNeeded(element);\n    }\n}\n/**\n * The namespace for the module implementation details.\n */\nvar Private$3;\n(function (Private) {\n    /**\n     * The index of next valid pool object.\n     */\n    let pi = -1;\n    /**\n     * A state object allocation pool.\n     */\n    const pool = [];\n    /**\n     * An object which holds the state for a gc.\n     */\n    class State {\n        /**\n         * Create a gc state object from a 2D canvas context.\n         */\n        static create(context) {\n            let state = pi < 0 ? new State() : pool[pi--];\n            state.next = null;\n            state.fillStyle = context.fillStyle;\n            state.font = context.font;\n            state.globalAlpha = context.globalAlpha;\n            state.globalCompositeOperation = context.globalCompositeOperation;\n            state.imageSmoothingEnabled = context.imageSmoothingEnabled;\n            state.lineCap = context.lineCap;\n            state.lineDashOffset = context.lineDashOffset;\n            state.lineJoin = context.lineJoin;\n            state.lineWidth = context.lineWidth;\n            state.miterLimit = context.miterLimit;\n            state.shadowBlur = context.shadowBlur;\n            state.shadowColor = context.shadowColor;\n            state.shadowOffsetX = context.shadowOffsetX;\n            state.shadowOffsetY = context.shadowOffsetY;\n            state.strokeStyle = context.strokeStyle;\n            state.textAlign = context.textAlign;\n            state.textBaseline = context.textBaseline;\n            return state;\n        }\n        /**\n         * Clone an existing gc state object and add it to the state stack.\n         */\n        static push(other) {\n            let state = pi < 0 ? new State() : pool[pi--];\n            state.next = other;\n            state.fillStyle = other.fillStyle;\n            state.font = other.font;\n            state.globalAlpha = other.globalAlpha;\n            state.globalCompositeOperation = other.globalCompositeOperation;\n            state.imageSmoothingEnabled = other.imageSmoothingEnabled;\n            state.lineCap = other.lineCap;\n            state.lineDashOffset = other.lineDashOffset;\n            state.lineJoin = other.lineJoin;\n            state.lineWidth = other.lineWidth;\n            state.miterLimit = other.miterLimit;\n            state.shadowBlur = other.shadowBlur;\n            state.shadowColor = other.shadowColor;\n            state.shadowOffsetX = other.shadowOffsetX;\n            state.shadowOffsetY = other.shadowOffsetY;\n            state.strokeStyle = other.strokeStyle;\n            state.textAlign = other.textAlign;\n            state.textBaseline = other.textBaseline;\n            return state;\n        }\n        /**\n         * Pop the next state object and return the current to the pool\n         */\n        static pop(state) {\n            state.fillStyle = '';\n            state.strokeStyle = '';\n            pool[++pi] = state;\n            return state.next;\n        }\n    }\n    Private.State = State;\n})(Private$3 || (Private$3 = {}));\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * A class which manages the mapping of cell renderers.\n */\nclass RendererMap {\n    /**\n     * Construct a new renderer map.\n     *\n     * @param values - The initial values for the map.\n     *\n     * @param fallback - The renderer of last resort.\n     */\n    constructor(values = {}, fallback) {\n        this._changed = new Signal(this);\n        this._values = { ...values };\n        this._fallback = fallback || new TextRenderer();\n    }\n    /**\n     * A signal emitted when the renderer map has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Get the cell renderer to use for the given cell config.\n     *\n     * @param config - The cell config of interest.\n     *\n     * @returns The renderer to use for the cell.\n     */\n    get(config) {\n        // Fetch the renderer from the values map.\n        let renderer = this._values[config.region];\n        // Execute a resolver function if necessary.\n        if (typeof renderer === 'function') {\n            try {\n                renderer = renderer(config);\n            }\n            catch (err) {\n                renderer = undefined;\n                console.error(err);\n            }\n        }\n        // Return the renderer or the fallback.\n        return renderer || this._fallback;\n    }\n    /**\n     * Update the renderer map with new values\n     *\n     * @param values - The updated values for the map.\n     *\n     * @param fallback - The renderer of last resort.\n     *\n     * #### Notes\n     * This method always emits the `changed` signal.\n     */\n    update(values = {}, fallback) {\n        this._values = { ...this._values, ...values };\n        this._fallback = fallback || this._fallback;\n        this._changed.emit(undefined);\n    }\n}\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * An object which manages a collection of variable sized sections.\n *\n * #### Notes\n * This class is an implementation detail. It is designed to manage\n * the variable row and column sizes for a data grid. User code will\n * not interact with this class directly.\n */\nclass SectionList {\n    /**\n     * Construct a new section list.\n     *\n     * @param options - The options for initializing the list.\n     */\n    constructor(options) {\n        this._count = 0;\n        this._length = 0;\n        this._sections = [];\n        this._minimumSize = options.minimumSize || 2;\n        this._defaultSize = Math.max(this._minimumSize, Math.floor(options.defaultSize));\n    }\n    /**\n     * The total size of all sections in the list.\n     *\n     * #### Complexity\n     * Constant.\n     */\n    get length() {\n        return this._length;\n    }\n    /**\n     * The total number of sections in the list.\n     *\n     * #### Complexity\n     * Constant.\n     */\n    get count() {\n        return this._count;\n    }\n    /**\n     * Get the minimum size of sections in the list.\n     *\n     * #### Complexity\n     * Constant.\n     */\n    get minimumSize() {\n        return this._minimumSize;\n    }\n    /**\n     * Set the minimum size of sections in the list.\n     *\n     * #### Complexity\n     * Linear on the number of resized sections.\n     */\n    set minimumSize(value) {\n        // Normalize the value.\n        value = Math.max(2, Math.floor(value));\n        // Bail early if the value does not change.\n        if (this._minimumSize === value) {\n            return;\n        }\n        // Update the internal minimum size.\n        this._minimumSize = value;\n        // Update default size if larger than minimum size\n        if (value > this._defaultSize) {\n            this.defaultSize = value;\n        }\n    }\n    /**\n     * Get the default size of sections in the list.\n     *\n     * #### Complexity\n     * Constant.\n     */\n    get defaultSize() {\n        return this._defaultSize;\n    }\n    /**\n     * Set the default size of sections in the list.\n     *\n     * #### Complexity\n     * Linear on the number of resized sections.\n     */\n    set defaultSize(value) {\n        // Normalize the value.\n        value = Math.max(this._minimumSize, Math.floor(value));\n        // Bail early if the value does not change.\n        if (this._defaultSize === value) {\n            return;\n        }\n        // Compute the delta default size.\n        let delta = value - this._defaultSize;\n        // Update the internal default size.\n        this._defaultSize = value;\n        // Update the length.\n        this._length += delta * (this._count - this._sections.length);\n        // Bail early if there are no modified sections.\n        if (this._sections.length === 0) {\n            return;\n        }\n        // Recompute the offsets of the modified sections.\n        for (let i = 0, n = this._sections.length; i < n; ++i) {\n            // Look up the previous and current modified sections.\n            let prev = this._sections[i - 1];\n            let curr = this._sections[i];\n            // Adjust the offset for the current section.\n            if (prev) {\n                let count = curr.index - prev.index - 1;\n                curr.offset = prev.offset + prev.size + count * value;\n            }\n            else {\n                curr.offset = curr.index * value;\n            }\n        }\n    }\n    /**\n     * Clamp a size to the minimum section size\n     *\n     * @param size - The size to clamp.\n     *\n     * @returns The size or the section minimum size, whichever is larger\n     */\n    clampSize(size) {\n        return Math.max(this._minimumSize, Math.floor(size));\n    }\n    /**\n     * Find the index of the section which covers the given offset.\n     *\n     * @param offset - The offset of the section of interest.\n     *\n     * @returns The index of the section which covers the given offset,\n     *   or `-1` if the offset is out of range.\n     *\n     * #### Complexity\n     * Logarithmic on the number of resized sections.\n     */\n    indexOf(offset) {\n        // Bail early if the offset is out of range.\n        if (offset < 0 || offset >= this._length || this._count === 0) {\n            return -1;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return Math.floor(offset / this._defaultSize);\n        }\n        // Find the modified section for the given offset.\n        let i = ArrayExt.lowerBound(this._sections, offset, Private$2.offsetCmp);\n        // Return the index of an exact match.\n        if (i < this._sections.length && this._sections[i].offset <= offset) {\n            return this._sections[i].index;\n        }\n        // Handle the case of no modified sections before the offset.\n        if (i === 0) {\n            return Math.floor(offset / this._defaultSize);\n        }\n        // Compute the index from the previous modified section.\n        let section = this._sections[i - 1];\n        let span = offset - (section.offset + section.size);\n        return section.index + Math.floor(span / this._defaultSize) + 1;\n    }\n    /**\n     * Find the offset of the section at the given index.\n     *\n     * @param index - The index of the section of interest.\n     *\n     * @returns The offset of the section at the given index, or `-1`\n     *   if the index is out of range.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     *\n     * #### Complexity\n     * Logarithmic on the number of resized sections.\n     */\n    offsetOf(index) {\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= this._count) {\n            return -1;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return index * this._defaultSize;\n        }\n        // Find the modified section for the given index.\n        let i = ArrayExt.lowerBound(this._sections, index, Private$2.indexCmp);\n        // Return the offset of an exact match.\n        if (i < this._sections.length && this._sections[i].index === index) {\n            return this._sections[i].offset;\n        }\n        // Handle the case of no modified sections before the index.\n        if (i === 0) {\n            return index * this._defaultSize;\n        }\n        // Compute the offset from the previous modified section.\n        let section = this._sections[i - 1];\n        let span = index - section.index - 1;\n        return section.offset + section.size + span * this._defaultSize;\n    }\n    /**\n     * Find the extent of the section at the given index.\n     *\n     * @param index - The index of the section of interest.\n     *\n     * @returns The extent of the section at the given index, or `-1`\n     *   if the index is out of range.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     *\n     * #### Complexity\n     * Logarithmic on the number of resized sections.\n     */\n    extentOf(index) {\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= this._count) {\n            return -1;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return (index + 1) * this._defaultSize - 1;\n        }\n        // Find the modified section for the given index.\n        let i = ArrayExt.lowerBound(this._sections, index, Private$2.indexCmp);\n        // Return the offset of an exact match.\n        if (i < this._sections.length && this._sections[i].index === index) {\n            return this._sections[i].offset + this._sections[i].size - 1;\n        }\n        // Handle the case of no modified sections before the index.\n        if (i === 0) {\n            return (index + 1) * this._defaultSize - 1;\n        }\n        // Compute the offset from the previous modified section.\n        let section = this._sections[i - 1];\n        let span = index - section.index;\n        return section.offset + section.size + span * this._defaultSize - 1;\n    }\n    /**\n     * Find the size of the section at the given index.\n     *\n     * @param index - The index of the section of interest.\n     *\n     * @returns The size of the section at the given index, or `-1`\n     *   if the index is out of range.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     *\n     * #### Complexity\n     * Logarithmic on the number of resized sections.\n     */\n    sizeOf(index) {\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= this._count) {\n            return -1;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return this._defaultSize;\n        }\n        // Find the modified section for the given index.\n        let i = ArrayExt.lowerBound(this._sections, index, Private$2.indexCmp);\n        // Return the size of an exact match.\n        if (i < this._sections.length && this._sections[i].index === index) {\n            return this._sections[i].size;\n        }\n        // Return the default size for all other cases.\n        return this._defaultSize;\n    }\n    /**\n     * Resize a section in the list.\n     *\n     * @param index - The index of the section to resize. This method\n     *   is a no-op if this value is out of range.\n     *\n     * @param size - The new size of the section. This value will be\n     *   clamped to an integer `>= 0`.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     *\n     * #### Complexity\n     * Linear on the number of resized sections.\n     */\n    resize(index, size) {\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= this._count) {\n            return;\n        }\n        // Clamp the size to an integer >= minimum size.\n        size = Math.max(this._minimumSize, Math.floor(size));\n        // Find the modified section for the given index.\n        let i = ArrayExt.lowerBound(this._sections, index, Private$2.indexCmp);\n        // Update or create the modified section as needed.\n        let delta;\n        if (i < this._sections.length && this._sections[i].index === index) {\n            let section = this._sections[i];\n            delta = size - section.size;\n            section.size = size;\n        }\n        else if (i === 0) {\n            let offset = index * this._defaultSize;\n            ArrayExt.insert(this._sections, i, { index, offset, size });\n            delta = size - this._defaultSize;\n        }\n        else {\n            let section = this._sections[i - 1];\n            let span = index - section.index - 1;\n            let offset = section.offset + section.size + span * this._defaultSize;\n            ArrayExt.insert(this._sections, i, { index, offset, size });\n            delta = size - this._defaultSize;\n        }\n        // Adjust the length.\n        this._length += delta;\n        // Update all modified sections after the resized section.\n        for (let j = i + 1, n = this._sections.length; j < n; ++j) {\n            this._sections[j].offset += delta;\n        }\n    }\n    /**\n     * Insert sections into the list.\n     *\n     * @param index - The index at which to insert the sections. This\n     *   value will be clamped to the bounds of the list.\n     *\n     * @param count - The number of sections to insert. This method\n     *   is a no-op if this value is `<= 0`.\n     *\n     * #### Undefined Behavior\n     * An `index` or `count` which is non-integral.\n     *\n     * #### Complexity\n     * Linear on the number of resized sections.\n     */\n    insert(index, count) {\n        // Bail early if there are no sections to insert.\n        if (count <= 0) {\n            return;\n        }\n        // Clamp the index to the bounds of the list.\n        index = Math.max(0, Math.min(index, this._count));\n        // Add the new sections to the totals.\n        let span = count * this._defaultSize;\n        this._count += count;\n        this._length += span;\n        // Bail early if there are no modified sections to update.\n        if (this._sections.length === 0) {\n            return;\n        }\n        // Find the modified section for the given index.\n        let i = ArrayExt.lowerBound(this._sections, index, Private$2.indexCmp);\n        // Update all modified sections after the insert location.\n        for (let n = this._sections.length; i < n; ++i) {\n            let section = this._sections[i];\n            section.index += count;\n            section.offset += span;\n        }\n    }\n    /**\n     * Remove sections from the list.\n     *\n     * @param index - The index of the first section to remove. This\n     *   method is a no-op if this value is out of range.\n     *\n     * @param count - The number of sections to remove. This method\n     *   is a no-op if this value is `<= 0`.\n     *\n     * #### Undefined Behavior\n     * An `index` or `count` which is non-integral.\n     *\n     * #### Complexity\n     * Linear on the number of resized sections.\n     */\n    remove(index, count) {\n        // Bail early if there is nothing to remove.\n        if (index < 0 || index >= this._count || count <= 0) {\n            return;\n        }\n        // Clamp the count to the bounds of the list.\n        count = Math.min(this._count - index, count);\n        // Handle the simple case of no modified sections to update.\n        if (this._sections.length === 0) {\n            this._count -= count;\n            this._length -= count * this._defaultSize;\n            return;\n        }\n        // Handle the simple case of removing all sections.\n        if (count === this._count) {\n            this._length = 0;\n            this._count = 0;\n            this._sections.length = 0;\n            return;\n        }\n        // Find the modified section for the start index.\n        let i = ArrayExt.lowerBound(this._sections, index, Private$2.indexCmp);\n        // Find the modified section for the end index.\n        let j = ArrayExt.lowerBound(this._sections, index + count, Private$2.indexCmp);\n        // Remove the relevant modified sections.\n        let removed = this._sections.splice(i, j - i);\n        // Compute the total removed span.\n        let span = (count - removed.length) * this._defaultSize;\n        for (let k = 0, n = removed.length; k < n; ++k) {\n            span += removed[k].size;\n        }\n        // Adjust the totals.\n        this._count -= count;\n        this._length -= span;\n        // Update all modified sections after the removed span.\n        for (let k = i, n = this._sections.length; k < n; ++k) {\n            let section = this._sections[k];\n            section.index -= count;\n            section.offset -= span;\n        }\n    }\n    /**\n     * Move sections within the list.\n     *\n     * @param index - The index of the first section to move. This method\n     *   is a no-op if this value is out of range.\n     *\n     * @param count - The number of sections to move. This method is a\n     *   no-op if this value is `<= 0`.\n     *\n     * @param destination - The destination index for the first section.\n     *   This value will be clamped to the allowable range.\n     *\n     * #### Undefined Behavior\n     * An `index`, `count`, or `destination` which is non-integral.\n     *\n     * #### Complexity\n     * Linear on the number of moved resized sections.\n     */\n    move(index, count, destination) {\n        // Bail early if there is nothing to move.\n        if (index < 0 || index >= this._count || count <= 0) {\n            return;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return;\n        }\n        // Clamp the move count to the limit.\n        count = Math.min(count, this._count - index);\n        // Clamp the destination index to the limit.\n        destination = Math.min(Math.max(0, destination), this._count - count);\n        // Bail early if there is no effective move.\n        if (index === destination) {\n            return;\n        }\n        // Compute the first affected index.\n        let i1 = Math.min(index, destination);\n        // Look up the first affected modified section.\n        let k1 = ArrayExt.lowerBound(this._sections, i1, Private$2.indexCmp);\n        // Bail early if there are no affected modified sections.\n        if (k1 === this._sections.length) {\n            return;\n        }\n        // Compute the last affected index.\n        let i2 = Math.max(index + count - 1, destination + count - 1);\n        // Look up the last affected modified section.\n        let k2 = ArrayExt.upperBound(this._sections, i2, Private$2.indexCmp) - 1;\n        // Bail early if there are no affected modified sections.\n        if (k2 < k1) {\n            return;\n        }\n        // Compute the pivot index.\n        let pivot = destination < index ? index : index + count;\n        // Compute the count for each side of the pivot.\n        let count1 = pivot - i1;\n        let count2 = i2 - pivot + 1;\n        // Compute the span for each side of the pivot.\n        let span1 = count1 * this._defaultSize;\n        let span2 = count2 * this._defaultSize;\n        // Adjust the spans for the modified sections.\n        for (let j = k1; j <= k2; ++j) {\n            let section = this._sections[j];\n            if (section.index < pivot) {\n                span1 += section.size - this._defaultSize;\n            }\n            else {\n                span2 += section.size - this._defaultSize;\n            }\n        }\n        // Look up the pivot section.\n        let k3 = ArrayExt.lowerBound(this._sections, pivot, Private$2.indexCmp);\n        // Rotate the modified sections if needed.\n        if (k1 <= k3 && k3 <= k2) {\n            ArrayExt.rotate(this._sections, k3 - k1, k1, k2);\n        }\n        // Adjust the modified section indices and offsets.\n        for (let j = k1; j <= k2; ++j) {\n            let section = this._sections[j];\n            if (section.index < pivot) {\n                section.index += count2;\n                section.offset += span2;\n            }\n            else {\n                section.index -= count1;\n                section.offset -= span1;\n            }\n        }\n    }\n    /**\n     * Reset all modified sections to the default size.\n     *\n     * #### Complexity\n     * Constant.\n     */\n    reset() {\n        this._sections.length = 0;\n        this._length = this._count * this._defaultSize;\n    }\n    /**\n     * Remove all sections from the list.\n     *\n     * #### Complexity\n     * Constant.\n     */\n    clear() {\n        this._count = 0;\n        this._length = 0;\n        this._sections.length = 0;\n    }\n}\n/**\n * The namespace for the module implementation details.\n */\nvar Private$2;\n(function (Private) {\n    /**\n     * A comparison function for searching by offset.\n     */\n    function offsetCmp(section, offset) {\n        if (offset < section.offset) {\n            return 1;\n        }\n        if (section.offset + section.size <= offset) {\n            return -1;\n        }\n        return 0;\n    }\n    Private.offsetCmp = offsetCmp;\n    /**\n     * A comparison function for searching by index.\n     */\n    function indexCmp(section, index) {\n        return section.index - index;\n    }\n    Private.indexCmp = indexCmp;\n})(Private$2 || (Private$2 = {}));\n\n/**\n * A widget which implements a high-performance tabular data grid.\n *\n * #### Notes\n * A data grid is implemented as a composition of child widgets. These\n * child widgets are considered an implementation detail. Manipulating\n * the child widgets of a data grid directly is undefined behavior.\n *\n * This class is not designed to be subclassed.\n */\nclass DataGrid extends Widget {\n    /**\n     * Construct a new data grid.\n     *\n     * @param options - The options for initializing the data grid.\n     */\n    constructor(options = {}) {\n        super();\n        this._scrollX = 0;\n        this._scrollY = 0;\n        this._viewportWidth = 0;\n        this._viewportHeight = 0;\n        this._mousedown = false;\n        this._keyHandler = null;\n        this._mouseHandler = null;\n        this._vScrollBarMinWidth = 0;\n        this._hScrollBarMinHeight = 0;\n        this._dpiRatio = Math.ceil(window.devicePixelRatio);\n        this._dataModel = null;\n        this._selectionModel = null;\n        this._editingEnabled = false;\n        this.addClass('lm-DataGrid');\n        // Parse the simple options.\n        this._style = options.style || DataGrid.defaultStyle;\n        this._stretchLastRow = options.stretchLastRow || false;\n        this._stretchLastColumn = options.stretchLastColumn || false;\n        this._headerVisibility = options.headerVisibility || 'all';\n        this._cellRenderers = options.cellRenderers || new RendererMap();\n        this._copyConfig = options.copyConfig || DataGrid.defaultCopyConfig;\n        // Connect to the renderer map changed signal.\n        this._cellRenderers.changed.connect(this._onRenderersChanged, this);\n        // Parse the default sizes.\n        let defaultSizes = options.defaultSizes || DataGrid.defaultSizes;\n        let minimumSizes = options.minimumSizes || DataGrid.minimumSizes;\n        // Set up the sections lists.\n        this._rowSections = new SectionList({\n            defaultSize: defaultSizes.rowHeight,\n            minimumSize: minimumSizes.rowHeight\n        });\n        this._columnSections = new SectionList({\n            defaultSize: defaultSizes.columnWidth,\n            minimumSize: minimumSizes.columnWidth\n        });\n        this._rowHeaderSections = new SectionList({\n            defaultSize: defaultSizes.rowHeaderWidth,\n            minimumSize: minimumSizes.rowHeaderWidth\n        });\n        this._columnHeaderSections = new SectionList({\n            defaultSize: defaultSizes.columnHeaderHeight,\n            minimumSize: minimumSizes.columnHeaderHeight\n        });\n        // Create the canvas, buffer, and overlay objects.\n        this._canvas = Private$1.createCanvas();\n        this._buffer = Private$1.createCanvas();\n        this._overlay = Private$1.createCanvas();\n        // Get the graphics contexts for the canvases.\n        this._canvasGC = this._canvas.getContext('2d');\n        this._bufferGC = this._buffer.getContext('2d');\n        this._overlayGC = this._overlay.getContext('2d');\n        // Set up the on-screen canvas.\n        this._canvas.style.position = 'absolute';\n        this._canvas.style.top = '0px';\n        this._canvas.style.left = '0px';\n        this._canvas.style.width = '0px';\n        this._canvas.style.height = '0px';\n        // Set up the on-screen overlay.\n        this._overlay.style.position = 'absolute';\n        this._overlay.style.top = '0px';\n        this._overlay.style.left = '0px';\n        this._overlay.style.width = '0px';\n        this._overlay.style.height = '0px';\n        // Create the internal widgets for the data grid.\n        this._viewport = new Widget();\n        this._viewport.node.tabIndex = -1;\n        this._viewport.node.style.outline = 'none';\n        this._vScrollBar = new ScrollBar({ orientation: 'vertical' });\n        this._hScrollBar = new ScrollBar({ orientation: 'horizontal' });\n        this._scrollCorner = new Widget();\n        this._editorController = new CellEditorController();\n        // Add the extra class names to the child widgets.\n        this._viewport.addClass('lm-DataGrid-viewport');\n        this._vScrollBar.addClass('lm-DataGrid-scrollBar');\n        this._hScrollBar.addClass('lm-DataGrid-scrollBar');\n        this._scrollCorner.addClass('lm-DataGrid-scrollCorner');\n        // Add the on-screen canvas to the viewport node.\n        this._viewport.node.appendChild(this._canvas);\n        // Add the on-screen overlay to the viewport node.\n        this._viewport.node.appendChild(this._overlay);\n        // Install the message hooks.\n        MessageLoop.installMessageHook(this._viewport, this);\n        MessageLoop.installMessageHook(this._hScrollBar, this);\n        MessageLoop.installMessageHook(this._vScrollBar, this);\n        // Hide the scroll bars and corner from the outset.\n        this._vScrollBar.hide();\n        this._hScrollBar.hide();\n        this._scrollCorner.hide();\n        // Connect to the scroll bar signals.\n        this._vScrollBar.thumbMoved.connect(this._onThumbMoved, this);\n        this._hScrollBar.thumbMoved.connect(this._onThumbMoved, this);\n        this._vScrollBar.pageRequested.connect(this._onPageRequested, this);\n        this._hScrollBar.pageRequested.connect(this._onPageRequested, this);\n        this._vScrollBar.stepRequested.connect(this._onStepRequested, this);\n        this._hScrollBar.stepRequested.connect(this._onStepRequested, this);\n        // Set the layout cell config for the child widgets.\n        GridLayout.setCellConfig(this._viewport, { row: 0, column: 0 });\n        GridLayout.setCellConfig(this._vScrollBar, { row: 0, column: 1 });\n        GridLayout.setCellConfig(this._hScrollBar, { row: 1, column: 0 });\n        GridLayout.setCellConfig(this._scrollCorner, { row: 1, column: 1 });\n        // Create the layout for the data grid.\n        let layout = new GridLayout({\n            rowCount: 2,\n            columnCount: 2,\n            rowSpacing: 0,\n            columnSpacing: 0,\n            fitPolicy: 'set-no-constraint'\n        });\n        // Set the stretch factors for the grid.\n        layout.setRowStretch(0, 1);\n        layout.setRowStretch(1, 0);\n        layout.setColumnStretch(0, 1);\n        layout.setColumnStretch(1, 0);\n        // Add the child widgets to the layout.\n        layout.addWidget(this._viewport);\n        layout.addWidget(this._vScrollBar);\n        layout.addWidget(this._hScrollBar);\n        layout.addWidget(this._scrollCorner);\n        // Install the layout on the data grid.\n        this.layout = layout;\n    }\n    /**\n     * Dispose of the resources held by the widgets.\n     */\n    dispose() {\n        // Release the mouse.\n        this._releaseMouse();\n        // Dispose of the handlers.\n        if (this._keyHandler) {\n            this._keyHandler.dispose();\n        }\n        if (this._mouseHandler) {\n            this._mouseHandler.dispose();\n        }\n        this._keyHandler = null;\n        this._mouseHandler = null;\n        // Clear the models.\n        this._dataModel = null;\n        this._selectionModel = null;\n        // Clear the section lists.\n        this._rowSections.clear();\n        this._columnSections.clear();\n        this._rowHeaderSections.clear();\n        this._columnHeaderSections.clear();\n        // Dispose of the base class.\n        super.dispose();\n    }\n    /**\n     * Get the data model for the data grid.\n     */\n    get dataModel() {\n        return this._dataModel;\n    }\n    /**\n     * Set the data model for the data grid.\n     *\n     * #### Notes\n     * This will automatically remove the current selection model.\n     */\n    set dataModel(value) {\n        // Do nothing if the model does not change.\n        if (this._dataModel === value) {\n            return;\n        }\n        // Release the mouse.\n        this._releaseMouse();\n        // Clear the selection model.\n        this.selectionModel = null;\n        // Disconnect the change handler from the old model.\n        if (this._dataModel) {\n            this._dataModel.changed.disconnect(this._onDataModelChanged, this);\n        }\n        // Connect the change handler for the new model.\n        if (value) {\n            value.changed.connect(this._onDataModelChanged, this);\n        }\n        // Update the internal model reference.\n        this._dataModel = value;\n        // Clear the section lists.\n        this._rowSections.clear();\n        this._columnSections.clear();\n        this._rowHeaderSections.clear();\n        this._columnHeaderSections.clear();\n        // Populate the section lists.\n        if (value) {\n            this._rowSections.insert(0, value.rowCount('body'));\n            this._columnSections.insert(0, value.columnCount('body'));\n            this._rowHeaderSections.insert(0, value.columnCount('row-header'));\n            this._columnHeaderSections.insert(0, value.rowCount('column-header'));\n        }\n        // Reset the scroll position.\n        this._scrollX = 0;\n        this._scrollY = 0;\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Get the selection model for the data grid.\n     */\n    get selectionModel() {\n        return this._selectionModel;\n    }\n    /**\n     * Set the selection model for the data grid.\n     */\n    set selectionModel(value) {\n        // Do nothing if the selection model does not change.\n        if (this._selectionModel === value) {\n            return;\n        }\n        // Release the mouse.\n        this._releaseMouse();\n        // Ensure the data models are a match.\n        if (value && value.dataModel !== this._dataModel) {\n            throw new Error('SelectionModel.dataModel !== DataGrid.dataModel');\n        }\n        // Disconnect the change handler from the old model.\n        if (this._selectionModel) {\n            this._selectionModel.changed.disconnect(this._onSelectionsChanged, this);\n        }\n        // Connect the change handler for the new model.\n        if (value) {\n            value.changed.connect(this._onSelectionsChanged, this);\n        }\n        // Update the internal selection model reference.\n        this._selectionModel = value;\n        // Schedule a repaint of the overlay.\n        this.repaintOverlay();\n    }\n    /**\n     * Get the key handler for the data grid.\n     */\n    get keyHandler() {\n        return this._keyHandler;\n    }\n    /**\n     * Set the key handler for the data grid.\n     */\n    set keyHandler(value) {\n        this._keyHandler = value;\n    }\n    /**\n     * Get the mouse handler for the data grid.\n     */\n    get mouseHandler() {\n        return this._mouseHandler;\n    }\n    /**\n     * Set the mouse handler for the data grid.\n     */\n    set mouseHandler(value) {\n        // Bail early if the mouse handler does not change.\n        if (this._mouseHandler === value) {\n            return;\n        }\n        // Release the mouse.\n        this._releaseMouse();\n        // Update the internal mouse handler.\n        this._mouseHandler = value;\n    }\n    /**\n     * Get the style for the data grid.\n     */\n    get style() {\n        return this._style;\n    }\n    /**\n     * Set the style for the data grid.\n     */\n    set style(value) {\n        // Bail if the style does not change.\n        if (this._style === value) {\n            return;\n        }\n        // Update the internal style.\n        this._style = { ...value };\n        // Schedule a repaint of the content.\n        this.repaintContent();\n        // Schedule a repaint of the overlay.\n        this.repaintOverlay();\n    }\n    /**\n     * Get the cell renderer map for the data grid.\n     */\n    get cellRenderers() {\n        return this._cellRenderers;\n    }\n    /**\n     * Set the cell renderer map for the data grid.\n     */\n    set cellRenderers(value) {\n        // Bail if the renderer map does not change.\n        if (this._cellRenderers === value) {\n            return;\n        }\n        // Disconnect the old map.\n        this._cellRenderers.changed.disconnect(this._onRenderersChanged, this);\n        // Connect the new map.\n        value.changed.connect(this._onRenderersChanged, this);\n        // Update the internal renderer map.\n        this._cellRenderers = value;\n        // Schedule a repaint of the grid content.\n        this.repaintContent();\n    }\n    /**\n     * Get the header visibility for the data grid.\n     */\n    get headerVisibility() {\n        return this._headerVisibility;\n    }\n    /**\n     * Set the header visibility for the data grid.\n     */\n    set headerVisibility(value) {\n        // Bail if the visibility does not change.\n        if (this._headerVisibility === value) {\n            return;\n        }\n        // Update the internal visibility.\n        this._headerVisibility = value;\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Get the default sizes for the various sections of the data grid.\n     */\n    get defaultSizes() {\n        let rowHeight = this._rowSections.defaultSize;\n        let columnWidth = this._columnSections.defaultSize;\n        let rowHeaderWidth = this._rowHeaderSections.defaultSize;\n        let columnHeaderHeight = this._columnHeaderSections.defaultSize;\n        return { rowHeight, columnWidth, rowHeaderWidth, columnHeaderHeight };\n    }\n    /**\n     * Set the default sizes for the various sections of the data grid.\n     */\n    set defaultSizes(value) {\n        // Update the section default sizes.\n        this._rowSections.defaultSize = value.rowHeight;\n        this._columnSections.defaultSize = value.columnWidth;\n        this._rowHeaderSections.defaultSize = value.rowHeaderWidth;\n        this._columnHeaderSections.defaultSize = value.columnHeaderHeight;\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Get the minimum sizes for the various sections of the data grid.\n     */\n    get minimumSizes() {\n        let rowHeight = this._rowSections.minimumSize;\n        let columnWidth = this._columnSections.minimumSize;\n        let rowHeaderWidth = this._rowHeaderSections.minimumSize;\n        let columnHeaderHeight = this._columnHeaderSections.minimumSize;\n        return { rowHeight, columnWidth, rowHeaderWidth, columnHeaderHeight };\n    }\n    /**\n     * Set the minimum sizes for the various sections of the data grid.\n     */\n    set minimumSizes(value) {\n        // Update the section default sizes.\n        this._rowSections.minimumSize = value.rowHeight;\n        this._columnSections.minimumSize = value.columnWidth;\n        this._rowHeaderSections.minimumSize = value.rowHeaderWidth;\n        this._columnHeaderSections.minimumSize = value.columnHeaderHeight;\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Get the copy configuration for the data grid.\n     */\n    get copyConfig() {\n        return this._copyConfig;\n    }\n    /**\n     * Set the copy configuration for the data grid.\n     */\n    set copyConfig(value) {\n        this._copyConfig = value;\n    }\n    /**\n     * Get whether the last row is stretched.\n     */\n    get stretchLastRow() {\n        return this._stretchLastRow;\n    }\n    /**\n     * Set whether the last row is stretched.\n     */\n    set stretchLastRow(value) {\n        // Bail early if the value does not change.\n        if (value === this._stretchLastRow) {\n            return;\n        }\n        // Update the internal value.\n        this._stretchLastRow = value;\n        // Sync the viewport\n        this._syncViewport();\n    }\n    /**\n     * Get whether the last column is stretched.\n     */\n    get stretchLastColumn() {\n        return this._stretchLastColumn;\n    }\n    /**\n     * Set whether the last column is stretched.\n     */\n    set stretchLastColumn(value) {\n        // Bail early if the value does not change.\n        if (value === this._stretchLastColumn) {\n            return;\n        }\n        // Update the internal value.\n        this._stretchLastColumn = value;\n        // Sync the viewport\n        this._syncViewport();\n    }\n    /**\n     * The virtual width of the row headers.\n     */\n    get headerWidth() {\n        if (this._headerVisibility === 'none') {\n            return 0;\n        }\n        if (this._headerVisibility === 'column') {\n            return 0;\n        }\n        return this._rowHeaderSections.length;\n    }\n    /**\n     * The virtual height of the column headers.\n     */\n    get headerHeight() {\n        if (this._headerVisibility === 'none') {\n            return 0;\n        }\n        if (this._headerVisibility === 'row') {\n            return 0;\n        }\n        return this._columnHeaderSections.length;\n    }\n    /**\n     * The virtual width of the grid body.\n     *\n     * #### Notes\n     * This does *not* account for a stretched last column.\n     */\n    get bodyWidth() {\n        return this._columnSections.length;\n    }\n    /**\n     * The virtual height of the grid body.\n     *\n     * #### Notes\n     * This does *not* account for a stretched last row.\n     */\n    get bodyHeight() {\n        return this._rowSections.length;\n    }\n    /**\n     * The virtual width of the entire grid.\n     *\n     * #### Notes\n     * This does *not* account for a stretched last column.\n     */\n    get totalWidth() {\n        return this.headerWidth + this.bodyWidth;\n    }\n    /**\n     * The virtual height of the entire grid.\n     *\n     * #### Notes\n     * This does *not* account for a stretched last row.\n     */\n    get totalHeight() {\n        return this.headerHeight + this.bodyHeight;\n    }\n    /**\n     * The actual width of the viewport.\n     */\n    get viewportWidth() {\n        return this._viewportWidth;\n    }\n    /**\n     * The actual height of the viewport.\n     */\n    get viewportHeight() {\n        return this._viewportHeight;\n    }\n    /**\n     * The width of the visible portion of the grid body.\n     */\n    get pageWidth() {\n        return Math.max(0, this.viewportWidth - this.headerWidth);\n    }\n    /**\n     * The height of the visible portion of the grid body.\n     */\n    get pageHeight() {\n        return Math.max(0, this.viewportHeight - this.headerHeight);\n    }\n    /**\n     * The current scroll X position of the viewport.\n     */\n    get scrollX() {\n        return this._hScrollBar.value;\n    }\n    /**\n     * The current scroll Y position of the viewport.\n     */\n    get scrollY() {\n        return this._vScrollBar.value;\n    }\n    /**\n     * The maximum scroll X position for the grid.\n     */\n    get maxScrollX() {\n        return Math.max(0, this.bodyWidth - this.pageWidth - 1);\n    }\n    /**\n     * The maximum scroll Y position for the grid.\n     */\n    get maxScrollY() {\n        return Math.max(0, this.bodyHeight - this.pageHeight - 1);\n    }\n    /**\n     * The viewport widget for the data grid.\n     */\n    get viewport() {\n        return this._viewport;\n    }\n    /**\n     * The cell editor controller object for the data grid.\n     */\n    get editorController() {\n        return this._editorController;\n    }\n    set editorController(controller) {\n        this._editorController = controller;\n    }\n    /**\n     * Whether the cell editing is enabled for the data grid.\n     */\n    get editingEnabled() {\n        return this._editingEnabled;\n    }\n    set editingEnabled(enabled) {\n        this._editingEnabled = enabled;\n    }\n    /**\n     * Whether the grid cells are editable.\n     *\n     * `editingEnabled` flag must be on and grid must have required\n     * selection model, editor controller and data model properties.\n     */\n    get editable() {\n        return (this._editingEnabled &&\n            this._selectionModel !== null &&\n            this._editorController !== null &&\n            this.dataModel instanceof MutableDataModel);\n    }\n    /**\n     * The rendering context for painting the data grid.\n     */\n    get canvasGC() {\n        return this._canvasGC;\n    }\n    /**\n     * The row sections of the data grid.\n     */\n    get rowSections() {\n        return this._rowSections;\n    }\n    /**\n     * The column sections of the data grid.\n     */\n    get columnSections() {\n        return this._columnSections;\n    }\n    /**\n     * The row header sections of the data grid.\n     */\n    get rowHeaderSections() {\n        return this._rowHeaderSections;\n    }\n    /**\n     * The column header sections of the data grid.\n     */\n    get columnHeaderSections() {\n        return this._columnHeaderSections;\n    }\n    /**\n     * Scroll the grid to the specified row.\n     *\n     * @param row - The row index of the cell.\n     *\n     * #### Notes\n     * This is a no-op if the row is already visible.\n     */\n    scrollToRow(row) {\n        // Fetch the row count.\n        let nr = this._rowSections.count;\n        // Bail early if there is no content.\n        if (nr === 0) {\n            return;\n        }\n        // Floor the row index.\n        row = Math.floor(row);\n        // Clamp the row index.\n        row = Math.max(0, Math.min(row, nr - 1));\n        // Get the virtual bounds of the row.\n        let y1 = this._rowSections.offsetOf(row);\n        let y2 = this._rowSections.extentOf(row);\n        // Get the virtual bounds of the viewport.\n        let vy1 = this._scrollY;\n        let vy2 = this._scrollY + this.pageHeight - 1;\n        // Set up the delta variables.\n        let dy = 0;\n        // Compute the delta Y scroll.\n        if (y1 < vy1) {\n            dy = y1 - vy1 - 10;\n        }\n        else if (y2 > vy2) {\n            dy = y2 - vy2 + 10;\n        }\n        // Bail early if no scroll is needed.\n        if (dy === 0) {\n            return;\n        }\n        // Scroll by the computed delta.\n        this.scrollBy(0, dy);\n    }\n    /**\n     * Scroll the grid to the specified column.\n     *\n     * @param column - The column index of the cell.\n     *\n     * #### Notes\n     * This is a no-op if the column is already visible.\n     */\n    scrollToColumn(column) {\n        // Fetch the column count.\n        let nc = this._columnSections.count;\n        // Bail early if there is no content.\n        if (nc === 0) {\n            return;\n        }\n        // Floor the column index.\n        column = Math.floor(column);\n        // Clamp the column index.\n        column = Math.max(0, Math.min(column, nc - 1));\n        // Get the virtual bounds of the column.\n        let x1 = this._columnSections.offsetOf(column);\n        let x2 = this._columnSections.extentOf(column);\n        // Get the virtual bounds of the viewport.\n        let vx1 = this._scrollX;\n        let vx2 = this._scrollX + this.pageWidth - 1;\n        // Set up the delta variables.\n        let dx = 0;\n        // Compute the delta X scroll.\n        if (x1 < vx1) {\n            dx = x1 - vx1 - 10;\n        }\n        else if (x2 > vx2) {\n            dx = x2 - vx2 + 10;\n        }\n        // Bail early if no scroll is needed.\n        if (dx === 0) {\n            return;\n        }\n        // Scroll by the computed delta.\n        this.scrollBy(dx, 0);\n    }\n    /**\n     * Scroll the grid to the specified cell.\n     *\n     * @param row - The row index of the cell.\n     *\n     * @param column - The column index of the cell.\n     *\n     * #### Notes\n     * This is a no-op if the cell is already visible.\n     */\n    scrollToCell(row, column) {\n        // Fetch the row and column count.\n        let nr = this._rowSections.count;\n        let nc = this._columnSections.count;\n        // Bail early if there is no content.\n        if (nr === 0 || nc === 0) {\n            return;\n        }\n        // Floor the cell index.\n        row = Math.floor(row);\n        column = Math.floor(column);\n        // Clamp the cell index.\n        row = Math.max(0, Math.min(row, nr - 1));\n        column = Math.max(0, Math.min(column, nc - 1));\n        // Get the virtual bounds of the cell.\n        let x1 = this._columnSections.offsetOf(column);\n        let x2 = this._columnSections.extentOf(column);\n        let y1 = this._rowSections.offsetOf(row);\n        let y2 = this._rowSections.extentOf(row);\n        // Get the virtual bounds of the viewport.\n        let vx1 = this._scrollX;\n        let vx2 = this._scrollX + this.pageWidth - 1;\n        let vy1 = this._scrollY;\n        let vy2 = this._scrollY + this.pageHeight - 1;\n        // Set up the delta variables.\n        let dx = 0;\n        let dy = 0;\n        // Compute the delta X scroll.\n        if (x1 < vx1) {\n            dx = x1 - vx1 - 10;\n        }\n        else if (x2 > vx2) {\n            dx = x2 - vx2 + 10;\n        }\n        // Compute the delta Y scroll.\n        if (y1 < vy1) {\n            dy = y1 - vy1 - 10;\n        }\n        else if (y2 > vy2) {\n            dy = y2 - vy2 + 10;\n        }\n        // Bail early if no scroll is needed.\n        if (dx === 0 && dy === 0) {\n            return;\n        }\n        // Scroll by the computed delta.\n        this.scrollBy(dx, dy);\n    }\n    /**\n     * Move cursor down/up/left/right while making sure it remains\n     * within the bounds of selected rectangles\n     *\n     * @param direction - The direction of the movement.\n     */\n    moveCursor(direction) {\n        // Bail early if there is no selection\n        if (!this.dataModel ||\n            !this._selectionModel ||\n            this._selectionModel.isEmpty) {\n            return;\n        }\n        const iter = this._selectionModel.selections();\n        const onlyOne = iter.next() && !iter.next();\n        // if there is a single selection that is a single cell selection\n        // then move the selection and cursor within grid bounds\n        if (onlyOne) {\n            const currentSel = this._selectionModel.currentSelection();\n            if (currentSel.r1 === currentSel.r2 && currentSel.c1 === currentSel.c2) {\n                const dr = direction === 'down' ? 1 : direction === 'up' ? -1 : 0;\n                const dc = direction === 'right' ? 1 : direction === 'left' ? -1 : 0;\n                let newRow = currentSel.r1 + dr;\n                let newColumn = currentSel.c1 + dc;\n                const rowCount = this.dataModel.rowCount('body');\n                const columnCount = this.dataModel.columnCount('body');\n                if (newRow >= rowCount) {\n                    newRow = 0;\n                    newColumn += 1;\n                }\n                else if (newRow === -1) {\n                    newRow = rowCount - 1;\n                    newColumn -= 1;\n                }\n                if (newColumn >= columnCount) {\n                    newColumn = 0;\n                    newRow += 1;\n                    if (newRow >= rowCount) {\n                        newRow = 0;\n                    }\n                }\n                else if (newColumn === -1) {\n                    newColumn = columnCount - 1;\n                    newRow -= 1;\n                    if (newRow === -1) {\n                        newRow = rowCount - 1;\n                    }\n                }\n                this._selectionModel.select({\n                    r1: newRow,\n                    c1: newColumn,\n                    r2: newRow,\n                    c2: newColumn,\n                    cursorRow: newRow,\n                    cursorColumn: newColumn,\n                    clear: 'all'\n                });\n                return;\n            }\n        }\n        // if there are multiple selections, move cursor\n        // within selection rectangles\n        this._selectionModel.moveCursorWithinSelections(direction);\n    }\n    /**\n     * Scroll the grid to the current cursor position.\n     *\n     * #### Notes\n     * This is a no-op if the cursor is already visible or\n     * if there is no selection model installed on the grid.\n     */\n    scrollToCursor() {\n        // Bail early if there is no selection model.\n        if (!this._selectionModel) {\n            return;\n        }\n        // Fetch the cursor row and column.\n        let row = this._selectionModel.cursorRow;\n        let column = this._selectionModel.cursorColumn;\n        // Scroll to the cursor cell.\n        this.scrollToCell(row, column);\n    }\n    /**\n     * Scroll the viewport by the specified amount.\n     *\n     * @param dx - The X scroll amount.\n     *\n     * @param dy - The Y scroll amount.\n     */\n    scrollBy(dx, dy) {\n        this.scrollTo(this.scrollX + dx, this.scrollY + dy);\n    }\n    /**\n     * Scroll the viewport by one page.\n     *\n     * @param dir - The desired direction of the scroll.\n     */\n    scrollByPage(dir) {\n        let dx = 0;\n        let dy = 0;\n        switch (dir) {\n            case 'up':\n                dy = -this.pageHeight;\n                break;\n            case 'down':\n                dy = this.pageHeight;\n                break;\n            case 'left':\n                dx = -this.pageWidth;\n                break;\n            case 'right':\n                dx = this.pageWidth;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        this.scrollTo(this.scrollX + dx, this.scrollY + dy);\n    }\n    /**\n     * Scroll the viewport by one cell-aligned step.\n     *\n     * @param dir - The desired direction of the scroll.\n     */\n    scrollByStep(dir) {\n        let r;\n        let c;\n        let x = this.scrollX;\n        let y = this.scrollY;\n        let rows = this._rowSections;\n        let columns = this._columnSections;\n        switch (dir) {\n            case 'up':\n                r = rows.indexOf(y - 1);\n                y = r < 0 ? y : rows.offsetOf(r);\n                break;\n            case 'down':\n                r = rows.indexOf(y);\n                y = r < 0 ? y : rows.offsetOf(r) + rows.sizeOf(r);\n                break;\n            case 'left':\n                c = columns.indexOf(x - 1);\n                x = c < 0 ? x : columns.offsetOf(c);\n                break;\n            case 'right':\n                c = columns.indexOf(x);\n                x = c < 0 ? x : columns.offsetOf(c) + columns.sizeOf(c);\n                break;\n            default:\n                throw 'unreachable';\n        }\n        this.scrollTo(x, y);\n    }\n    /**\n     * Scroll to the specified offset position.\n     *\n     * @param x - The desired X position.\n     *\n     * @param y - The desired Y position.\n     */\n    scrollTo(x, y) {\n        // Floor and clamp the position to the allowable range.\n        x = Math.max(0, Math.min(Math.floor(x), this.maxScrollX));\n        y = Math.max(0, Math.min(Math.floor(y), this.maxScrollY));\n        // Update the scroll bar values with the desired position.\n        this._hScrollBar.value = x;\n        this._vScrollBar.value = y;\n        // Post a scroll request message to the viewport.\n        MessageLoop.postMessage(this._viewport, Private$1.ScrollRequest);\n    }\n    /**\n     * Get the row count for a particular region in the data grid.\n     *\n     * @param region - The row region of interest.\n     *\n     * @returns The row count for the specified region.\n     */\n    rowCount(region) {\n        let count;\n        if (region === 'body') {\n            count = this._rowSections.count;\n        }\n        else {\n            count = this._columnHeaderSections.count;\n        }\n        return count;\n    }\n    /**\n     * Get the column count for a particular region in the data grid.\n     *\n     * @param region - The column region of interest.\n     *\n     * @returns The column count for the specified region.\n     */\n    columnCount(region) {\n        let count;\n        if (region === 'body') {\n            count = this._columnSections.count;\n        }\n        else {\n            count = this._rowHeaderSections.count;\n        }\n        return count;\n    }\n    /**\n     * Get the row at a virtual offset in the data grid.\n     *\n     * @param region - The region which holds the row of interest.\n     *\n     * @param offset - The virtual offset of the row of interest.\n     *\n     * @returns The index of the row, or `-1` if the offset is out of range.\n     *\n     * #### Notes\n     * This method accounts for a stretched last row.\n     */\n    rowAt(region, offset) {\n        // Bail early if the offset is negative.\n        if (offset < 0) {\n            return -1;\n        }\n        // Return early for the column header region.\n        if (region === 'column-header') {\n            return this._columnHeaderSections.indexOf(offset);\n        }\n        // Fetch the index.\n        let index = this._rowSections.indexOf(offset);\n        // Return early if the section is found.\n        if (index >= 0) {\n            return index;\n        }\n        // Bail early if the last row is not stretched.\n        if (!this._stretchLastRow) {\n            return -1;\n        }\n        // Fetch the geometry.\n        let bh = this.bodyHeight;\n        let ph = this.pageHeight;\n        // Bail early if no row stretching is required.\n        if (ph <= bh) {\n            return -1;\n        }\n        // Bail early if the offset is out of bounds.\n        if (offset >= ph) {\n            return -1;\n        }\n        // Otherwise, return the last row.\n        return this._rowSections.count - 1;\n    }\n    /**\n     * Get the column at a virtual offset in the data grid.\n     *\n     * @param region - The region which holds the column of interest.\n     *\n     * @param offset - The virtual offset of the column of interest.\n     *\n     * @returns The index of the column, or `-1` if the offset is out of range.\n     *\n     * #### Notes\n     * This method accounts for a stretched last column.\n     */\n    columnAt(region, offset) {\n        if (offset < 0) {\n            return -1;\n        }\n        // Return early for the row header region.\n        if (region === 'row-header') {\n            return this._rowHeaderSections.indexOf(offset);\n        }\n        // Fetch the index.\n        let index = this._columnSections.indexOf(offset);\n        // Return early if the section is found.\n        if (index >= 0) {\n            return index;\n        }\n        // Bail early if the last column is not stretched.\n        if (!this._stretchLastColumn) {\n            return -1;\n        }\n        // Fetch the geometry.\n        let bw = this.bodyWidth;\n        let pw = this.pageWidth;\n        // Bail early if no column stretching is required.\n        if (pw <= bw) {\n            return -1;\n        }\n        // Bail early if the offset is out of bounds.\n        if (offset >= pw) {\n            return -1;\n        }\n        // Otherwise, return the last column.\n        return this._columnSections.count - 1;\n    }\n    /**\n     * Get the offset of a row in the data grid.\n     *\n     * @param region - The region which holds the row of interest.\n     *\n     * @param index - The index of the row of interest.\n     *\n     * @returns The offset of the row, or `-1` if the index is out of range.\n     *\n     * #### Notes\n     * A stretched last row has no effect on the return value.\n     */\n    rowOffset(region, index) {\n        let offset;\n        if (region === 'body') {\n            offset = this._rowSections.offsetOf(index);\n        }\n        else {\n            offset = this._columnHeaderSections.offsetOf(index);\n        }\n        return offset;\n    }\n    /**\n     * Get the offset of a column in the data grid.\n     *\n     * @param region - The region which holds the column of interest.\n     *\n     * @param index - The index of the column of interest.\n     *\n     * @returns The offset of the column, or `-1` if the index is out of range.\n     *\n     * #### Notes\n     * A stretched last column has no effect on the return value.\n     */\n    columnOffset(region, index) {\n        let offset;\n        if (region === 'body') {\n            offset = this._columnSections.offsetOf(index);\n        }\n        else {\n            offset = this._rowHeaderSections.offsetOf(index);\n        }\n        return offset;\n    }\n    /**\n     * Get the size of a row in the data grid.\n     *\n     * @param region - The region which holds the row of interest.\n     *\n     * @param index - The index of the row of interest.\n     *\n     * @returns The size of the row, or `-1` if the index is out of range.\n     *\n     * #### Notes\n     * This method accounts for a stretched last row.\n     */\n    rowSize(region, index) {\n        // Return early for the column header region.\n        if (region === 'column-header') {\n            return this._columnHeaderSections.sizeOf(index);\n        }\n        // Fetch the row size.\n        let size = this._rowSections.sizeOf(index);\n        // Bail early if the index is out of bounds.\n        if (size < 0) {\n            return size;\n        }\n        // Return early if the last row is not stretched.\n        if (!this._stretchLastRow) {\n            return size;\n        }\n        // Return early if its not the last row.\n        if (index < this._rowSections.count - 1) {\n            return size;\n        }\n        // Fetch the geometry.\n        let bh = this.bodyHeight;\n        let ph = this.pageHeight;\n        // Return early if no stretching is needed.\n        if (ph <= bh) {\n            return size;\n        }\n        // Return the adjusted size.\n        return size + (ph - bh);\n    }\n    /**\n     * Get the size of a column in the data grid.\n     *\n     * @param region - The region which holds the column of interest.\n     *\n     * @param index - The index of the column of interest.\n     *\n     * @returns The size of the column, or `-1` if the index is out of range.\n     *\n     * #### Notes\n     * This method accounts for a stretched last column.\n     */\n    columnSize(region, index) {\n        // Return early for the row header region.\n        if (region === 'row-header') {\n            return this._rowHeaderSections.sizeOf(index);\n        }\n        // Fetch the column size.\n        let size = this._columnSections.sizeOf(index);\n        // Bail early if the index is out of bounds.\n        if (size < 0) {\n            return size;\n        }\n        // Return early if the last column is not stretched.\n        if (!this._stretchLastColumn) {\n            return size;\n        }\n        // Return early if its not the last column.\n        if (index < this._columnSections.count - 1) {\n            return size;\n        }\n        // Fetch the geometry.\n        let bw = this.bodyWidth;\n        let pw = this.pageWidth;\n        // Return early if no stretching is needed.\n        if (pw <= bw) {\n            return size;\n        }\n        // Return the adjusted size.\n        return size + (pw - bw);\n    }\n    /**\n     * Resize a row in the data grid.\n     *\n     * @param region - The region which holds the row of interest.\n     *\n     * @param index - The index of the row of interest.\n     *\n     * @param size - The desired size of the row.\n     */\n    resizeRow(region, index, size) {\n        let msg = new Private$1.RowResizeRequest(region, index, size);\n        MessageLoop.postMessage(this._viewport, msg);\n    }\n    /**\n     * Resize a column in the data grid.\n     *\n     * @param region - The region which holds the column of interest.\n     *\n     * @param index - The index of the column of interest.\n     *\n     * @param size - The desired size of the column.\n     */\n    resizeColumn(region, index, size) {\n        let msg = new Private$1.ColumnResizeRequest(region, index, size);\n        MessageLoop.postMessage(this._viewport, msg);\n    }\n    /**\n     * Reset modified rows to their default size.\n     *\n     * @param region - The row region of interest.\n     */\n    resetRows(region) {\n        switch (region) {\n            case 'all':\n                this._rowSections.reset();\n                this._columnHeaderSections.reset();\n                break;\n            case 'body':\n                this._rowSections.reset();\n                break;\n            case 'column-header':\n                this._columnHeaderSections.reset();\n                break;\n            default:\n                throw 'unreachable';\n        }\n        this.repaintContent();\n        this.repaintOverlay();\n    }\n    /**\n     * Reset modified columns to their default size.\n     *\n     * @param region - The column region of interest.\n     */\n    resetColumns(region) {\n        switch (region) {\n            case 'all':\n                this._columnSections.reset();\n                this._rowHeaderSections.reset();\n                break;\n            case 'body':\n                this._columnSections.reset();\n                break;\n            case 'row-header':\n                this._rowHeaderSections.reset();\n                break;\n            default:\n                throw 'unreachable';\n        }\n        this.repaintContent();\n        this.repaintOverlay();\n    }\n    /**\n     * Auto sizes column-header widths based on their text content.\n     * @param area which area to resize: 'body', 'row-header' or 'all'.\n     * @param padding padding added to resized columns (pixels).\n     * @param numCols specify cap on the number of column resizes (optional).\n     */\n    fitColumnNames(area = 'all', padding = 15, numCols) {\n        // Attempt resizing only if a data model is present.\n        if (this.dataModel) {\n            // Tracking remaining columns to be resized if numCols arg passed.\n            let colsRemaining = numCols === undefined || numCols < 0 ? undefined : numCols;\n            if (area === 'row-header' || area === 'all') {\n                // Respecting any column resize cap, if one has been passed.\n                if (colsRemaining !== undefined) {\n                    const rowColumnCount = this.dataModel.columnCount('row-header');\n                    /*\n                      If we have more row-header columns than columns available\n                      for resize, resize only remaining columns as per allowance\n                      and set remaining resize allowance number to 0.\n                    */\n                    if (colsRemaining - rowColumnCount < 0) {\n                        this._fitRowColumnHeaders(this.dataModel, padding, colsRemaining);\n                        colsRemaining = 0;\n                    }\n                    else {\n                        /*\n                          Otherwise the entire row-header column count can be resized.\n                          Resize all row-header columns and subtract from remaining\n                          column resize allowance.\n                        */\n                        this._fitRowColumnHeaders(this.dataModel, padding, rowColumnCount);\n                        colsRemaining = colsRemaining - rowColumnCount;\n                    }\n                }\n                else {\n                    // No column resize cap passed - resizing all columns.\n                    this._fitRowColumnHeaders(this.dataModel, padding);\n                }\n            }\n            if (area === 'body' || area === 'all') {\n                // Respecting any column resize cap, if one has been passed.\n                if (colsRemaining !== undefined) {\n                    const bodyColumnCount = this.dataModel.columnCount('body');\n                    /*\n                      If we have more body columns than columns available\n                      for resize, resize only remaining columns as per allowance\n                      and set remaining resize allowance number to 0.\n                    */\n                    if (colsRemaining - bodyColumnCount < 0) {\n                        this._fitBodyColumnHeaders(this.dataModel, padding, colsRemaining);\n                    }\n                    else {\n                        /*\n                          Otherwise the entire body column count can be resized.\n                          Resize based on the smallest number between remaining\n                          resize allowance and body column count.\n                        */\n                        this._fitBodyColumnHeaders(this.dataModel, padding, Math.min(colsRemaining, bodyColumnCount));\n                    }\n                }\n                else {\n                    // No column resize cap passed - resizing all columns.\n                    this._fitBodyColumnHeaders(this.dataModel, padding);\n                }\n            }\n        }\n    }\n    /**\n     * Map a client position to local viewport coordinates.\n     *\n     * @param clientX - The client X position of the mouse.\n     *\n     * @param clientY - The client Y position of the mouse.\n     *\n     * @returns The local viewport coordinates for the position.\n     */\n    mapToLocal(clientX, clientY) {\n        // Fetch the viewport rect.\n        let rect = this._viewport.node.getBoundingClientRect();\n        // Extract the rect coordinates.\n        let { left, top } = rect;\n        // Round the rect coordinates for sub-pixel positioning.\n        left = Math.floor(left);\n        top = Math.floor(top);\n        // Convert to local coordinates.\n        let lx = clientX - left;\n        let ly = clientY - top;\n        // Return the local coordinates.\n        return { lx, ly };\n    }\n    /**\n     * Map a client position to virtual grid coordinates.\n     *\n     * @param clientX - The client X position of the mouse.\n     *\n     * @param clientY - The client Y position of the mouse.\n     *\n     * @returns The virtual grid coordinates for the position.\n     */\n    mapToVirtual(clientX, clientY) {\n        // Convert to local coordiates.\n        let { lx, ly } = this.mapToLocal(clientX, clientY);\n        // Convert to virtual coordinates.\n        let vx = lx + this.scrollX - this.headerWidth;\n        let vy = ly + this.scrollY - this.headerHeight;\n        // Return the local coordinates.\n        return { vx, vy };\n    }\n    /**\n     * Hit test the viewport for the given client position.\n     *\n     * @param clientX - The client X position of the mouse.\n     *\n     * @param clientY - The client Y position of the mouse.\n     *\n     * @returns The hit test result, or `null` if the client\n     *   position is out of bounds.\n     *\n     * #### Notes\n     * This method accounts for a stretched last row and/or column.\n     */\n    hitTest(clientX, clientY) {\n        // Convert the mouse position into local coordinates.\n        let { lx, ly } = this.mapToLocal(clientX, clientY);\n        // Fetch the header and body dimensions.\n        let hw = this.headerWidth;\n        let hh = this.headerHeight;\n        let bw = this.bodyWidth;\n        let bh = this.bodyHeight;\n        let ph = this.pageHeight;\n        let pw = this.pageWidth;\n        // Adjust the body width for a stretched last column.\n        if (this._stretchLastColumn && pw > bw) {\n            bw = pw;\n        }\n        // Adjust the body height for a stretched last row.\n        if (this._stretchLastRow && ph > bh) {\n            bh = ph;\n        }\n        // Check for a corner header hit.\n        if (lx >= 0 && lx < hw && ly >= 0 && ly < hh) {\n            // Convert to unscrolled virtual coordinates.\n            let vx = lx;\n            let vy = ly;\n            // Fetch the row and column index.\n            let row = this.rowAt('column-header', vy);\n            let column = this.columnAt('row-header', vx);\n            // Fetch the cell offset position.\n            let ox = this.columnOffset('row-header', column);\n            let oy = this.rowOffset('column-header', row);\n            // Fetch cell width and height.\n            let width = this.columnSize('row-header', column);\n            let height = this.rowSize('column-header', row);\n            // Compute the leading and trailing positions.\n            let x = vx - ox;\n            let y = vy - oy;\n            // Return the hit test result.\n            return { region: 'corner-header', row, column, x, y, width, height };\n        }\n        // Check for a column header hit.\n        if (ly >= 0 && ly < hh && lx >= 0 && lx < hw + bw) {\n            // Convert to unscrolled virtual coordinates.\n            let vx = lx + this._scrollX - hw;\n            let vy = ly;\n            // Fetch the row and column index.\n            let row = this.rowAt('column-header', vy);\n            let column = this.columnAt('body', vx);\n            // Fetch the cell offset position.\n            let ox = this.columnOffset('body', column);\n            let oy = this.rowOffset('column-header', row);\n            // Fetch the cell width and height.\n            let width = this.columnSize('body', column);\n            let height = this.rowSize('column-header', row);\n            // Compute the leading and trailing positions.\n            let x = vx - ox;\n            let y = vy - oy;\n            // Return the hit test result.\n            return { region: 'column-header', row, column, x, y, width, height };\n        }\n        // Check for a row header hit.\n        if (lx >= 0 && lx < hw && ly >= 0 && ly < hh + bh) {\n            // Convert to unscrolled virtual coordinates.\n            let vx = lx;\n            let vy = ly + this._scrollY - hh;\n            // Fetch the row and column index.\n            let row = this.rowAt('body', vy);\n            let column = this.columnAt('row-header', vx);\n            // Fetch the cell offset position.\n            let ox = this.columnOffset('row-header', column);\n            let oy = this.rowOffset('body', row);\n            // Fetch the cell width and height.\n            let width = this.columnSize('row-header', column);\n            let height = this.rowSize('body', row);\n            // Compute the leading and trailing positions.\n            let x = vx - ox;\n            let y = vy - oy;\n            // Return the hit test result.\n            return { region: 'row-header', row, column, x, y, width, height };\n        }\n        // Check for a body hit.\n        if (lx >= hw && lx < hw + bw && ly >= hh && ly < hh + bh) {\n            // Convert to unscrolled virtual coordinates.\n            let vx = lx + this._scrollX - hw;\n            let vy = ly + this._scrollY - hh;\n            // Fetch the row and column index.\n            let row = this.rowAt('body', vy);\n            let column = this.columnAt('body', vx);\n            // Fetch the cell offset position.\n            let ox = this.columnOffset('body', column);\n            let oy = this.rowOffset('body', row);\n            // Fetch the cell width and height.\n            let width = this.columnSize('body', column);\n            let height = this.rowSize('body', row);\n            // Compute the part coordinates.\n            let x = vx - ox;\n            let y = vy - oy;\n            // Return the result.\n            return { region: 'body', row, column, x, y, width, height };\n        }\n        // Otherwise, it's a void space hit.\n        let row = -1;\n        let column = -1;\n        let x = -1;\n        let y = -1;\n        let width = -1;\n        let height = -1;\n        // Return the hit test result.\n        return { region: 'void', row, column, x, y, width, height };\n    }\n    /**\n     * Copy the current selection to the system clipboard.\n     *\n     * #### Notes\n     * The grid must have a data model and a selection model.\n     *\n     * The behavior can be configured via `DataGrid.copyConfig`.\n     */\n    copyToClipboard() {\n        // Fetch the data model.\n        let dataModel = this._dataModel;\n        // Bail early if there is no data model.\n        if (!dataModel) {\n            return;\n        }\n        // Fetch the selection model.\n        let selectionModel = this._selectionModel;\n        // Bail early if there is no selection model.\n        if (!selectionModel) {\n            return;\n        }\n        // Coerce the selections to an array.\n        let selections = Array.from(selectionModel.selections());\n        // Bail early if there are no selections.\n        if (selections.length === 0) {\n            return;\n        }\n        // Alert that multiple selections cannot be copied.\n        if (selections.length > 1) {\n            alert('Cannot copy multiple grid selections.');\n            return;\n        }\n        // Fetch the model counts.\n        let br = dataModel.rowCount('body');\n        let bc = dataModel.columnCount('body');\n        // Bail early if there is nothing to copy.\n        if (br === 0 || bc === 0) {\n            return;\n        }\n        // Unpack the selection.\n        let { r1, c1, r2, c2 } = selections[0];\n        // Clamp the selection to the model bounds.\n        r1 = Math.max(0, Math.min(r1, br - 1));\n        c1 = Math.max(0, Math.min(c1, bc - 1));\n        r2 = Math.max(0, Math.min(r2, br - 1));\n        c2 = Math.max(0, Math.min(c2, bc - 1));\n        // Ensure the limits are well-orderd.\n        if (r2 < r1)\n            [r1, r2] = [r2, r1];\n        if (c2 < c1)\n            [c1, c2] = [c2, c1];\n        // Fetch the header counts.\n        let rhc = dataModel.columnCount('row-header');\n        let chr = dataModel.rowCount('column-header');\n        // Unpack the copy config.\n        let separator = this._copyConfig.separator;\n        let format = this._copyConfig.format;\n        let headers = this._copyConfig.headers;\n        let warningThreshold = this._copyConfig.warningThreshold;\n        // Compute the number of cells to be copied.\n        let rowCount = r2 - r1 + 1;\n        let colCount = c2 - c1 + 1;\n        switch (headers) {\n            case 'none':\n                rhc = 0;\n                chr = 0;\n                break;\n            case 'row':\n                chr = 0;\n                colCount += rhc;\n                break;\n            case 'column':\n                rhc = 0;\n                rowCount += chr;\n                break;\n            case 'all':\n                rowCount += chr;\n                colCount += rhc;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Compute the total cell count.\n        let cellCount = rowCount * colCount;\n        // Allow the user to cancel a large copy request.\n        if (cellCount > warningThreshold) {\n            let msg = `Copying ${cellCount} cells may take a while. Continue?`;\n            if (!window.confirm(msg)) {\n                return;\n            }\n        }\n        // Set up the format args.\n        let args = {\n            region: 'body',\n            row: 0,\n            column: 0,\n            value: null,\n            metadata: {}\n        };\n        // Allocate the array of rows.\n        let rows = new Array(rowCount);\n        // Iterate over the rows.\n        for (let j = 0; j < rowCount; ++j) {\n            // Allocate the array of cells.\n            let cells = new Array(colCount);\n            // Iterate over the columns.\n            for (let i = 0; i < colCount; ++i) {\n                // Set up the format variables.\n                let region;\n                let row;\n                let column;\n                // Populate the format variables.\n                if (j < chr && i < rhc) {\n                    region = 'corner-header';\n                    row = j;\n                    column = i;\n                }\n                else if (j < chr) {\n                    region = 'column-header';\n                    row = j;\n                    column = i - rhc + c1;\n                }\n                else if (i < rhc) {\n                    region = 'row-header';\n                    row = j - chr + r1;\n                    column = i;\n                }\n                else {\n                    region = 'body';\n                    row = j - chr + r1;\n                    column = i - rhc + c1;\n                }\n                // Populate the format args.\n                args.region = region;\n                args.row = row;\n                args.column = column;\n                args.value = dataModel.data(region, row, column);\n                args.metadata = dataModel.metadata(region, row, column);\n                // Format the cell.\n                cells[i] = format(args);\n            }\n            // Save the row of cells.\n            rows[j] = cells;\n        }\n        // Convert the cells into lines.\n        let lines = rows.map(cells => cells.join(separator));\n        // Convert the lines into text.\n        let text = lines.join('\\n');\n        // Copy the text to the clipboard.\n        ClipboardExt.copyText(text);\n    }\n    /**\n     * Process a message sent to the widget.\n     *\n     * @param msg - The message sent to the widget.\n     */\n    processMessage(msg) {\n        // Ignore child show/hide messages. The data grid controls the\n        // visibility of its children, and will manually dispatch the\n        // fit-request messages as a result of visibility change.\n        if (msg.type === 'child-shown' || msg.type === 'child-hidden') {\n            return;\n        }\n        // Recompute the scroll bar minimums before the layout refits.\n        if (msg.type === 'fit-request') {\n            let vsbLimits = ElementExt.sizeLimits(this._vScrollBar.node);\n            let hsbLimits = ElementExt.sizeLimits(this._hScrollBar.node);\n            this._vScrollBarMinWidth = vsbLimits.minWidth;\n            this._hScrollBarMinHeight = hsbLimits.minHeight;\n        }\n        // Process all other messages as normal.\n        super.processMessage(msg);\n    }\n    /**\n     * Intercept a message sent to a message handler.\n     *\n     * @param handler - The target handler of the message.\n     *\n     * @param msg - The message to be sent to the handler.\n     *\n     * @returns `true` if the message should continue to be processed\n     *   as normal, or `false` if processing should cease immediately.\n     */\n    messageHook(handler, msg) {\n        // Process viewport messages.\n        if (handler === this._viewport) {\n            this._processViewportMessage(msg);\n            return true;\n        }\n        // Process horizontal scroll bar messages.\n        if (handler === this._hScrollBar && msg.type === 'activate-request') {\n            this.activate();\n            return false;\n        }\n        // Process vertical scroll bar messages.\n        if (handler === this._vScrollBar && msg.type === 'activate-request') {\n            this.activate();\n            return false;\n        }\n        // Ignore all other messages.\n        return true;\n    }\n    /**\n     * Handle the DOM events for the data grid.\n     *\n     * @param event - The DOM event sent to the data grid.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the data grid's DOM node. It\n     * should not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'keydown':\n                this._evtKeyDown(event);\n                break;\n            case 'mousedown':\n                this._evtMouseDown(event);\n                break;\n            case 'mousemove':\n                this._evtMouseMove(event);\n                break;\n            case 'mouseup':\n                this._evtMouseUp(event);\n                break;\n            case 'dblclick':\n                this._evtMouseDoubleClick(event);\n                break;\n            case 'mouseleave':\n                this._evtMouseLeave(event);\n                break;\n            case 'contextmenu':\n                this._evtContextMenu(event);\n                break;\n            case 'wheel':\n                this._evtWheel(event);\n                break;\n            case 'resize':\n                this._refreshDPI();\n                break;\n        }\n    }\n    /**\n     * A message handler invoked on an `'activate-request'` message.\n     */\n    onActivateRequest(msg) {\n        this.viewport.node.focus({ preventScroll: true });\n    }\n    /**\n     * A message handler invoked on a `'before-attach'` message.\n     */\n    onBeforeAttach(msg) {\n        window.addEventListener('resize', this);\n        this.node.addEventListener('wheel', this);\n        this._viewport.node.addEventListener('keydown', this);\n        this._viewport.node.addEventListener('mousedown', this);\n        this._viewport.node.addEventListener('mousemove', this);\n        this._viewport.node.addEventListener('dblclick', this);\n        this._viewport.node.addEventListener('mouseleave', this);\n        this._viewport.node.addEventListener('contextmenu', this);\n        this.repaintContent();\n        this.repaintOverlay();\n    }\n    /**\n     * A message handler invoked on an `'after-detach'` message.\n     */\n    onAfterDetach(msg) {\n        window.removeEventListener('resize', this);\n        this.node.removeEventListener('wheel', this);\n        this._viewport.node.removeEventListener('keydown', this);\n        this._viewport.node.removeEventListener('mousedown', this);\n        this._viewport.node.removeEventListener('mousemove', this);\n        this._viewport.node.removeEventListener('mouseleave', this);\n        this._viewport.node.removeEventListener('dblclick', this);\n        this._viewport.node.removeEventListener('contextmenu', this);\n        this._releaseMouse();\n    }\n    /**\n     * A message handler invoked on a `'before-show'` message.\n     */\n    onBeforeShow(msg) {\n        this.repaintContent();\n        this.repaintOverlay();\n    }\n    /**\n     * A message handler invoked on a `'resize'` message.\n     */\n    onResize(msg) {\n        if (this._editorController) {\n            this._editorController.cancel();\n        }\n        this._syncScrollState();\n    }\n    /**\n     * Schedule a repaint of all of the grid content.\n     */\n    repaintContent() {\n        let msg = new Private$1.PaintRequest('all', 0, 0, 0, 0);\n        MessageLoop.postMessage(this._viewport, msg);\n    }\n    /**\n     * Schedule a repaint of specific grid content.\n     */\n    repaintRegion(region, r1, c1, r2, c2) {\n        let msg = new Private$1.PaintRequest(region, r1, c1, r2, c2);\n        MessageLoop.postMessage(this._viewport, msg);\n    }\n    /**\n     * Schedule a repaint of the overlay.\n     */\n    repaintOverlay() {\n        MessageLoop.postMessage(this._viewport, Private$1.OverlayPaintRequest);\n    }\n    _getMaxWidthInColumn(index, columnRegion) {\n        const dataModel = this.dataModel;\n        if (!dataModel) {\n            return null;\n        }\n        const columnHeaderRegion = columnRegion == 'row-header' ? 'corner-header' : 'column-header';\n        return Math.max(this._getMaxWidthInArea(dataModel, index, columnHeaderRegion, 'column-header'), this._getMaxWidthInArea(dataModel, index, columnRegion, 'body'));\n    }\n    _getMaxWidthInArea(dataModel, index, region, rowRegion) {\n        const numRows = dataModel.rowCount(rowRegion);\n        // Will only allocate up to 1_000_000 elements otherwise performance can tank.\n        const configs = Array.from({ length: Math.min(numRows, 1000000) }, (_val, idx) => DataGrid._getConfig(dataModel, idx, index, region));\n        // Heuristic: Sort by the length of the text to render and only fully calculate the text width\n        // for the top 100_000 rows by text length\n        if (numRows > 100000) {\n            // Sort by descending length\n            configs.sort(x => -this._getTextToRender(x).length);\n        }\n        let maxWidth = 0;\n        for (let i = 0; i < numRows && i < 100000; ++i) {\n            const textWidth = this._getCellTextWidth(configs[i]);\n            maxWidth = Math.max(maxWidth, textWidth);\n        }\n        return maxWidth;\n    }\n    static _getConfig(dataModel, row, col, location) {\n        return {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0,\n            region: location,\n            row: row,\n            column: col,\n            value: DataGrid._getCellValue(dataModel, location, row, col),\n            metadata: DataGrid._getCellMetadata(dataModel, location, row, col)\n        };\n    }\n    _getTextToRender(config) {\n        const renderer = this.cellRenderers.get(config);\n        return renderer.getText(config);\n    }\n    _getCellTextWidth(config) {\n        // Get the renderer for the given cell.\n        const renderer = this.cellRenderers.get(config);\n        // Use the canvas context to measure the cell's text width\n        const gc = this.canvasGC;\n        gc.font = CellRenderer.resolveOption(renderer.font, config);\n        gc.fillStyle = CellRenderer.resolveOption(renderer.textColor, config);\n        gc.textAlign = CellRenderer.resolveOption(renderer.horizontalAlignment, config);\n        gc.textBaseline = 'bottom';\n        const text = this._getTextToRender(config);\n        return gc.measureText(text).width + 2 * renderer.horizontalPadding;\n    }\n    /**\n     * Ensure the canvas is at least the specified size.\n     *\n     * This method will retain the valid canvas content.\n     */\n    _resizeCanvasIfNeeded(width, height) {\n        // Scale the size by the dpi ratio.\n        width = width * this._dpiRatio;\n        height = height * this._dpiRatio;\n        // Compute the maximum canvas size for the given width and height.\n        let maxW = (Math.ceil((width + 1) / 512) + 1) * 512;\n        let maxH = (Math.ceil((height + 1) / 512) + 1) * 512;\n        // Get the current size of the canvas.\n        let curW = this._canvas.width;\n        let curH = this._canvas.height;\n        // Bail early if the canvas size is within bounds.\n        if (curW >= width && curH >= height && curW <= maxW && curH <= maxH) {\n            return;\n        }\n        // Compute the expanded canvas size.\n        let expW = maxW - 512;\n        let expH = maxH - 512;\n        // Set the transforms to the identity matrix.\n        this._canvasGC.setTransform(1, 0, 0, 1, 0, 0);\n        this._bufferGC.setTransform(1, 0, 0, 1, 0, 0);\n        this._overlayGC.setTransform(1, 0, 0, 1, 0, 0);\n        // Resize the buffer if needed.\n        if (curW < width) {\n            this._buffer.width = expW;\n        }\n        else if (curW > maxW) {\n            this._buffer.width = maxW;\n        }\n        // Resize the buffer height if needed.\n        if (curH < height) {\n            this._buffer.height = expH;\n        }\n        else if (curH > maxH) {\n            this._buffer.height = maxH;\n        }\n        // Test whether there is content to blit.\n        let needBlit = curW > 0 && curH > 0 && width > 0 && height > 0;\n        // Copy the valid canvas content into the buffer if needed.\n        if (needBlit) {\n            this._bufferGC.drawImage(this._canvas, 0, 0);\n        }\n        // Resize the canvas width if needed.\n        if (curW < width) {\n            this._canvas.width = expW;\n            this._canvas.style.width = `${expW / this._dpiRatio}px`;\n        }\n        else if (curW > maxW) {\n            this._canvas.width = maxW;\n            this._canvas.style.width = `${maxW / this._dpiRatio}px`;\n        }\n        // Resize the canvas height if needed.\n        if (curH < height) {\n            this._canvas.height = expH;\n            this._canvas.style.height = `${expH / this._dpiRatio}px`;\n        }\n        else if (curH > maxH) {\n            this._canvas.height = maxH;\n            this._canvas.style.height = `${maxH / this._dpiRatio}px`;\n        }\n        // Copy the valid canvas content from the buffer if needed.\n        if (needBlit) {\n            this._canvasGC.drawImage(this._buffer, 0, 0);\n        }\n        // Copy the valid overlay content into the buffer if needed.\n        if (needBlit) {\n            this._bufferGC.drawImage(this._overlay, 0, 0);\n        }\n        // Resize the overlay width if needed.\n        if (curW < width) {\n            this._overlay.width = expW;\n            this._overlay.style.width = `${expW / this._dpiRatio}px`;\n        }\n        else if (curW > maxW) {\n            this._overlay.width = maxW;\n            this._overlay.style.width = `${maxW / this._dpiRatio}px`;\n        }\n        // Resize the overlay height if needed.\n        if (curH < height) {\n            this._overlay.height = expH;\n            this._overlay.style.height = `${expH / this._dpiRatio}px`;\n        }\n        else if (curH > maxH) {\n            this._overlay.height = maxH;\n            this._overlay.style.height = `${maxH / this._dpiRatio}px`;\n        }\n        // Copy the valid overlay content from the buffer if needed.\n        if (needBlit) {\n            this._overlayGC.drawImage(this._buffer, 0, 0);\n        }\n    }\n    /**\n     * Sync the scroll bars and scroll state with the viewport.\n     *\n     * #### Notes\n     * If the visibility of either scroll bar changes, a synchronous\n     * fit-request will be dispatched to the data grid to immediately\n     * resize the viewport.\n     */\n    _syncScrollState() {\n        // Fetch the viewport dimensions.\n        let bw = this.bodyWidth;\n        let bh = this.bodyHeight;\n        let pw = this.pageWidth;\n        let ph = this.pageHeight;\n        // Get the current scroll bar visibility.\n        let hasVScroll = !this._vScrollBar.isHidden;\n        let hasHScroll = !this._hScrollBar.isHidden;\n        // Get the minimum sizes of the scroll bars.\n        let vsw = this._vScrollBarMinWidth;\n        let hsh = this._hScrollBarMinHeight;\n        // Get the page size as if no scroll bars are visible.\n        let apw = pw + (hasVScroll ? vsw : 0);\n        let aph = ph + (hasHScroll ? hsh : 0);\n        // Test whether scroll bars are needed for the adjusted size.\n        let needVScroll = aph < bh - 1;\n        let needHScroll = apw < bw - 1;\n        // Re-test the horizontal scroll if a vertical scroll is needed.\n        if (needVScroll && !needHScroll) {\n            needHScroll = apw - vsw < bw - 1;\n        }\n        // Re-test the vertical scroll if a horizontal scroll is needed.\n        if (needHScroll && !needVScroll) {\n            needVScroll = aph - hsh < bh - 1;\n        }\n        // If the visibility changes, immediately refit the grid.\n        if (needVScroll !== hasVScroll || needHScroll !== hasHScroll) {\n            this._vScrollBar.setHidden(!needVScroll);\n            this._hScrollBar.setHidden(!needHScroll);\n            this._scrollCorner.setHidden(!needVScroll || !needHScroll);\n            MessageLoop.sendMessage(this, Widget.Msg.FitRequest);\n        }\n        // Update the scroll bar limits.\n        this._vScrollBar.maximum = this.maxScrollY;\n        this._vScrollBar.page = this.pageHeight;\n        this._hScrollBar.maximum = this.maxScrollX;\n        this._hScrollBar.page = this.pageWidth;\n        // Re-clamp the scroll position.\n        this._scrollTo(this._scrollX, this._scrollY);\n    }\n    /**\n     * Sync the viewport to the given scroll position.\n     *\n     * #### Notes\n     * This schedules a full repaint and syncs the scroll state.\n     */\n    _syncViewport() {\n        this.repaintContent();\n        this.repaintOverlay();\n        this._syncScrollState();\n    }\n    /**\n     * Process a message sent to the viewport\n     */\n    _processViewportMessage(msg) {\n        switch (msg.type) {\n            case 'resize':\n                this._onViewportResize(msg);\n                break;\n            case 'scroll-request':\n                this._onViewportScrollRequest(msg);\n                break;\n            case 'paint-request':\n                this._onViewportPaintRequest(msg);\n                break;\n            case 'overlay-paint-request':\n                this._onViewportOverlayPaintRequest(msg);\n                break;\n            case 'row-resize-request':\n                this._onViewportRowResizeRequest(msg);\n                break;\n            case 'column-resize-request':\n                this._onViewportColumnResizeRequest(msg);\n                break;\n        }\n    }\n    /**\n     * A message hook invoked on a viewport `'resize'` message.\n     */\n    _onViewportResize(msg) {\n        // Bail early if the viewport is not visible.\n        if (!this._viewport.isVisible) {\n            return;\n        }\n        // Unpack the message data.\n        let { width, height } = msg;\n        // Measure the viewport node if the dimensions are unknown.\n        if (width === -1) {\n            width = this._viewport.node.offsetWidth;\n        }\n        if (height === -1) {\n            height = this._viewport.node.offsetHeight;\n        }\n        // Round the dimensions to the nearest pixel.\n        width = Math.round(width);\n        height = Math.round(height);\n        // Get the current size of the viewport.\n        let oldWidth = this._viewportWidth;\n        let oldHeight = this._viewportHeight;\n        // Updated internal viewport size.\n        this._viewportWidth = width;\n        this._viewportHeight = height;\n        // Resize the canvas if needed.\n        this._resizeCanvasIfNeeded(width, height);\n        // Bail early if there is nothing to paint.\n        if (width === 0 || height === 0) {\n            return;\n        }\n        // Paint the whole grid if the old size was zero.\n        if (oldWidth === 0 || oldHeight === 0) {\n            this.paintContent(0, 0, width, height);\n            this._paintOverlay();\n            return;\n        }\n        // Paint the right edge as needed.\n        if (this._stretchLastColumn && this.pageWidth > this.bodyWidth) {\n            let bx = this._columnSections.offsetOf(this._columnSections.count - 1);\n            let x = Math.min(this.headerWidth + bx, oldWidth);\n            this.paintContent(x, 0, width - x, height);\n        }\n        else if (width > oldWidth) {\n            this.paintContent(oldWidth, 0, width - oldWidth + 1, height);\n        }\n        // Paint the bottom edge as needed.\n        if (this._stretchLastRow && this.pageHeight > this.bodyHeight) {\n            let by = this._rowSections.offsetOf(this._rowSections.count - 1);\n            let y = Math.min(this.headerHeight + by, oldHeight);\n            this.paintContent(0, y, width, height - y);\n        }\n        else if (height > oldHeight) {\n            this.paintContent(0, oldHeight, width, height - oldHeight + 1);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n    }\n    /**\n     * A message hook invoked on a viewport `'scroll-request'` message.\n     */\n    _onViewportScrollRequest(msg) {\n        this._scrollTo(this._hScrollBar.value, this._vScrollBar.value);\n    }\n    /**\n     * A message hook invoked on a viewport `'paint-request'` message.\n     */\n    _onViewportPaintRequest(msg) {\n        // Bail early if the viewport is not visible.\n        if (!this._viewport.isVisible) {\n            return;\n        }\n        // Bail early if the viewport has zero area.\n        if (this._viewportWidth === 0 || this._viewportHeight === 0) {\n            return;\n        }\n        // Set up the paint limits.\n        let xMin = 0;\n        let yMin = 0;\n        let xMax = this._viewportWidth - 1;\n        let yMax = this._viewportHeight - 1;\n        // Fetch the scroll position.\n        let sx = this._scrollX;\n        let sy = this._scrollY;\n        // Fetch the header dimensions.\n        let hw = this.headerWidth;\n        let hh = this.headerHeight;\n        // Fetch the section lists.\n        let rs = this._rowSections;\n        let cs = this._columnSections;\n        let rhs = this._rowHeaderSections;\n        let chs = this._columnHeaderSections;\n        // Unpack the message data.\n        let { region, r1, c1, r2, c2 } = msg;\n        // Set up the paint variables.\n        let x1;\n        let y1;\n        let x2;\n        let y2;\n        // Fill the paint variables based on the paint region.\n        switch (region) {\n            case 'all':\n                x1 = xMin;\n                y1 = yMin;\n                x2 = xMax;\n                y2 = yMax;\n                break;\n            case 'body':\n                r1 = Math.max(0, Math.min(r1, rs.count));\n                c1 = Math.max(0, Math.min(c1, cs.count));\n                r2 = Math.max(0, Math.min(r2, rs.count));\n                c2 = Math.max(0, Math.min(c2, cs.count));\n                x1 = cs.offsetOf(c1) - sx + hw;\n                y1 = rs.offsetOf(r1) - sy + hh;\n                x2 = cs.extentOf(c2) - sx + hw;\n                y2 = rs.extentOf(r2) - sy + hh;\n                break;\n            case 'row-header':\n                r1 = Math.max(0, Math.min(r1, rs.count));\n                c1 = Math.max(0, Math.min(c1, rhs.count));\n                r2 = Math.max(0, Math.min(r2, rs.count));\n                c2 = Math.max(0, Math.min(c2, rhs.count));\n                x1 = rhs.offsetOf(c1);\n                y1 = rs.offsetOf(r1) - sy + hh;\n                x2 = rhs.extentOf(c2);\n                y2 = rs.extentOf(r2) - sy + hh;\n                break;\n            case 'column-header':\n                r1 = Math.max(0, Math.min(r1, chs.count));\n                c1 = Math.max(0, Math.min(c1, cs.count));\n                r2 = Math.max(0, Math.min(r2, chs.count));\n                c2 = Math.max(0, Math.min(c2, cs.count));\n                x1 = cs.offsetOf(c1) - sx + hw;\n                y1 = chs.offsetOf(r1);\n                x2 = cs.extentOf(c2) - sx + hw;\n                y2 = chs.extentOf(r2);\n                break;\n            case 'corner-header':\n                r1 = Math.max(0, Math.min(r1, chs.count));\n                c1 = Math.max(0, Math.min(c1, rhs.count));\n                r2 = Math.max(0, Math.min(r2, chs.count));\n                c2 = Math.max(0, Math.min(c2, rhs.count));\n                x1 = rhs.offsetOf(c1);\n                y1 = chs.offsetOf(r1);\n                x2 = rhs.extentOf(c2);\n                y2 = chs.extentOf(r2);\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Bail early if the dirty rect is outside the bounds.\n        if (x2 < xMin || y2 < yMin || x1 > xMax || y1 > yMax) {\n            return;\n        }\n        // Clamp the dirty rect to the paint bounds.\n        x1 = Math.max(xMin, Math.min(x1, xMax));\n        y1 = Math.max(yMin, Math.min(y1, yMax));\n        x2 = Math.max(xMin, Math.min(x2, xMax));\n        y2 = Math.max(yMin, Math.min(y2, yMax));\n        // Paint the content of the dirty rect.\n        this.paintContent(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n    }\n    /**\n     * A message hook invoked on a viewport `'overlay-paint-request'` message.\n     */\n    _onViewportOverlayPaintRequest(msg) {\n        // Bail early if the viewport is not visible.\n        if (!this._viewport.isVisible) {\n            return;\n        }\n        // Bail early if the viewport has zero area.\n        if (this._viewportWidth === 0 || this._viewportHeight === 0) {\n            return;\n        }\n        // Paint the content of the overlay.\n        this._paintOverlay();\n    }\n    /**\n     * A message hook invoked on a viewport `'row-resize-request'` message.\n     */\n    _onViewportRowResizeRequest(msg) {\n        if (msg.region === 'body') {\n            this._resizeRow(msg.index, msg.size);\n        }\n        else {\n            this._resizeColumnHeader(msg.index, msg.size);\n        }\n    }\n    /**\n     * A message hook invoked on a viewport `'column-resize-request'` message.\n     */\n    _onViewportColumnResizeRequest(msg) {\n        if (msg.region === 'body') {\n            this._resizeColumn(msg.index, msg.size);\n        }\n        else {\n            this._resizeRowHeader(msg.index, msg.size);\n        }\n    }\n    /**\n     * Handle the `thumbMoved` signal from a scroll bar.\n     */\n    _onThumbMoved(sender) {\n        MessageLoop.postMessage(this._viewport, Private$1.ScrollRequest);\n    }\n    /**\n     * Handle the `pageRequested` signal from a scroll bar.\n     */\n    _onPageRequested(sender, dir) {\n        if (sender === this._vScrollBar) {\n            this.scrollByPage(dir === 'decrement' ? 'up' : 'down');\n        }\n        else {\n            this.scrollByPage(dir === 'decrement' ? 'left' : 'right');\n        }\n    }\n    /**\n     * Handle the `stepRequested` signal from a scroll bar.\n     */\n    _onStepRequested(sender, dir) {\n        if (sender === this._vScrollBar) {\n            this.scrollByStep(dir === 'decrement' ? 'up' : 'down');\n        }\n        else {\n            this.scrollByStep(dir === 'decrement' ? 'left' : 'right');\n        }\n    }\n    /**\n     * A signal handler for the data model `changed` signal.\n     */\n    _onDataModelChanged(sender, args) {\n        switch (args.type) {\n            case 'rows-inserted':\n                this._onRowsInserted(args);\n                break;\n            case 'columns-inserted':\n                this._onColumnsInserted(args);\n                break;\n            case 'rows-removed':\n                this._onRowsRemoved(args);\n                break;\n            case 'columns-removed':\n                this._onColumnsRemoved(args);\n                break;\n            case 'rows-moved':\n                this._onRowsMoved(args);\n                break;\n            case 'columns-moved':\n                this._onColumnsMoved(args);\n                break;\n            case 'cells-changed':\n                this._onCellsChanged(args);\n                break;\n            case 'model-reset':\n                this._onModelReset(args);\n                break;\n            default:\n                throw 'unreachable';\n        }\n    }\n    /**\n     * A signal handler for the selection model `changed` signal.\n     */\n    _onSelectionsChanged(sender) {\n        this.repaintOverlay();\n    }\n    /**\n     * Handle rows being inserted in the data model.\n     */\n    _onRowsInserted(args) {\n        // Unpack the arg data.\n        let { region, index, span } = args;\n        // Bail early if there are no sections to insert.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        let list;\n        if (region === 'body') {\n            list = this._rowSections;\n        }\n        else {\n            list = this._columnHeaderSections;\n        }\n        // Insert the span, maintaining the scroll position as needed.\n        if (this._scrollY === this.maxScrollY && this.maxScrollY > 0) {\n            list.insert(index, span);\n            this._scrollY = this.maxScrollY;\n        }\n        else {\n            list.insert(index, span);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Handle columns being inserted into the data model.\n     */\n    _onColumnsInserted(args) {\n        // Unpack the arg data.\n        let { region, index, span } = args;\n        // Bail early if there are no sections to insert.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        let list;\n        if (region === 'body') {\n            list = this._columnSections;\n        }\n        else {\n            list = this._rowHeaderSections;\n        }\n        // Insert the span, maintaining the scroll position as needed.\n        if (this._scrollX === this.maxScrollX && this.maxScrollX > 0) {\n            list.insert(index, span);\n            this._scrollX = this.maxScrollX;\n        }\n        else {\n            list.insert(index, span);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Handle rows being removed from the data model.\n     */\n    _onRowsRemoved(args) {\n        // Unpack the arg data.\n        let { region, index, span } = args;\n        // Bail early if there are no sections to remove.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        let list;\n        if (region === 'body') {\n            list = this._rowSections;\n        }\n        else {\n            list = this._columnHeaderSections;\n        }\n        // Bail if the index or is invalid\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Remove the span, maintaining the scroll position as needed.\n        if (this._scrollY === this.maxScrollY && this.maxScrollY > 0) {\n            list.remove(index, span);\n            this._scrollY = this.maxScrollY;\n        }\n        else {\n            list.remove(index, span);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Handle columns being removed from the data model.\n     */\n    _onColumnsRemoved(args) {\n        // Unpack the arg data.\n        let { region, index, span } = args;\n        // Bail early if there are no sections to remove.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        let list;\n        if (region === 'body') {\n            list = this._columnSections;\n        }\n        else {\n            list = this._rowHeaderSections;\n        }\n        // Bail if the index or is invalid\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Remove the span, maintaining the scroll position as needed.\n        if (this._scrollX === this.maxScrollX && this.maxScrollX > 0) {\n            list.remove(index, span);\n            this._scrollX = this.maxScrollX;\n        }\n        else {\n            list.remove(index, span);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Handle rows moving in the data model.\n     */\n    _onRowsMoved(args) {\n        // Unpack the arg data.\n        let { region, index, span, destination } = args;\n        // Bail early if there are no sections to move.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        let list;\n        if (region === 'body') {\n            list = this._rowSections;\n        }\n        else {\n            list = this._columnHeaderSections;\n        }\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Clamp the move span to the limit.\n        span = Math.min(span, list.count - index);\n        // Clamp the destination index to the limit.\n        destination = Math.min(Math.max(0, destination), list.count - span);\n        // Bail early if there is no effective move.\n        if (index === destination) {\n            return;\n        }\n        // Compute the first affected index.\n        let r1 = Math.min(index, destination);\n        // Compute the last affected index.\n        let r2 = Math.max(index + span - 1, destination + span - 1);\n        // Move the sections in the list.\n        list.move(index, span, destination);\n        // Schedule a repaint of the dirty cells.\n        if (region === 'body') {\n            this.repaintRegion('body', r1, 0, r2, Infinity);\n            this.repaintRegion('row-header', r1, 0, r2, Infinity);\n        }\n        else {\n            this.repaintRegion('column-header', r1, 0, r2, Infinity);\n            this.repaintRegion('corner-header', r1, 0, r2, Infinity);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Handle columns moving in the data model.\n     */\n    _onColumnsMoved(args) {\n        // Unpack the arg data.\n        let { region, index, span, destination } = args;\n        // Bail early if there are no sections to move.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        let list;\n        if (region === 'body') {\n            list = this._columnSections;\n        }\n        else {\n            list = this._rowHeaderSections;\n        }\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Clamp the move span to the limit.\n        span = Math.min(span, list.count - index);\n        // Clamp the destination index to the limit.\n        destination = Math.min(Math.max(0, destination), list.count - span);\n        // Bail early if there is no effective move.\n        if (index === destination) {\n            return;\n        }\n        // Move the sections in the list.\n        list.move(index, span, destination);\n        // Compute the first affected index.\n        let c1 = Math.min(index, destination);\n        // Compute the last affected index.\n        let c2 = Math.max(index + span - 1, destination + span - 1);\n        // Schedule a repaint of the dirty cells.\n        if (region === 'body') {\n            this.repaintRegion('body', 0, c1, Infinity, c2);\n            this.repaintRegion('column-header', 0, c1, Infinity, c2);\n        }\n        else {\n            this.repaintRegion('row-header', 0, c1, Infinity, c2);\n            this.repaintRegion('corner-header', 0, c1, Infinity, c2);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Handle cells changing in the data model.\n     */\n    _onCellsChanged(args) {\n        // Unpack the arg data.\n        let { region, row, column, rowSpan, columnSpan } = args;\n        // Bail early if there are no cells to modify.\n        if (rowSpan <= 0 && columnSpan <= 0) {\n            return;\n        }\n        // Compute the changed cell bounds.\n        let r1 = row;\n        let c1 = column;\n        let r2 = r1 + rowSpan - 1;\n        let c2 = c1 + columnSpan - 1;\n        // Schedule a repaint of the cell content.\n        this.repaintRegion(region, r1, c1, r2, c2);\n    }\n    /**\n     * Handle a full data model reset.\n     */\n    _onModelReset(args) {\n        // Look up the various current section counts.\n        let nr = this._rowSections.count;\n        let nc = this._columnSections.count;\n        let nrh = this._rowHeaderSections.count;\n        let nch = this._columnHeaderSections.count;\n        // Compute the delta count for each region.\n        let dr = this._dataModel.rowCount('body') - nr;\n        let dc = this._dataModel.columnCount('body') - nc;\n        let drh = this._dataModel.columnCount('row-header') - nrh;\n        let dch = this._dataModel.rowCount('column-header') - nch;\n        // Update the row sections, if needed.\n        if (dr > 0) {\n            this._rowSections.insert(nr, dr);\n        }\n        else if (dr < 0) {\n            this._rowSections.remove(nr + dr, -dr);\n        }\n        // Update the column sections, if needed.\n        if (dc > 0) {\n            this._columnSections.insert(nc, dc);\n        }\n        else if (dc < 0) {\n            this._columnSections.remove(nc + dc, -dc);\n        }\n        // Update the row header sections, if needed.\n        if (drh > 0) {\n            this._rowHeaderSections.insert(nrh, drh);\n        }\n        else if (drh < 0) {\n            this._rowHeaderSections.remove(nrh + drh, -drh);\n        }\n        // Update the column header sections, if needed.\n        if (dch > 0) {\n            this._columnHeaderSections.insert(nch, dch);\n        }\n        else if (dch < 0) {\n            this._columnHeaderSections.remove(nch + dch, -dch);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * A signal handler for the renderer map `changed` signal.\n     */\n    _onRenderersChanged() {\n        this.repaintContent();\n    }\n    /**\n     * Handle the `'keydown'` event for the data grid.\n     */\n    _evtKeyDown(event) {\n        if (this._mousedown) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        else if (this._keyHandler) {\n            this._keyHandler.onKeyDown(this, event);\n        }\n    }\n    /**\n     * Handle the `'mousedown'` event for the data grid.\n     */\n    _evtMouseDown(event) {\n        // Ignore everything except the left mouse button.\n        if (event.button !== 0) {\n            return;\n        }\n        // Activate the grid.\n        this.activate();\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Add the extra document listeners.\n        document.addEventListener('keydown', this, true);\n        document.addEventListener('mouseup', this, true);\n        document.addEventListener('mousedown', this, true);\n        document.addEventListener('mousemove', this, true);\n        document.addEventListener('contextmenu', this, true);\n        // Flip the mousedown flag.\n        this._mousedown = true;\n        // Dispatch to the mouse handler.\n        if (this._mouseHandler) {\n            this._mouseHandler.onMouseDown(this, event);\n        }\n    }\n    /**\n     * Handle the `'mousemove'` event for the data grid.\n     */\n    _evtMouseMove(event) {\n        // Stop the event propagation if the mouse is down.\n        if (this._mousedown) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        // Bail if there is no mouse handler.\n        if (!this._mouseHandler) {\n            return;\n        }\n        // Dispatch to the mouse handler.\n        if (this._mousedown) {\n            this._mouseHandler.onMouseMove(this, event);\n        }\n        else {\n            this._mouseHandler.onMouseHover(this, event);\n        }\n    }\n    /**\n     * Handle the `'mouseup'` event for the data grid.\n     */\n    _evtMouseUp(event) {\n        // Ignore everything except the left mouse button.\n        if (event.button !== 0) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Dispatch to the mouse handler.\n        if (this._mouseHandler) {\n            this._mouseHandler.onMouseUp(this, event);\n        }\n        // Release the mouse.\n        this._releaseMouse();\n    }\n    /**\n     * Handle the `'dblclick'` event for the data grid.\n     */\n    _evtMouseDoubleClick(event) {\n        // Ignore everything except the left mouse button.\n        if (event.button !== 0) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Dispatch to the mouse handler.\n        if (this._mouseHandler) {\n            this._mouseHandler.onMouseDoubleClick(this, event);\n        }\n        // Release the mouse.\n        this._releaseMouse();\n    }\n    /**\n     * Handle the `'mouseleave'` event for the data grid.\n     */\n    _evtMouseLeave(event) {\n        if (this._mousedown) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        else if (this._mouseHandler) {\n            this._mouseHandler.onMouseLeave(this, event);\n        }\n    }\n    /**\n     * Handle the `'contextmenu'` event for the data grid.\n     */\n    _evtContextMenu(event) {\n        if (this._mousedown) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        else if (this._mouseHandler) {\n            this._mouseHandler.onContextMenu(this, event);\n        }\n    }\n    /**\n     * Handle the `'wheel'` event for the data grid.\n     */\n    _evtWheel(event) {\n        // Ignore the event if `accel` is held.\n        if (Platform.accelKey(event)) {\n            return;\n        }\n        // Bail early if there is no mouse handler.\n        if (!this._mouseHandler) {\n            return;\n        }\n        // Dispatch to the mouse handler.\n        this._mouseHandler.onWheel(this, event);\n    }\n    /**\n     * Release the mouse grab.\n     */\n    _releaseMouse() {\n        // Clear the mousedown flag.\n        this._mousedown = false;\n        // Relase the mouse handler.\n        if (this._mouseHandler) {\n            this._mouseHandler.release();\n        }\n        // Remove the document listeners.\n        document.removeEventListener('keydown', this, true);\n        document.removeEventListener('mouseup', this, true);\n        document.removeEventListener('mousedown', this, true);\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('contextmenu', this, true);\n    }\n    /**\n     * Refresh the dpi ratio.\n     */\n    _refreshDPI() {\n        // Get the best integral value for the dpi ratio.\n        let dpiRatio = Math.ceil(window.devicePixelRatio);\n        // Bail early if the computed dpi ratio has not changed.\n        if (this._dpiRatio === dpiRatio) {\n            return;\n        }\n        // Update the internal dpi ratio.\n        this._dpiRatio = dpiRatio;\n        // Schedule a repaint of the content.\n        this.repaintContent();\n        // Schedule a repaint of the overlay.\n        this.repaintOverlay();\n        // Update the canvas size for the new dpi ratio.\n        this._resizeCanvasIfNeeded(this._viewportWidth, this._viewportHeight);\n        // Ensure the canvas style is scaled for the new ratio.\n        this._canvas.style.width = `${this._canvas.width / this._dpiRatio}px`;\n        this._canvas.style.height = `${this._canvas.height / this._dpiRatio}px`;\n        // Ensure the overlay style is scaled for the new ratio.\n        this._overlay.style.width = `${this._overlay.width / this._dpiRatio}px`;\n        this._overlay.style.height = `${this._overlay.height / this._dpiRatio}px`;\n    }\n    /**\n     * Resize a row section immediately.\n     */\n    _resizeRow(index, size) {\n        // Look up the target section list.\n        let list = this._rowSections;\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Look up the old size of the section.\n        let oldSize = list.sizeOf(index);\n        // Normalize the new size of the section.\n        let newSize = list.clampSize(size);\n        // Bail early if the size does not change.\n        if (oldSize === newSize) {\n            return;\n        }\n        // Resize the section in the list.\n        list.resize(index, newSize);\n        // Get the current size of the viewport.\n        let vw = this._viewportWidth;\n        let vh = this._viewportHeight;\n        // If there is nothing to paint, sync the scroll state.\n        if (!this._viewport.isVisible || vw === 0 || vh === 0) {\n            this._syncScrollState();\n            return;\n        }\n        // Compute the size delta.\n        let delta = newSize - oldSize;\n        // Look up the column header height.\n        let hh = this.headerHeight;\n        // Compute the viewport offset of the section.\n        let offset = list.offsetOf(index) + hh - this._scrollY;\n        // Bail early if there is nothing to paint.\n        if (hh >= vh || offset >= vh) {\n            this._syncScrollState();\n            return;\n        }\n        // Update the scroll position if the section is not visible.\n        if (offset + oldSize <= hh) {\n            this._scrollY += delta;\n            this._syncScrollState();\n            return;\n        }\n        // Compute the paint origin of the section.\n        let pos = Math.max(hh, offset);\n        // Paint from the section onward if it spans the viewport.\n        if (offset + oldSize >= vh || offset + newSize >= vh) {\n            this.paintContent(0, pos, vw, vh - pos);\n            this._paintOverlay();\n            this._syncScrollState();\n            return;\n        }\n        // Compute the X blit dimensions.\n        let sx = 0;\n        let sw = vw;\n        let dx = 0;\n        // Compute the Y blit dimensions.\n        let sy;\n        let sh;\n        let dy;\n        if (offset + newSize <= hh) {\n            sy = hh - delta;\n            sh = vh - sy;\n            dy = hh;\n        }\n        else {\n            sy = offset + oldSize;\n            sh = vh - sy;\n            dy = sy + delta;\n        }\n        // Blit the valid content to the destination.\n        this._blitContent(this._canvas, sx, sy, sw, sh, dx, dy);\n        // Repaint the section if needed.\n        if (newSize > 0 && offset + newSize > hh) {\n            this.paintContent(0, pos, vw, offset + newSize - pos);\n        }\n        // Paint the trailing space as needed.\n        if (this._stretchLastRow && this.pageHeight > this.bodyHeight) {\n            let r = this._rowSections.count - 1;\n            let y = hh + this._rowSections.offsetOf(r);\n            this.paintContent(0, y, vw, vh - y);\n        }\n        else if (delta < 0) {\n            this.paintContent(0, vh + delta, vw, -delta);\n        }\n        // Repaint merged cells that are intersected by the resized row\n        // Otherwise it will be cut in two by the valid content, and drawn incorrectly\n        for (const rgn of ['body', 'row-header']) {\n            const cellGroups = CellGroup.getCellGroupsAtRow(this.dataModel, rgn, index);\n            let paintRgn = {\n                region: rgn,\n                xMin: 0,\n                xMax: 0,\n                yMin: 0,\n                yMax: 0\n            };\n            let backgroundColor = undefined;\n            switch (rgn) {\n                case 'body':\n                    paintRgn.xMin = this.headerWidth;\n                    paintRgn.xMax = this.headerWidth + this.bodyWidth;\n                    paintRgn.yMin = this.headerHeight;\n                    paintRgn.yMax = this.headerHeight + this.bodyHeight;\n                    backgroundColor = this._style.backgroundColor;\n                    break;\n                case 'row-header':\n                    paintRgn.xMin = 0;\n                    paintRgn.xMax = this.headerWidth;\n                    paintRgn.yMin = this.headerHeight;\n                    paintRgn.yMax = this.headerHeight + this.bodyHeight;\n                    backgroundColor = this._style.headerBackgroundColor;\n                    break;\n            }\n            this._paintMergedCells(cellGroups, paintRgn, backgroundColor);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Sync the scroll state.\n        this._syncScrollState();\n    }\n    /**\n     * Resize a column section immediately.\n     */\n    _resizeColumn(index, size) {\n        // Look up the target section list.\n        let list = this._columnSections;\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        const adjustedSize = size !== null && size !== void 0 ? size : this._getMaxWidthInColumn(index, 'body');\n        if (!adjustedSize || adjustedSize == 0) {\n            return;\n        }\n        // Look up the old size of the section.\n        let oldSize = list.sizeOf(index);\n        // Normalize the new size of the section.\n        let newSize = list.clampSize(adjustedSize);\n        // Bail early if the size does not change.\n        if (oldSize === newSize) {\n            return;\n        }\n        // Resize the section in the list.\n        list.resize(index, newSize);\n        // Get the current size of the viewport.\n        let vw = this._viewportWidth;\n        let vh = this._viewportHeight;\n        // If there is nothing to paint, sync the scroll state.\n        if (!this._viewport.isVisible || vw === 0 || vh === 0) {\n            this._syncScrollState();\n            return;\n        }\n        // Compute the size delta.\n        let delta = newSize - oldSize;\n        // Look up the row header width.\n        let hw = this.headerWidth;\n        // Compute the viewport offset of the section.\n        let offset = list.offsetOf(index) + hw - this._scrollX;\n        // Bail early if there is nothing to paint.\n        if (hw >= vw || offset >= vw) {\n            this._syncScrollState();\n            return;\n        }\n        // Update the scroll position if the section is not visible.\n        if (offset + oldSize <= hw) {\n            this._scrollX += delta;\n            this._syncScrollState();\n            return;\n        }\n        // Compute the paint origin of the section.\n        let pos = Math.max(hw, offset);\n        // Paint from the section onward if it spans the viewport.\n        if (offset + oldSize >= vw || offset + newSize >= vw) {\n            this.paintContent(pos, 0, vw - pos, vh);\n            this._paintOverlay();\n            this._syncScrollState();\n            return;\n        }\n        // Compute the Y blit dimensions.\n        let sy = 0;\n        let sh = vh;\n        let dy = 0;\n        // Compute the X blit dimensions.\n        let sx;\n        let sw;\n        let dx;\n        if (offset + newSize <= hw) {\n            sx = hw - delta;\n            sw = vw - sx;\n            dx = hw;\n        }\n        else {\n            sx = offset + oldSize;\n            sw = vw - sx;\n            dx = sx + delta;\n        }\n        // Blit the valid content to the destination.\n        this._blitContent(this._canvas, sx, sy, sw, sh, dx, dy);\n        // Repaint the section if needed.\n        if (newSize > 0 && offset + newSize > hw) {\n            this.paintContent(pos, 0, offset + newSize - pos, vh);\n        }\n        // Paint the trailing space as needed.\n        if (this._stretchLastColumn && this.pageWidth > this.bodyWidth) {\n            let c = this._columnSections.count - 1;\n            let x = hw + this._columnSections.offsetOf(c);\n            this.paintContent(x, 0, vw - x, vh);\n        }\n        else if (delta < 0) {\n            this.paintContent(vw + delta, 0, -delta, vh);\n        }\n        // Repaint merged cells that are intersected by the resized column\n        // Otherwise it will be cut in two by the valid content, and drawn incorrectly\n        for (const rgn of ['body', 'column-header']) {\n            const cellGroups = CellGroup.getCellGroupsAtColumn(this.dataModel, rgn, index);\n            let paintRgn = {\n                region: rgn,\n                xMin: 0,\n                xMax: 0,\n                yMin: 0,\n                yMax: 0\n            };\n            let backgroundColor = undefined;\n            switch (rgn) {\n                case 'body':\n                    paintRgn.xMin = this.headerWidth;\n                    paintRgn.xMax = this.headerWidth + this.bodyWidth;\n                    paintRgn.yMin = this.headerHeight;\n                    paintRgn.yMax = this.headerHeight + this.bodyHeight;\n                    backgroundColor = this._style.backgroundColor;\n                    break;\n                case 'column-header':\n                    paintRgn.xMin = this.headerWidth;\n                    paintRgn.xMax = this.headerWidth + this.bodyWidth;\n                    paintRgn.yMin = 0;\n                    paintRgn.yMax = this.headerHeight;\n                    backgroundColor = this._style.headerBackgroundColor;\n                    break;\n            }\n            this._paintMergedCells(cellGroups, paintRgn, backgroundColor);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Sync the scroll state after painting.\n        this._syncScrollState();\n    }\n    /**\n     * Resize a row header section immediately.\n     */\n    _resizeRowHeader(index, size) {\n        // Look up the target section list.\n        let list = this._rowHeaderSections;\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        const adjustedSize = size !== null && size !== void 0 ? size : this._getMaxWidthInColumn(index, 'row-header');\n        if (!adjustedSize || adjustedSize == 0) {\n            return;\n        }\n        // Look up the old size of the section.\n        let oldSize = list.sizeOf(index);\n        // Normalize the new size of the section.\n        let newSize = list.clampSize(adjustedSize);\n        // Bail early if the size does not change.\n        if (oldSize === newSize) {\n            return;\n        }\n        // Resize the section in the list.\n        list.resize(index, newSize);\n        // Get the current size of the viewport.\n        let vw = this._viewportWidth;\n        let vh = this._viewportHeight;\n        // If there is nothing to paint, sync the scroll state.\n        if (!this._viewport.isVisible || vw === 0 || vh === 0) {\n            this._syncScrollState();\n            return;\n        }\n        // Compute the size delta.\n        let delta = newSize - oldSize;\n        // Look up the offset of the section.\n        let offset = list.offsetOf(index);\n        // Bail early if the section is fully outside the viewport.\n        if (offset >= vw) {\n            this._syncScrollState();\n            return;\n        }\n        // Paint the entire tail if the section spans the viewport.\n        if (offset + oldSize >= vw || offset + newSize >= vw) {\n            this.paintContent(offset, 0, vw - offset, vh);\n            this._paintOverlay();\n            this._syncScrollState();\n            return;\n        }\n        // Compute the blit content dimensions.\n        let sx = offset + oldSize;\n        let sy = 0;\n        let sw = vw - sx;\n        let sh = vh;\n        let dx = sx + delta;\n        let dy = 0;\n        // Blit the valid content to the destination.\n        this._blitContent(this._canvas, sx, sy, sw, sh, dx, dy);\n        // Repaint the header section if needed.\n        if (newSize > 0) {\n            this.paintContent(offset, 0, newSize, vh);\n        }\n        // Paint the trailing space as needed.\n        if (this._stretchLastColumn && this.pageWidth > this.bodyWidth) {\n            let c = this._columnSections.count - 1;\n            let x = this.headerWidth + this._columnSections.offsetOf(c);\n            this.paintContent(x, 0, vw - x, vh);\n        }\n        else if (delta < 0) {\n            this.paintContent(vw + delta, 0, -delta, vh);\n        }\n        // Repaint merged cells that are intersected by the resized row\n        // Otherwise it will be cut in two by the valid content, and drawn incorrectly\n        for (const rgn of [\n            'corner-header',\n            'row-header'\n        ]) {\n            const cellGroups = CellGroup.getCellGroupsAtColumn(this.dataModel, rgn, index);\n            let paintRgn = {\n                region: rgn,\n                xMin: 0,\n                xMax: 0,\n                yMin: 0,\n                yMax: 0\n            };\n            switch (rgn) {\n                case 'corner-header':\n                    paintRgn.xMin = 0;\n                    paintRgn.xMax = this.headerWidth;\n                    paintRgn.yMin = 0;\n                    paintRgn.yMax = this.headerHeight;\n                    break;\n                case 'row-header':\n                    paintRgn.xMin = 0;\n                    paintRgn.xMax = this.headerWidth;\n                    paintRgn.yMin = this.headerHeight;\n                    paintRgn.yMax = this.headerHeight + this.bodyHeight;\n                    break;\n            }\n            this._paintMergedCells(cellGroups, paintRgn, this._style.headerBackgroundColor);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Sync the scroll state after painting.\n        this._syncScrollState();\n    }\n    /**\n     * Resize a column header section immediately.\n     */\n    _resizeColumnHeader(index, size) {\n        // Look up the target section list.\n        let list = this._columnHeaderSections;\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Look up the old size of the section.\n        let oldSize = list.sizeOf(index);\n        // Normalize the new size of the section.\n        let newSize = list.clampSize(size);\n        // Bail early if the size does not change.\n        if (oldSize === newSize) {\n            return;\n        }\n        // Resize the section in the list.\n        list.resize(index, newSize);\n        // Get the current size of the viewport.\n        let vw = this._viewportWidth;\n        let vh = this._viewportHeight;\n        // If there is nothing to paint, sync the scroll state.\n        if (!this._viewport.isVisible || vw === 0 || vh === 0) {\n            this._syncScrollState();\n            return;\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Compute the size delta.\n        let delta = newSize - oldSize;\n        // Look up the offset of the section.\n        let offset = list.offsetOf(index);\n        // Bail early if the section is fully outside the viewport.\n        if (offset >= vh) {\n            this._syncScrollState();\n            return;\n        }\n        // Paint the entire tail if the section spans the viewport.\n        if (offset + oldSize >= vh || offset + newSize >= vh) {\n            this.paintContent(0, offset, vw, vh - offset);\n            this._paintOverlay();\n            this._syncScrollState();\n            return;\n        }\n        // Compute the blit content dimensions.\n        let sx = 0;\n        let sy = offset + oldSize;\n        let sw = vw;\n        let sh = vh - sy;\n        let dx = 0;\n        let dy = sy + delta;\n        // Blit the valid contents to the destination.\n        this._blitContent(this._canvas, sx, sy, sw, sh, dx, dy);\n        // Repaint the header section if needed.\n        if (newSize > 0) {\n            this.paintContent(0, offset, vw, newSize);\n        }\n        // Paint the trailing space as needed.\n        if (this._stretchLastRow && this.pageHeight > this.bodyHeight) {\n            let r = this._rowSections.count - 1;\n            let y = this.headerHeight + this._rowSections.offsetOf(r);\n            this.paintContent(0, y, vw, vh - y);\n        }\n        else if (delta < 0) {\n            this.paintContent(0, vh + delta, vw, -delta);\n        }\n        // Repaint merged cells that are intersected by the resized row\n        // Otherwise it will be cut in two by the valid content, and drawn incorrectly\n        for (const rgn of [\n            'corner-header',\n            'column-header'\n        ]) {\n            const cellGroups = CellGroup.getCellGroupsAtRow(this.dataModel, rgn, index);\n            let paintRgn = {\n                region: rgn,\n                xMin: 0,\n                xMax: 0,\n                yMin: 0,\n                yMax: 0\n            };\n            switch (rgn) {\n                case 'corner-header':\n                    paintRgn.xMin = 0;\n                    paintRgn.xMax = this.headerWidth;\n                    paintRgn.yMin = 0;\n                    paintRgn.yMax = this.headerHeight;\n                    break;\n                case 'column-header':\n                    paintRgn.xMin = this.headerWidth;\n                    paintRgn.xMax = this.headerWidth + this.bodyWidth;\n                    paintRgn.yMin = 0;\n                    paintRgn.yMax = this.headerHeight;\n                    break;\n            }\n            this._paintMergedCells(cellGroups, paintRgn, this._style.headerBackgroundColor);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Sync the scroll state after painting.\n        this._syncScrollState();\n    }\n    /**\n     * Scroll immediately to the specified offset position.\n     */\n    _scrollTo(x, y) {\n        // Bail if no data model found.\n        if (!this.dataModel) {\n            return;\n        }\n        // Floor and clamp the position to the allowable range.\n        x = Math.max(0, Math.min(Math.floor(x), this.maxScrollX));\n        y = Math.max(0, Math.min(Math.floor(y), this.maxScrollY));\n        // Synchronize the scroll bar values.\n        this._hScrollBar.value = x;\n        this._vScrollBar.value = y;\n        // Compute the delta scroll amount.\n        let dx = x - this._scrollX;\n        let dy = y - this._scrollY;\n        // Bail early if there is no effective scroll.\n        if (dx === 0 && dy === 0) {\n            return;\n        }\n        // Bail early if the viewport is not visible.\n        if (!this._viewport.isVisible) {\n            this._scrollX = x;\n            this._scrollY = y;\n            return;\n        }\n        // Get the current size of the viewport.\n        let width = this._viewportWidth;\n        let height = this._viewportHeight;\n        // Bail early if the viewport is empty.\n        if (width === 0 || height === 0) {\n            this._scrollX = x;\n            this._scrollY = y;\n            return;\n        }\n        // Get the visible content origin.\n        let contentX = this.headerWidth;\n        let contentY = this.headerHeight;\n        // Get the visible content dimensions.\n        let contentWidth = width - contentX;\n        let contentHeight = height - contentY;\n        // Bail early if there is no content to draw.\n        if (contentWidth <= 0 && contentHeight <= 0) {\n            this._scrollX = x;\n            this._scrollY = y;\n            return;\n        }\n        // Compute the area which needs painting for the `dx` scroll.\n        let dxArea = 0;\n        if (dx !== 0 && contentWidth > 0) {\n            if (Math.abs(dx) >= contentWidth) {\n                dxArea = contentWidth * height;\n            }\n            else {\n                dxArea = Math.abs(dx) * height;\n            }\n        }\n        // Compute the area which needs painting for the `dy` scroll.\n        let dyArea = 0;\n        if (dy !== 0 && contentHeight > 0) {\n            if (Math.abs(dy) >= contentHeight) {\n                dyArea = width * contentHeight;\n            }\n            else {\n                dyArea = width * Math.abs(dy);\n            }\n        }\n        // If the area sum is larger than the total, paint everything.\n        if (dxArea + dyArea >= width * height) {\n            this._scrollX = x;\n            this._scrollY = y;\n            this.paintContent(0, 0, width, height);\n            this._paintOverlay();\n            return;\n        }\n        // Update the internal Y scroll position.\n        this._scrollY = y;\n        // Scroll the Y axis if needed. If the scroll distance exceeds\n        // the visible height, paint everything. Otherwise, blit the\n        // valid content and paint the dirty region.\n        if (dy !== 0 && contentHeight > 0) {\n            if (Math.abs(dy) >= contentHeight) {\n                this.paintContent(0, contentY, width, contentHeight);\n            }\n            else {\n                const x = 0;\n                const y = dy < 0 ? contentY : contentY + dy;\n                const w = width;\n                const h = contentHeight - Math.abs(dy);\n                this._blitContent(this._canvas, x, y, w, h, x, y - dy);\n                this.paintContent(0, dy < 0 ? contentY : height - dy, width, Math.abs(dy));\n                // Repaint merged cells that are intersected by the scroll level\n                // Otherwise it will be cut in two by the valid content, and drawn incorrectly\n                for (const rgn of ['body', 'row-header']) {\n                    const cellgroups = CellGroup.getCellGroupsAtRegion(this.dataModel, rgn);\n                    let paintRgn = {\n                        region: rgn,\n                        xMin: 0,\n                        xMax: 0,\n                        yMin: 0,\n                        yMax: 0\n                    };\n                    let backgroundColor = undefined;\n                    switch (rgn) {\n                        case 'body':\n                            paintRgn.xMin = this.headerWidth;\n                            paintRgn.xMax = this.headerWidth + this.bodyWidth;\n                            paintRgn.yMin = this.headerHeight;\n                            paintRgn.yMax = this.headerHeight + this.bodyHeight;\n                            backgroundColor = this._style.backgroundColor;\n                            break;\n                        case 'row-header':\n                            paintRgn.xMin = 0;\n                            paintRgn.xMax = this.headerWidth;\n                            paintRgn.yMin = this.headerHeight;\n                            paintRgn.yMax = this.headerHeight + this.bodyHeight;\n                            backgroundColor = this._style.headerBackgroundColor;\n                            break;\n                    }\n                    this._paintMergedCells(cellgroups, paintRgn, backgroundColor);\n                }\n            }\n        }\n        // Update the internal X scroll position.\n        this._scrollX = x;\n        // Scroll the X axis if needed. If the scroll distance exceeds\n        // the visible width, paint everything. Otherwise, blit the\n        // valid content and paint the dirty region.\n        if (dx !== 0 && contentWidth > 0) {\n            if (Math.abs(dx) >= contentWidth) {\n                this.paintContent(contentX, 0, contentWidth, height);\n            }\n            else {\n                const x = dx < 0 ? contentX : contentX + dx;\n                const y = 0;\n                const w = contentWidth - Math.abs(dx);\n                const h = height;\n                this._blitContent(this._canvas, x, y, w, h, x - dx, y);\n                this.paintContent(dx < 0 ? contentX : width - dx, 0, Math.abs(dx), height);\n                // Repaint merged cells that are intersected by the scroll level\n                // Otherwise it will be cut in two by the valid content, and drawn incorrectly\n                for (const rgn of ['body', 'column-header']) {\n                    const cellGroups = CellGroup.getCellGroupsAtRegion(this.dataModel, rgn);\n                    let paintRgn = {\n                        region: rgn,\n                        xMin: 0,\n                        xMax: 0,\n                        yMin: 0,\n                        yMax: 0\n                    };\n                    let backgroundColor = undefined;\n                    switch (rgn) {\n                        case 'body':\n                            paintRgn.xMin = this.headerWidth;\n                            paintRgn.xMax = this.headerWidth + this.bodyWidth;\n                            paintRgn.yMin = this.headerHeight;\n                            paintRgn.yMax = this.headerHeight + this.bodyHeight;\n                            backgroundColor = this._style.backgroundColor;\n                            break;\n                        case 'column-header':\n                            paintRgn.xMin = this.headerWidth;\n                            paintRgn.xMax = this.headerWidth + this.bodyWidth;\n                            paintRgn.yMin = 0;\n                            paintRgn.yMax = this.headerHeight;\n                            backgroundColor = this._style.headerBackgroundColor;\n                            break;\n                    }\n                    this._paintMergedCells(cellGroups, paintRgn, backgroundColor);\n                }\n            }\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n    }\n    /**\n     * Blit content into the on-screen grid canvas.\n     *\n     * The rect should be expressed in viewport coordinates.\n     *\n     * This automatically accounts for the dpi ratio.\n     */\n    _blitContent(source, x, y, w, h, dx, dy) {\n        // Scale the blit coordinates by the dpi ratio.\n        x *= this._dpiRatio;\n        y *= this._dpiRatio;\n        w *= this._dpiRatio;\n        h *= this._dpiRatio;\n        dx *= this._dpiRatio;\n        dy *= this._dpiRatio;\n        // Save the current gc state.\n        this._canvasGC.save();\n        // Set the transform to the identity matrix.\n        this._canvasGC.setTransform(1, 0, 0, 1, 0, 0);\n        // Draw the specified content.\n        this._canvasGC.drawImage(source, x, y, w, h, dx, dy, w, h);\n        // Restore the gc state.\n        this._canvasGC.restore();\n    }\n    /**\n     * Paint the grid content for the given dirty rect.\n     *\n     * The rect should be expressed in valid viewport coordinates.\n     *\n     * This is the primary paint entry point. The individual `_draw*`\n     * methods should not be invoked directly. This method dispatches\n     * to the drawing methods in the correct order.\n     */\n    paintContent(rx, ry, rw, rh) {\n        // Scale the canvas and buffer GC for the dpi ratio.\n        this._canvasGC.setTransform(this._dpiRatio, 0, 0, this._dpiRatio, 0, 0);\n        this._bufferGC.setTransform(this._dpiRatio, 0, 0, this._dpiRatio, 0, 0);\n        // Clear the dirty rect of all content.\n        this._canvasGC.clearRect(rx, ry, rw, rh);\n        // Draw the void region.\n        this._drawVoidRegion(rx, ry, rw, rh);\n        // Draw the body region.\n        this._drawBodyRegion(rx, ry, rw, rh);\n        // Draw the row header region.\n        this._drawRowHeaderRegion(rx, ry, rw, rh);\n        // Draw the column header region.\n        this._drawColumnHeaderRegion(rx, ry, rw, rh);\n        // Draw the corner header region.\n        this.drawCornerHeaderRegion(rx, ry, rw, rh);\n    }\n    /**\n     * Resizes body column headers so their text fits\n     * without clipping or wrapping.\n     * @param dataModel\n     */\n    _fitBodyColumnHeaders(dataModel, padding, numCols) {\n        // Get the body column count\n        const bodyColumnCount = numCols === undefined ? dataModel.columnCount('body') : numCols;\n        for (let i = 0; i < bodyColumnCount; i++) {\n            /*\n              if we're working with nested column headers,\n              retrieve the nested levels and iterate on them.\n            */\n            const numRows = dataModel.rowCount('column-header');\n            /*\n              Calculate the maximum text width, across\n              all nested rows under a given column number.\n            */\n            let maxWidth = 0;\n            for (let j = 0; j < numRows; j++) {\n                const config = DataGrid._getConfig(dataModel, j, i, 'column-header');\n                const textWidth = this._getCellTextWidth(config);\n                // Update the maximum width for that column.\n                maxWidth = Math.max(maxWidth, textWidth);\n            }\n            /*\n              Send a resize message with new width for the given column.\n              Using a padding of 15 pixels to leave some room.\n            */\n            this.resizeColumn('body', i, maxWidth + padding);\n        }\n    }\n    /**\n     * Resizes row header columns so their text fits\n     * without clipping or wrapping.\n     * @param dataModel\n     */\n    _fitRowColumnHeaders(dataModel, padding, numCols) {\n        /*\n          if we're working with nested row headers,\n          retrieve the nested levels and iterate on them.\n        */\n        const rowColumnCount = numCols === undefined ? dataModel.columnCount('row-header') : numCols;\n        for (let i = 0; i < rowColumnCount; i++) {\n            const numCols = dataModel.rowCount('column-header');\n            /*\n              Calculate the maximum text width, across\n              all nested columns under a given row index.\n            */\n            let maxWidth = 0;\n            for (let j = 0; j < numCols; j++) {\n                const config = DataGrid._getConfig(dataModel, j, i, 'corner-header');\n                const textWidth = this._getCellTextWidth(config);\n                maxWidth = Math.max(maxWidth, textWidth);\n            }\n            /*\n              Send a resize message with new width for the given column.\n              Using a padding of 15 pixels to leave some room.\n            */\n            this.resizeColumn('row-header', i, maxWidth + padding);\n        }\n    }\n    /**\n     * Paint the overlay content for the entire grid.\n     *\n     * This is the primary overlay paint entry point. The individual\n     * `_draw*` methods should not be invoked directly. This method\n     * dispatches to the drawing methods in the correct order.\n     */\n    _paintOverlay() {\n        // Scale the overlay GC for the dpi ratio.\n        this._overlayGC.setTransform(this._dpiRatio, 0, 0, this._dpiRatio, 0, 0);\n        // Clear the overlay of all content.\n        this._overlayGC.clearRect(0, 0, this._overlay.width, this._overlay.height);\n        // Draw the body selections.\n        this._drawBodySelections();\n        // Draw the row header selections.\n        this._drawRowHeaderSelections();\n        // Draw the column header selections.\n        this._drawColumnHeaderSelections();\n        // Draw the cursor.\n        this._drawCursor();\n        // Draw the shadows.\n        this._drawShadows();\n    }\n    /**\n     * Draw the void region for the dirty rect.\n     */\n    _drawVoidRegion(rx, ry, rw, rh) {\n        // Look up the void color.\n        let color = this._style.voidColor;\n        // Bail if there is no void color.\n        if (!color) {\n            return;\n        }\n        // Fill the dirty rect with the void color.\n        this._canvasGC.fillStyle = color;\n        this._canvasGC.fillRect(rx, ry, rw, rh);\n    }\n    /**\n     * Draw the body region which intersects the dirty rect.\n     */\n    _drawBodyRegion(rx, ry, rw, rh) {\n        // Get the visible content dimensions.\n        let contentW = this._columnSections.length - this._scrollX;\n        let contentH = this._rowSections.length - this._scrollY;\n        // Bail if there is no content to draw.\n        if (contentW <= 0 || contentH <= 0) {\n            return;\n        }\n        // Get the visible content origin.\n        let contentX = this.headerWidth;\n        let contentY = this.headerHeight;\n        // Bail if the dirty rect does not intersect the content area.\n        if (rx + rw <= contentX) {\n            return;\n        }\n        if (ry + rh <= contentY) {\n            return;\n        }\n        if (rx >= contentX + contentW) {\n            return;\n        }\n        if (ry >= contentY + contentH) {\n            return;\n        }\n        // Fetch the geometry.\n        let bh = this.bodyHeight;\n        let bw = this.bodyWidth;\n        let ph = this.pageHeight;\n        let pw = this.pageWidth;\n        // Get the upper and lower bounds of the dirty content area.\n        let x1 = Math.max(rx, contentX);\n        let y1 = Math.max(ry, contentY);\n        let x2 = Math.min(rx + rw - 1, contentX + contentW - 1);\n        let y2 = Math.min(ry + rh - 1, contentY + contentH - 1);\n        // Convert the dirty content bounds into cell bounds.\n        let r1 = this._rowSections.indexOf(y1 - contentY + this._scrollY);\n        let c1 = this._columnSections.indexOf(x1 - contentX + this._scrollX);\n        let r2 = this._rowSections.indexOf(y2 - contentY + this._scrollY);\n        let c2 = this._columnSections.indexOf(x2 - contentX + this._scrollX);\n        // Fetch the max row and column.\n        let maxRow = this._rowSections.count - 1;\n        let maxColumn = this._columnSections.count - 1;\n        // Handle a dirty content area larger than the cell count.\n        if (r2 < 0) {\n            r2 = maxRow;\n        }\n        if (c2 < 0) {\n            c2 = maxColumn;\n        }\n        // Convert the cell bounds back to visible coordinates.\n        let x = this._columnSections.offsetOf(c1) + contentX - this._scrollX;\n        let y = this._rowSections.offsetOf(r1) + contentY - this._scrollY;\n        // Set up the paint region size variables.\n        let width = 0;\n        let height = 0;\n        // Allocate the section sizes arrays.\n        let rowSizes = new Array(r2 - r1 + 1);\n        let columnSizes = new Array(c2 - c1 + 1);\n        // Get the row sizes for the region.\n        for (let j = r1; j <= r2; ++j) {\n            let size = this._rowSections.sizeOf(j);\n            rowSizes[j - r1] = size;\n            height += size;\n        }\n        // Get the column sizes for the region.\n        for (let i = c1; i <= c2; ++i) {\n            let size = this._columnSections.sizeOf(i);\n            columnSizes[i - c1] = size;\n            width += size;\n        }\n        // Adjust the geometry if the last row is streched.\n        if (this._stretchLastRow && ph > bh && r2 === maxRow) {\n            let dh = this.pageHeight - this.bodyHeight;\n            rowSizes[rowSizes.length - 1] += dh;\n            height += dh;\n            y2 += dh;\n        }\n        // Adjust the geometry if the last column is streched.\n        if (this._stretchLastColumn && pw > bw && c2 === maxColumn) {\n            let dw = this.pageWidth - this.bodyWidth;\n            columnSizes[columnSizes.length - 1] += dw;\n            width += dw;\n            x2 += dw;\n        }\n        // Create the paint region object.\n        let rgn = {\n            region: 'body',\n            xMin: x1,\n            yMin: y1,\n            xMax: x2,\n            yMax: y2,\n            x,\n            y,\n            width,\n            height,\n            row: r1,\n            column: c1,\n            rowSizes,\n            columnSizes\n        };\n        // Draw the background.\n        this._drawBackground(rgn, this._style.backgroundColor);\n        // Draw the row background.\n        this._drawRowBackground(rgn, this._style.rowBackgroundColor);\n        // Draw the column background.\n        this._drawColumnBackground(rgn, this._style.columnBackgroundColor);\n        // Draw the cell content for the paint region.\n        this._drawCells(rgn);\n        // Draw the horizontal grid lines.\n        this._drawHorizontalGridLines(rgn, this._style.horizontalGridLineColor || this._style.gridLineColor);\n        // Draw the vertical grid lines.\n        this._drawVerticalGridLines(rgn, this._style.verticalGridLineColor || this._style.gridLineColor);\n        // Get the cellgroups from the cell-region that intersects with the paint region\n        const cellGroups = CellGroup.getCellGroupsAtRegion(this.dataModel, rgn.region).filter(group => {\n            return this.cellGroupInteresectsRegion(group, rgn);\n        });\n        // Draw merged cells\n        this._paintMergedCells(cellGroups, rgn, this._style.backgroundColor);\n    }\n    /**\n     * Draw the row header region which intersects the dirty rect.\n     */\n    _drawRowHeaderRegion(rx, ry, rw, rh) {\n        // Get the visible content dimensions.\n        let contentW = this.headerWidth;\n        let contentH = this.bodyHeight - this._scrollY;\n        // Bail if there is no content to draw.\n        if (contentW <= 0 || contentH <= 0) {\n            return;\n        }\n        // Get the visible content origin.\n        let contentX = 0;\n        let contentY = this.headerHeight;\n        // Bail if the dirty rect does not intersect the content area.\n        if (rx + rw <= contentX) {\n            return;\n        }\n        if (ry + rh <= contentY) {\n            return;\n        }\n        if (rx >= contentX + contentW) {\n            return;\n        }\n        if (ry >= contentY + contentH) {\n            return;\n        }\n        // Fetch the geometry.\n        let bh = this.bodyHeight;\n        let ph = this.pageHeight;\n        // Get the upper and lower bounds of the dirty content area.\n        let x1 = rx;\n        let y1 = Math.max(ry, contentY);\n        let x2 = Math.min(rx + rw - 1, contentX + contentW - 1);\n        let y2 = Math.min(ry + rh - 1, contentY + contentH - 1);\n        // Convert the dirty content bounds into cell bounds.\n        let r1 = this._rowSections.indexOf(y1 - contentY + this._scrollY);\n        let c1 = this._rowHeaderSections.indexOf(x1);\n        let r2 = this._rowSections.indexOf(y2 - contentY + this._scrollY);\n        let c2 = this._rowHeaderSections.indexOf(x2);\n        // Fetch max row and column.\n        let maxRow = this._rowSections.count - 1;\n        let maxColumn = this._rowHeaderSections.count - 1;\n        // Handle a dirty content area larger than the cell count.\n        if (r2 < 0) {\n            r2 = maxRow;\n        }\n        if (c2 < 0) {\n            c2 = maxColumn;\n        }\n        // Convert the cell bounds back to visible coordinates.\n        let x = this._rowHeaderSections.offsetOf(c1);\n        let y = this._rowSections.offsetOf(r1) + contentY - this._scrollY;\n        // Set up the paint region size variables.\n        let width = 0;\n        let height = 0;\n        // Allocate the section sizes arrays.\n        let rowSizes = new Array(r2 - r1 + 1);\n        let columnSizes = new Array(c2 - c1 + 1);\n        // Get the row sizes for the region.\n        for (let j = r1; j <= r2; ++j) {\n            let size = this._rowSections.sizeOf(j);\n            rowSizes[j - r1] = size;\n            height += size;\n        }\n        // Get the column sizes for the region.\n        for (let i = c1; i <= c2; ++i) {\n            let size = this._rowHeaderSections.sizeOf(i);\n            columnSizes[i - c1] = size;\n            width += size;\n        }\n        // Adjust the geometry if the last row is stretched.\n        if (this._stretchLastRow && ph > bh && r2 === maxRow) {\n            let dh = this.pageHeight - this.bodyHeight;\n            rowSizes[rowSizes.length - 1] += dh;\n            height += dh;\n            y2 += dh;\n        }\n        // Create the paint region object.\n        let rgn = {\n            region: 'row-header',\n            xMin: x1,\n            yMin: y1,\n            xMax: x2,\n            yMax: y2,\n            x,\n            y,\n            width,\n            height,\n            row: r1,\n            column: c1,\n            rowSizes,\n            columnSizes\n        };\n        // Draw the background.\n        this._drawBackground(rgn, this._style.headerBackgroundColor);\n        // Draw the cell content for the paint region.\n        this._drawCells(rgn);\n        // Draw the horizontal grid lines.\n        this._drawHorizontalGridLines(rgn, this._style.headerHorizontalGridLineColor ||\n            this._style.headerGridLineColor);\n        // Draw the vertical grid lines.\n        this._drawVerticalGridLines(rgn, this._style.headerVerticalGridLineColor || this._style.headerGridLineColor);\n        // Get the cellgroups from the cell-region that intersects with the paint region\n        const cellGroups = CellGroup.getCellGroupsAtRegion(this.dataModel, rgn.region).filter(group => {\n            return this.cellGroupInteresectsRegion(group, rgn);\n        });\n        // Draw merged cells\n        this._paintMergedCells(cellGroups, rgn, this._style.headerBackgroundColor);\n    }\n    /**\n     * Draw the column header region which intersects the dirty rect.\n     */\n    _drawColumnHeaderRegion(rx, ry, rw, rh) {\n        // Get the visible content dimensions.\n        let contentW = this.bodyWidth - this._scrollX;\n        let contentH = this.headerHeight;\n        // Bail if there is no content to draw.\n        if (contentW <= 0 || contentH <= 0) {\n            return;\n        }\n        // Get the visible content origin.\n        let contentX = this.headerWidth;\n        let contentY = 0;\n        // Bail if the dirty rect does not intersect the content area.\n        if (rx + rw <= contentX) {\n            return;\n        }\n        if (ry + rh <= contentY) {\n            return;\n        }\n        if (rx >= contentX + contentW) {\n            return;\n        }\n        if (ry >= contentY + contentH) {\n            return;\n        }\n        // Fetch the geometry.\n        let bw = this.bodyWidth;\n        let pw = this.pageWidth;\n        // Get the upper and lower bounds of the dirty content area.\n        let x1 = Math.max(rx, contentX);\n        let y1 = ry;\n        let x2 = Math.min(rx + rw - 1, contentX + contentW - 1);\n        let y2 = Math.min(ry + rh - 1, contentY + contentH - 1);\n        // Convert the dirty content bounds into cell bounds.\n        let r1 = this._columnHeaderSections.indexOf(y1);\n        let c1 = this._columnSections.indexOf(x1 - contentX + this._scrollX);\n        let r2 = this._columnHeaderSections.indexOf(y2);\n        let c2 = this._columnSections.indexOf(x2 - contentX + this._scrollX);\n        // Fetch the max row and column.\n        let maxRow = this._columnHeaderSections.count - 1;\n        let maxColumn = this._columnSections.count - 1;\n        // Handle a dirty content area larger than the cell count.\n        if (r2 < 0) {\n            r2 = maxRow;\n        }\n        if (c2 < 0) {\n            c2 = maxColumn;\n        }\n        // Convert the cell bounds back to visible coordinates.\n        let x = this._columnSections.offsetOf(c1) + contentX - this._scrollX;\n        let y = this._columnHeaderSections.offsetOf(r1);\n        // Set up the paint region size variables.\n        let width = 0;\n        let height = 0;\n        // Allocate the section sizes arrays.\n        let rowSizes = new Array(r2 - r1 + 1);\n        let columnSizes = new Array(c2 - c1 + 1);\n        // Get the row sizes for the region.\n        for (let j = r1; j <= r2; ++j) {\n            let size = this._columnHeaderSections.sizeOf(j);\n            rowSizes[j - r1] = size;\n            height += size;\n        }\n        // Get the column sizes for the region.\n        for (let i = c1; i <= c2; ++i) {\n            let size = this._columnSections.sizeOf(i);\n            columnSizes[i - c1] = size;\n            width += size;\n        }\n        // Adjust the geometry if the last column is stretched.\n        if (this._stretchLastColumn && pw > bw && c2 === maxColumn) {\n            let dw = this.pageWidth - this.bodyWidth;\n            columnSizes[columnSizes.length - 1] += dw;\n            width += dw;\n            x2 += dw;\n        }\n        // Create the paint region object.\n        let rgn = {\n            region: 'column-header',\n            xMin: x1,\n            yMin: y1,\n            xMax: x2,\n            yMax: y2,\n            x,\n            y,\n            width,\n            height,\n            row: r1,\n            column: c1,\n            rowSizes,\n            columnSizes\n        };\n        // Draw the background.\n        this._drawBackground(rgn, this._style.headerBackgroundColor);\n        // Draw the cell content for the paint region.\n        this._drawCells(rgn);\n        // Draw the horizontal grid lines.\n        this._drawHorizontalGridLines(rgn, this._style.headerHorizontalGridLineColor ||\n            this._style.headerGridLineColor);\n        // Draw the vertical grid lines.\n        this._drawVerticalGridLines(rgn, this._style.headerVerticalGridLineColor || this._style.headerGridLineColor);\n        // Get the cellgroups from the cell-region that intersects with the paint region\n        const cellGroups = CellGroup.getCellGroupsAtRegion(this.dataModel, rgn.region).filter(group => {\n            return this.cellGroupInteresectsRegion(group, rgn);\n        });\n        // Draw merged cells\n        this._paintMergedCells(cellGroups, rgn, this._style.headerBackgroundColor);\n    }\n    /**\n     * Draw the corner header region which intersects the dirty rect.\n     */\n    drawCornerHeaderRegion(rx, ry, rw, rh) {\n        // Get the visible content dimensions.\n        let contentW = this.headerWidth;\n        let contentH = this.headerHeight;\n        // Bail if there is no content to draw.\n        if (contentW <= 0 || contentH <= 0) {\n            return;\n        }\n        // Get the visible content origin.\n        let contentX = 0;\n        let contentY = 0;\n        // Bail if the dirty rect does not intersect the content area.\n        if (rx + rw <= contentX) {\n            return;\n        }\n        if (ry + rh <= contentY) {\n            return;\n        }\n        if (rx >= contentX + contentW) {\n            return;\n        }\n        if (ry >= contentY + contentH) {\n            return;\n        }\n        // Get the upper and lower bounds of the dirty content area.\n        let x1 = rx;\n        let y1 = ry;\n        let x2 = Math.min(rx + rw - 1, contentX + contentW - 1);\n        let y2 = Math.min(ry + rh - 1, contentY + contentH - 1);\n        // Convert the dirty content bounds into cell bounds.\n        let r1 = this._columnHeaderSections.indexOf(y1);\n        let c1 = this._rowHeaderSections.indexOf(x1);\n        let r2 = this._columnHeaderSections.indexOf(y2);\n        let c2 = this._rowHeaderSections.indexOf(x2);\n        // Handle a dirty content area larger than the cell count.\n        if (r2 < 0) {\n            r2 = this._columnHeaderSections.count - 1;\n        }\n        if (c2 < 0) {\n            c2 = this._rowHeaderSections.count - 1;\n        }\n        // Convert the cell bounds back to visible coordinates.\n        let x = this._rowHeaderSections.offsetOf(c1);\n        let y = this._columnHeaderSections.offsetOf(r1);\n        // Set up the paint region size variables.\n        let width = 0;\n        let height = 0;\n        // Allocate the section sizes arrays.\n        let rowSizes = new Array(r2 - r1 + 1);\n        let columnSizes = new Array(c2 - c1 + 1);\n        // Get the row sizes for the region.\n        for (let j = r1; j <= r2; ++j) {\n            let size = this._columnHeaderSections.sizeOf(j);\n            rowSizes[j - r1] = size;\n            height += size;\n        }\n        // Get the column sizes for the region.\n        for (let i = c1; i <= c2; ++i) {\n            let size = this._rowHeaderSections.sizeOf(i);\n            columnSizes[i - c1] = size;\n            width += size;\n        }\n        // Create the paint region object.\n        let rgn = {\n            region: 'corner-header',\n            xMin: x1,\n            yMin: y1,\n            xMax: x2,\n            yMax: y2,\n            x,\n            y,\n            width,\n            height,\n            row: r1,\n            column: c1,\n            rowSizes,\n            columnSizes\n        };\n        // Draw the background.\n        this._drawBackground(rgn, this._style.headerBackgroundColor);\n        // Draw the cell content for the paint region.\n        this._drawCells(rgn);\n        // Draw the horizontal grid lines.\n        this._drawHorizontalGridLines(rgn, this._style.headerHorizontalGridLineColor ||\n            this._style.headerGridLineColor);\n        // Draw the vertical grid lines.\n        this._drawVerticalGridLines(rgn, this._style.headerVerticalGridLineColor || this._style.headerGridLineColor);\n        // Get the cellgroups from the cell-region that intersects with the paint region\n        const cellGroups = CellGroup.getCellGroupsAtRegion(this.dataModel, rgn.region).filter(group => {\n            return this.cellGroupInteresectsRegion(group, rgn);\n        });\n        // Draw merged cells\n        this._paintMergedCells(cellGroups, rgn, this._style.headerBackgroundColor);\n    }\n    /**\n     * Draw the background for the given paint region.\n     */\n    _drawBackground(rgn, color) {\n        // Bail if there is no color to draw.\n        if (!color) {\n            return;\n        }\n        // Unpack the region.\n        let { xMin, yMin, xMax, yMax } = rgn;\n        // Fill the region with the specified color.\n        this._canvasGC.fillStyle = color;\n        this._canvasGC.fillRect(xMin, yMin, xMax - xMin + 1, yMax - yMin + 1);\n    }\n    /**\n     * Draw the row background for the given paint region.\n     */\n    _drawRowBackground(rgn, colorFn) {\n        // Bail if there is no color function.\n        if (!colorFn) {\n            return;\n        }\n        // Compute the X bounds for the row.\n        let x1 = Math.max(rgn.xMin, rgn.x);\n        let x2 = Math.min(rgn.x + rgn.width - 1, rgn.xMax);\n        // Draw the background for the rows in the region.\n        for (let y = rgn.y, j = 0, n = rgn.rowSizes.length; j < n; ++j) {\n            // Fetch the size of the row.\n            let size = rgn.rowSizes[j];\n            // Skip zero sized rows.\n            if (size === 0) {\n                continue;\n            }\n            // Get the background color for the row.\n            let color = colorFn(rgn.row + j);\n            // Fill the row with the background color if needed.\n            if (color) {\n                let y1 = Math.max(rgn.yMin, y);\n                let y2 = Math.min(y + size - 1, rgn.yMax);\n                this._canvasGC.fillStyle = color;\n                this._canvasGC.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n            }\n            // Increment the running Y coordinate.\n            y += size;\n        }\n    }\n    /**\n     * Draw the column background for the given paint region.\n     */\n    _drawColumnBackground(rgn, colorFn) {\n        // Bail if there is no color function.\n        if (!colorFn) {\n            return;\n        }\n        // Compute the Y bounds for the column.\n        let y1 = Math.max(rgn.yMin, rgn.y);\n        let y2 = Math.min(rgn.y + rgn.height - 1, rgn.yMax);\n        // Draw the background for the columns in the region.\n        for (let x = rgn.x, i = 0, n = rgn.columnSizes.length; i < n; ++i) {\n            // Fetch the size of the column.\n            let size = rgn.columnSizes[i];\n            // Skip zero sized columns.\n            if (size === 0) {\n                continue;\n            }\n            // Get the background color for the column.\n            let color = colorFn(rgn.column + i);\n            // Fill the column with the background color if needed.\n            if (color) {\n                let x1 = Math.max(rgn.xMin, x);\n                let x2 = Math.min(x + size - 1, rgn.xMax);\n                this._canvasGC.fillStyle = color;\n                this._canvasGC.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n            }\n            // Increment the running X coordinate.\n            x += size;\n        }\n    }\n    /**\n     * Returns column size\n     * @param region\n     * @param index\n     */\n    _getColumnSize(region, index) {\n        if (region === 'corner-header') {\n            return this._rowHeaderSections.sizeOf(index);\n        }\n        return this.columnSize(region, index);\n    }\n    /**\n     * Returns row size\n     * @param region\n     * @param index\n     */\n    _getRowSize(region, index) {\n        if (region === 'corner-header') {\n            return this._columnHeaderSections.sizeOf(index);\n        }\n        return this.rowSize(region, index);\n    }\n    /**\n     * Draw the cells for the given paint region.\n     */\n    _drawCells(rgn) {\n        // Bail if there is no data model.\n        if (!this._dataModel) {\n            return;\n        }\n        // Set up the cell config object for rendering.\n        let config = {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0,\n            region: rgn.region,\n            row: 0,\n            column: 0,\n            value: null,\n            metadata: DataModel.emptyMetadata\n        };\n        let groupIndex = -1;\n        // Save the buffer gc before wrapping.\n        this._bufferGC.save();\n        // Wrap the buffer gc for painting the cells.\n        let gc = new GraphicsContext(this._bufferGC);\n        let height = 0;\n        // Loop over the columns in the region.\n        for (let x = rgn.x, i = 0, n = rgn.columnSizes.length; i < n; ++i) {\n            // Fetch the size of the column.\n            let width = rgn.columnSizes[i];\n            // Skip zero sized columns.\n            if (width === 0) {\n                continue;\n            }\n            // Compute the column index.\n            let column = rgn.column + i;\n            // Update the config for the current column.\n            config.x = x;\n            config.width = width;\n            config.column = column;\n            // Loop over the rows in the column.\n            for (let y = rgn.y, j = 0, n = rgn.rowSizes.length; j < n; ++j) {\n                // Fetch the size of the row.\n                height = rgn.rowSizes[j];\n                // Skip zero sized rows.\n                if (height === 0) {\n                    continue;\n                }\n                // Compute the row index.\n                let row = rgn.row + j;\n                groupIndex = CellGroup.getGroupIndex(this.dataModel, config.region, row, column);\n                // For merged cell regions, don't do anything, we draw merged regions later.\n                if (groupIndex !== -1) {\n                    y += height;\n                    continue;\n                }\n                // Clear the buffer rect for the cell.\n                gc.clearRect(x, y, width, height);\n                let value = DataGrid._getCellValue(this.dataModel, rgn.region, row, column);\n                let metadata = DataGrid._getCellMetadata(this.dataModel, rgn.region, row, column);\n                // Update the config for the current cell.\n                config.y = y;\n                config.height = height;\n                config.width = width;\n                config.row = row;\n                config.value = value;\n                config.metadata = metadata;\n                // Get the renderer for the cell.\n                let renderer = this._cellRenderers.get(config);\n                // Save the GC state.\n                gc.save();\n                // Paint the cell into the off-screen buffer.\n                try {\n                    renderer.paint(gc, config);\n                }\n                catch (err) {\n                    console.error(err);\n                }\n                // Restore the GC state.\n                gc.restore();\n                // Compute the actual X bounds for the cell.\n                let x1 = Math.max(rgn.xMin, config.x);\n                let x2 = Math.min(config.x + config.width - 1, rgn.xMax);\n                // Compute the actual Y bounds for the cell.\n                let y1 = Math.max(rgn.yMin, config.y);\n                let y2 = Math.min(config.y + config.height - 1, rgn.yMax);\n                this._blitContent(this._buffer, x1, y1, x2 - x1 + 1, y2 - y1 + 1, x1, y1);\n                // Increment the running Y coordinate.\n                y += height;\n            }\n            // Restore the GC state.\n            gc.restore();\n            // Increment the running X coordinate.\n            x += width;\n        }\n        // Dispose of the wrapped gc.\n        gc.dispose();\n        // Restore the final buffer gc state.\n        this._bufferGC.restore();\n    }\n    // TODO Move this in the utils file (but we need the PaintRegion typing)\n    cellGroupInteresectsRegion(group, rgn) {\n        const rgnR1 = rgn.row;\n        const rgnR2 = rgn.row + rgn.rowSizes.length;\n        const rgnC1 = rgn.column;\n        const rgnC2 = rgn.column + rgn.columnSizes.length;\n        const dx = Math.min(group.r2, rgnR2) - Math.max(group.r1, rgnR1);\n        const dy = Math.min(group.c2, rgnC2) - Math.max(group.c1, rgnC1);\n        return dx >= 0 && dy >= 0;\n    }\n    static _getCellValue(dm, region, row, col) {\n        // Get the value for the cell.\n        try {\n            return dm.data(region, row, col);\n        }\n        catch (err) {\n            console.error(err);\n            return null;\n        }\n    }\n    static _getCellMetadata(dm, region, row, col) {\n        // Get the metadata for the cell.\n        try {\n            return dm.metadata(region, row, col);\n        }\n        catch (err) {\n            console.error(err);\n            return DataModel.emptyMetadata;\n        }\n    }\n    /**\n     * Paint group cells.\n     */\n    _paintMergedCells(cellGroups, rgn, backgroundColor) {\n        // Bail if there is no data model.\n        if (!this._dataModel) {\n            return;\n        }\n        // Set up the cell config object for rendering.\n        let config = {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0,\n            region: rgn.region,\n            row: 0,\n            column: 0,\n            value: null,\n            metadata: DataModel.emptyMetadata\n        };\n        if (backgroundColor) {\n            this._canvasGC.fillStyle = backgroundColor;\n        }\n        // Set the line width for the grid lines.\n        this._canvasGC.lineWidth = 1;\n        // Save the buffer gc before wrapping.\n        this._bufferGC.save();\n        // Wrap the buffer gc for painting the cells.\n        let gc = new GraphicsContext(this._bufferGC);\n        for (const group of cellGroups) {\n            let width = 0;\n            for (let c = group.c1; c <= group.c2; c++) {\n                width += this._getColumnSize(rgn.region, c);\n            }\n            let height = 0;\n            for (let r = group.r1; r <= group.r2; r++) {\n                height += this._getRowSize(rgn.region, r);\n            }\n            let value = DataGrid._getCellValue(this.dataModel, rgn.region, group.r1, group.c1);\n            let metadata = DataGrid._getCellMetadata(this.dataModel, rgn.region, group.r1, group.c2);\n            let x = 0;\n            let y = 0;\n            switch (rgn.region) {\n                case 'body':\n                    x =\n                        this._columnSections.offsetOf(group.c1) +\n                            this.headerWidth -\n                            this._scrollX;\n                    y =\n                        this._rowSections.offsetOf(group.r1) +\n                            this.headerHeight -\n                            this._scrollY;\n                    break;\n                case 'column-header':\n                    x =\n                        this._columnSections.offsetOf(group.c1) +\n                            this.headerWidth -\n                            this._scrollX;\n                    y = this._rowSections.offsetOf(group.r1);\n                    break;\n                case 'row-header':\n                    x = this._columnSections.offsetOf(group.c1);\n                    y =\n                        this._rowSections.offsetOf(group.r1) +\n                            this.headerHeight -\n                            this._scrollY;\n                    break;\n                case 'corner-header':\n                    x = this._columnSections.offsetOf(group.c1);\n                    y = this._rowSections.offsetOf(group.r1);\n                    break;\n            }\n            config.x = x;\n            config.y = y;\n            config.width = width;\n            config.height = height;\n            config.region = rgn.region;\n            config.row = group.r1;\n            config.column = group.c1;\n            config.value = value;\n            config.metadata = metadata;\n            // Compute the actual X bounds for the cell.\n            const x1 = Math.max(rgn.xMin, x);\n            const x2 = Math.min(x + width - 2, rgn.xMax);\n            // Compute the actual Y bounds for the cell.\n            const y1 = Math.max(rgn.yMin, y);\n            const y2 = Math.min(y + height - 2, rgn.yMax);\n            if (x2 <= x1 || y2 <= y1) {\n                continue;\n            }\n            // Draw the background.\n            if (backgroundColor) {\n                this._canvasGC.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n            }\n            // Get the renderer for the cell.\n            let renderer = this._cellRenderers.get(config);\n            // Clear the buffer rect for the cell.\n            gc.clearRect(config.x, config.y, width, height);\n            // Save the GC state.\n            gc.save();\n            // Paint the cell into the off-screen buffer.\n            try {\n                renderer.paint(gc, config);\n            }\n            catch (err) {\n                console.error(err);\n            }\n            // Restore the GC state.\n            gc.restore();\n            this._blitContent(this._buffer, x1, y1, x2 - x1 + 1, y2 - y1 + 1, x1, y1);\n        }\n        // Dispose of the wrapped gc.\n        gc.dispose();\n        // Restore the final buffer gc state.\n        this._bufferGC.restore();\n    }\n    /**\n     * Draw the horizontal grid lines for the given paint region.\n     */\n    _drawHorizontalGridLines(rgn, color) {\n        // Bail if there is no color to draw.\n        if (!color) {\n            return;\n        }\n        // Compute the X bounds for the horizontal lines.\n        const x1 = Math.max(rgn.xMin, rgn.x);\n        const x2 = Math.min(rgn.x + rgn.width, rgn.xMax + 1);\n        // Begin the path for the grid lines.\n        this._canvasGC.beginPath();\n        // Set the line width for the grid lines.\n        this._canvasGC.lineWidth = 1;\n        // Fetch the geometry.\n        const bh = this.bodyHeight;\n        const ph = this.pageHeight;\n        // Fetch the number of grid lines to be drawn.\n        let n = rgn.rowSizes.length;\n        // Adjust the count down if the last line shouldn't be drawn.\n        if (this._stretchLastRow && ph > bh) {\n            if (rgn.row + n === this._rowSections.count) {\n                n -= 1;\n            }\n        }\n        // Draw the horizontal grid lines.\n        for (let y = rgn.y, j = 0; j < n; ++j) {\n            // Fetch the size of the row.\n            let size = rgn.rowSizes[j];\n            // Skip zero sized rows.\n            if (size === 0) {\n                continue;\n            }\n            // Compute the Y position of the line.\n            let pos = y + size - 1;\n            // Draw the line if it's in range of the dirty rect.\n            if (pos >= rgn.yMin && pos <= rgn.yMax) {\n                this._canvasGC.moveTo(x1, pos + 0.5);\n                this._canvasGC.lineTo(x2, pos + 0.5);\n            }\n            // Increment the running Y coordinate.\n            y += size;\n        }\n        // Stroke the lines with the specified color.\n        this._canvasGC.strokeStyle = color;\n        this._canvasGC.stroke();\n    }\n    /**\n     * Draw the vertical grid lines for the given paint region.\n     */\n    _drawVerticalGridLines(rgn, color) {\n        // Bail if there is no color to draw.\n        if (!color) {\n            return;\n        }\n        // Compute the Y bounds for the vertical lines.\n        const y1 = Math.max(rgn.yMin, rgn.y);\n        const y2 = Math.min(rgn.y + rgn.height, rgn.yMax + 1);\n        // Begin the path for the grid lines\n        this._canvasGC.beginPath();\n        // Set the line width for the grid lines.\n        this._canvasGC.lineWidth = 1;\n        // Fetch the geometry.\n        const bw = this.bodyWidth;\n        const pw = this.pageWidth;\n        // Fetch the number of grid lines to be drawn.\n        let n = rgn.columnSizes.length;\n        // Adjust the count down if the last line shouldn't be drawn.\n        if (this._stretchLastColumn && pw > bw) {\n            if (rgn.column + n === this._columnSections.count) {\n                n -= 1;\n            }\n        }\n        // Draw the vertical grid lines.\n        for (let x = rgn.x, i = 0; i < n; ++i) {\n            // Fetch the size of the column.\n            let size = rgn.columnSizes[i];\n            // Skip zero sized columns.\n            if (size === 0) {\n                continue;\n            }\n            // Compute the X position of the line.\n            let pos = x + size - 1;\n            // Draw the line if it's in range of the dirty rect.\n            if (pos >= rgn.xMin && pos <= rgn.xMax) {\n                this._canvasGC.moveTo(pos + 0.5, y1);\n                this._canvasGC.lineTo(pos + 0.5, y2);\n            }\n            // Increment the running X coordinate.\n            x += size;\n        }\n        // Stroke the lines with the specified color.\n        this._canvasGC.strokeStyle = color;\n        this._canvasGC.stroke();\n    }\n    /**\n     * Draw the body selections for the data grid.\n     */\n    _drawBodySelections() {\n        // Fetch the selection model.\n        let model = this._selectionModel;\n        // Bail early if there are no selections.\n        if (!model || model.isEmpty) {\n            return;\n        }\n        // Fetch the selection colors.\n        let fill = this._style.selectionFillColor;\n        let stroke = this._style.selectionBorderColor;\n        // Bail early if there is nothing to draw.\n        if (!fill && !stroke) {\n            return;\n        }\n        // Fetch the scroll geometry.\n        let sx = this._scrollX;\n        let sy = this._scrollY;\n        // Get the first visible cell of the grid.\n        let r1 = this._rowSections.indexOf(sy);\n        let c1 = this._columnSections.indexOf(sx);\n        // Bail early if there are no visible cells.\n        if (r1 < 0 || c1 < 0) {\n            return;\n        }\n        // Fetch the extra geometry.\n        let bw = this.bodyWidth;\n        let bh = this.bodyHeight;\n        let pw = this.pageWidth;\n        let ph = this.pageHeight;\n        let hw = this.headerWidth;\n        let hh = this.headerHeight;\n        // Get the last visible cell of the grid.\n        let r2 = this._rowSections.indexOf(sy + ph);\n        let c2 = this._columnSections.indexOf(sx + pw);\n        // Fetch the max row and column.\n        let maxRow = this._rowSections.count - 1;\n        let maxColumn = this._columnSections.count - 1;\n        // Clamp the last cell if the void space is visible.\n        r2 = r2 < 0 ? maxRow : r2;\n        c2 = c2 < 0 ? maxColumn : c2;\n        // Fetch the overlay gc.\n        let gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Set up the body clipping rect.\n        gc.beginPath();\n        gc.rect(hw, hh, pw, ph);\n        gc.clip();\n        // Set up the gc style.\n        if (fill) {\n            gc.fillStyle = fill;\n        }\n        if (stroke) {\n            gc.strokeStyle = stroke;\n            gc.lineWidth = 1;\n        }\n        // Iterate over the selections.\n        for (let s of model.selections()) {\n            // Skip the section if it's not visible.\n            if (s.r1 < r1 && s.r2 < r1) {\n                continue;\n            }\n            if (s.r1 > r2 && s.r2 > r2) {\n                continue;\n            }\n            if (s.c1 < c1 && s.c2 < c1) {\n                continue;\n            }\n            if (s.c1 > c2 && s.c2 > c2) {\n                continue;\n            }\n            // Clamp the cell to the model bounds.\n            let sr1 = Math.max(0, Math.min(s.r1, maxRow));\n            let sc1 = Math.max(0, Math.min(s.c1, maxColumn));\n            let sr2 = Math.max(0, Math.min(s.r2, maxRow));\n            let sc2 = Math.max(0, Math.min(s.c2, maxColumn));\n            // Swap index order if needed.\n            let tmp;\n            if (sr1 > sr2) {\n                tmp = sr1;\n                sr1 = sr2;\n                sr2 = tmp;\n            }\n            if (sc1 > sc2) {\n                tmp = sc1;\n                sc1 = sc2;\n                sc2 = tmp;\n            }\n            const joinedGroup = CellGroup.joinCellGroupWithMergedCellGroups(this.dataModel, { r1: sr1, r2: sr2, c1: sc1, c2: sc2 }, 'body');\n            sr1 = joinedGroup.r1;\n            sr2 = joinedGroup.r2;\n            sc1 = joinedGroup.c1;\n            sc2 = joinedGroup.c2;\n            // Convert to pixel coordinates.\n            let x1 = this._columnSections.offsetOf(sc1) - sx + hw;\n            let y1 = this._rowSections.offsetOf(sr1) - sy + hh;\n            let x2 = this._columnSections.extentOf(sc2) - sx + hw;\n            let y2 = this._rowSections.extentOf(sr2) - sy + hh;\n            // Adjust the trailing X coordinate for column stretch.\n            if (this._stretchLastColumn && pw > bw && sc2 === maxColumn) {\n                x2 = hw + pw - 1;\n            }\n            // Adjust the trailing Y coordinate for row stretch.\n            if (this._stretchLastRow && ph > bh && sr2 === maxRow) {\n                y2 = hh + ph - 1;\n            }\n            // Clamp the bounds to just outside of the clipping rect.\n            x1 = Math.max(hw - 1, x1);\n            y1 = Math.max(hh - 1, y1);\n            x2 = Math.min(hw + pw + 1, x2);\n            y2 = Math.min(hh + ph + 1, y2);\n            // Skip zero sized ranges.\n            if (x2 < x1 || y2 < y1) {\n                continue;\n            }\n            // Fill the rect if needed.\n            if (fill) {\n                gc.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n            }\n            // Stroke the rect if needed.\n            if (stroke) {\n                gc.strokeRect(x1 - 0.5, y1 - 0.5, x2 - x1 + 1, y2 - y1 + 1);\n            }\n        }\n        // Restore the gc state.\n        gc.restore();\n    }\n    /**\n     * Draw the row header selections for the data grid.\n     */\n    _drawRowHeaderSelections() {\n        // Fetch the selection model.\n        let model = this._selectionModel;\n        // Bail early if there are no selections or if the selectionMode is the entire column.\n        if (!model || model.isEmpty || model.selectionMode == 'column') {\n            return;\n        }\n        // Bail early if the row headers are not visible.\n        if (this.headerWidth === 0 || this.pageHeight === 0) {\n            return;\n        }\n        // Fetch the selection colors.\n        let fill = this._style.headerSelectionFillColor;\n        let stroke = this._style.headerSelectionBorderColor;\n        // Bail early if there is nothing to draw.\n        if (!fill && !stroke) {\n            return;\n        }\n        // Fetch common geometry.\n        let sy = this._scrollY;\n        let bh = this.bodyHeight;\n        let ph = this.pageHeight;\n        let hw = this.headerWidth;\n        let hh = this.headerHeight;\n        let rs = this._rowSections;\n        // Fetch the overlay gc.\n        let gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Set up the header clipping rect.\n        gc.beginPath();\n        gc.rect(0, hh, hw, ph);\n        gc.clip();\n        // Set up the gc style.\n        if (fill) {\n            gc.fillStyle = fill;\n        }\n        if (stroke) {\n            gc.strokeStyle = stroke;\n            gc.lineWidth = 1;\n        }\n        // Fetch the max row.\n        let maxRow = rs.count - 1;\n        // Fetch the visible rows.\n        let r1 = rs.indexOf(sy);\n        let r2 = rs.indexOf(sy + ph - 1);\n        r2 = r2 < 0 ? maxRow : r2;\n        // Iterate over the visible rows.\n        for (let j = r1; j <= r2; ++j) {\n            // Skip rows which aren't selected.\n            if (!model.isRowSelected(j)) {\n                continue;\n            }\n            // Get the dimensions of the row.\n            let y = rs.offsetOf(j) - sy + hh;\n            let h = rs.sizeOf(j);\n            // Adjust the height for row stretch.\n            if (this._stretchLastRow && ph > bh && j === maxRow) {\n                h = hh + ph - y;\n            }\n            // Skip zero sized rows.\n            if (h === 0) {\n                continue;\n            }\n            // Fill the rect if needed.\n            if (fill) {\n                gc.fillRect(0, y, hw, h);\n            }\n            // Draw the border if needed.\n            if (stroke) {\n                gc.beginPath();\n                gc.moveTo(hw - 0.5, y - 1);\n                gc.lineTo(hw - 0.5, y + h);\n                gc.stroke();\n            }\n        }\n        // Restore the gc state.\n        gc.restore();\n    }\n    /**\n     * Draw the column header selections for the data grid.\n     */\n    _drawColumnHeaderSelections() {\n        // Fetch the selection model.\n        let model = this._selectionModel;\n        // Bail early if there are no selections or if the selectionMode is the entire row\n        if (!model || model.isEmpty || model.selectionMode == 'row') {\n            return;\n        }\n        // Bail early if the column headers are not visible.\n        if (this.headerHeight === 0 || this.pageWidth === 0) {\n            return;\n        }\n        // Fetch the selection colors.\n        let fill = this._style.headerSelectionFillColor;\n        let stroke = this._style.headerSelectionBorderColor;\n        // Bail early if there is nothing to draw.\n        if (!fill && !stroke) {\n            return;\n        }\n        // Fetch common geometry.\n        let sx = this._scrollX;\n        let bw = this.bodyWidth;\n        let pw = this.pageWidth;\n        let hw = this.headerWidth;\n        let hh = this.headerHeight;\n        let cs = this._columnSections;\n        // Fetch the overlay gc.\n        let gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Set up the header clipping rect.\n        gc.beginPath();\n        gc.rect(hw, 0, pw, hh);\n        gc.clip();\n        // Set up the gc style.\n        if (fill) {\n            gc.fillStyle = fill;\n        }\n        if (stroke) {\n            gc.strokeStyle = stroke;\n            gc.lineWidth = 1;\n        }\n        // Fetch the max column.\n        let maxCol = cs.count - 1;\n        // Fetch the visible columns.\n        let c1 = cs.indexOf(sx);\n        let c2 = cs.indexOf(sx + pw - 1);\n        c2 = c2 < 0 ? maxCol : c2;\n        // Iterate over the visible columns.\n        for (let i = c1; i <= c2; ++i) {\n            // Skip columns which aren't selected.\n            if (!model.isColumnSelected(i)) {\n                continue;\n            }\n            // Get the dimensions of the column.\n            let x = cs.offsetOf(i) - sx + hw;\n            let w = cs.sizeOf(i);\n            // Adjust the width for column stretch.\n            if (this._stretchLastColumn && pw > bw && i === maxCol) {\n                w = hw + pw - x;\n            }\n            // Skip zero sized columns.\n            if (w === 0) {\n                continue;\n            }\n            // Fill the rect if needed.\n            if (fill) {\n                gc.fillRect(x, 0, w, hh);\n            }\n            // Draw the border if needed.\n            if (stroke) {\n                gc.beginPath();\n                gc.moveTo(x - 1, hh - 0.5);\n                gc.lineTo(x + w, hh - 0.5);\n                gc.stroke();\n            }\n        }\n        // Restore the gc state.\n        gc.restore();\n    }\n    /**\n     * Draw the overlay cursor for the data grid.\n     */\n    _drawCursor() {\n        // Fetch the selection model.\n        let model = this._selectionModel;\n        // Bail early if there is no cursor.\n        if (!model || model.isEmpty || model.selectionMode !== 'cell') {\n            return;\n        }\n        // Extract the style information.\n        let fill = this._style.cursorFillColor;\n        let stroke = this._style.cursorBorderColor;\n        // Bail early if there is nothing to draw.\n        if (!fill && !stroke) {\n            return;\n        }\n        // Fetch the cursor location.\n        let startRow = model.cursorRow;\n        let startColumn = model.cursorColumn;\n        // Fetch the max row and column.\n        let maxRow = this._rowSections.count - 1;\n        let maxColumn = this._columnSections.count - 1;\n        // Bail early if the cursor is out of bounds.\n        if (startRow < 0 || startRow > maxRow) {\n            return;\n        }\n        if (startColumn < 0 || startColumn > maxColumn) {\n            return;\n        }\n        let endRow = startRow;\n        let endColumn = startColumn;\n        const joinedGroup = CellGroup.joinCellGroupWithMergedCellGroups(this.dataModel, { r1: startRow, r2: endRow, c1: startColumn, c2: endColumn }, 'body');\n        startRow = joinedGroup.r1;\n        endRow = joinedGroup.r2;\n        startColumn = joinedGroup.c1;\n        endColumn = joinedGroup.c2;\n        // Fetch geometry.\n        let sx = this._scrollX;\n        let sy = this._scrollY;\n        let bw = this.bodyWidth;\n        let bh = this.bodyHeight;\n        let pw = this.pageWidth;\n        let ph = this.pageHeight;\n        let hw = this.headerWidth;\n        let hh = this.headerHeight;\n        let vw = this._viewportWidth;\n        let vh = this._viewportHeight;\n        // Get the cursor bounds in viewport coordinates.\n        let x1 = this._columnSections.offsetOf(startColumn) - sx + hw;\n        let x2 = this._columnSections.extentOf(endColumn) - sx + hw;\n        let y1 = this._rowSections.offsetOf(startRow) - sy + hh;\n        let y2 = this._rowSections.extentOf(endRow) - sy + hh;\n        // Adjust the trailing X coordinate for column stretch.\n        if (this._stretchLastColumn && pw > bw && startColumn === maxColumn) {\n            x2 = vw - 1;\n        }\n        // Adjust the trailing Y coordinate for row stretch.\n        if (this._stretchLastRow && ph > bh && startRow === maxRow) {\n            y2 = vh - 1;\n        }\n        // Skip zero sized cursors.\n        if (x2 < x1 || y2 < y1) {\n            return;\n        }\n        // Bail early if the cursor is off the screen.\n        if (x1 - 1 >= vw || y1 - 1 >= vh || x2 + 1 < hw || y2 + 1 < hh) {\n            return;\n        }\n        // Fetch the overlay gc.\n        let gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Set up the body clipping rect.\n        gc.beginPath();\n        gc.rect(hw, hh, pw, ph);\n        gc.clip();\n        // Clear any existing overlay content.\n        gc.clearRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n        // Fill the cursor rect if needed.\n        if (fill) {\n            // Set up the fill style.\n            gc.fillStyle = fill;\n            // Fill the cursor rect.\n            gc.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n        }\n        // Stroke the cursor border if needed.\n        if (stroke) {\n            // Set up the stroke style.\n            gc.strokeStyle = stroke;\n            gc.lineWidth = 2;\n            // Stroke the cursor rect.\n            gc.strokeRect(x1, y1, x2 - x1, y2 - y1);\n        }\n        // Restore the gc state.\n        gc.restore();\n    }\n    /**\n     * Draw the overlay shadows for the data grid.\n     */\n    _drawShadows() {\n        // Fetch the scroll shadow from the style.\n        let shadow = this._style.scrollShadow;\n        // Bail early if there is no shadow to draw.\n        if (!shadow) {\n            return;\n        }\n        // Fetch the scroll position.\n        let sx = this._scrollX;\n        let sy = this._scrollY;\n        // Fetch maximum scroll position.\n        let sxMax = this.maxScrollX;\n        let syMax = this.maxScrollY;\n        // Fetch the header width and height.\n        let hw = this.headerWidth;\n        let hh = this.headerHeight;\n        // Fetch the page width and height.\n        let pw = this.pageWidth;\n        let ph = this.pageHeight;\n        // Fetch the viewport width and height.\n        let vw = this._viewportWidth;\n        let vh = this._viewportHeight;\n        // Fetch the body width and height.\n        let bw = this.bodyWidth;\n        let bh = this.bodyHeight;\n        // Adjust the body size for row and column stretch.\n        if (this._stretchLastRow && ph > bh) {\n            bh = ph;\n        }\n        if (this._stretchLastColumn && pw > bw) {\n            bw = pw;\n        }\n        // Fetch the gc object.\n        let gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Draw the column header shadow if needed.\n        if (sy > 0) {\n            // Set up the gradient coordinates.\n            let x0 = 0;\n            let y0 = hh;\n            let x1 = 0;\n            let y1 = y0 + shadow.size;\n            // Create the gradient object.\n            let grad = gc.createLinearGradient(x0, y0, x1, y1);\n            // Set the gradient stops.\n            grad.addColorStop(0, shadow.color1);\n            grad.addColorStop(0.5, shadow.color2);\n            grad.addColorStop(1, shadow.color3);\n            // Set up the rect coordinates.\n            let x = 0;\n            let y = hh;\n            let w = hw + Math.min(pw, bw - sx);\n            let h = shadow.size;\n            // Fill the shadow rect with the fill style.\n            gc.fillStyle = grad;\n            gc.fillRect(x, y, w, h);\n        }\n        // Draw the row header shadow if needed.\n        if (sx > 0) {\n            // Set up the gradient coordinates.\n            let x0 = hw;\n            let y0 = 0;\n            let x1 = x0 + shadow.size;\n            let y1 = 0;\n            // Create the gradient object.\n            let grad = gc.createLinearGradient(x0, y0, x1, y1);\n            // Set the gradient stops.\n            grad.addColorStop(0, shadow.color1);\n            grad.addColorStop(0.5, shadow.color2);\n            grad.addColorStop(1, shadow.color3);\n            // Set up the rect coordinates.\n            let x = hw;\n            let y = 0;\n            let w = shadow.size;\n            let h = hh + Math.min(ph, bh - sy);\n            // Fill the shadow rect with the fill style.\n            gc.fillStyle = grad;\n            gc.fillRect(x, y, w, h);\n        }\n        // Draw the column footer shadow if needed.\n        if (sy < syMax) {\n            // Set up the gradient coordinates.\n            let x0 = 0;\n            let y0 = vh;\n            let x1 = 0;\n            let y1 = vh - shadow.size;\n            // Create the gradient object.\n            let grad = gc.createLinearGradient(x0, y0, x1, y1);\n            // Set the gradient stops.\n            grad.addColorStop(0, shadow.color1);\n            grad.addColorStop(0.5, shadow.color2);\n            grad.addColorStop(1, shadow.color3);\n            // Set up the rect coordinates.\n            let x = 0;\n            let y = vh - shadow.size;\n            let w = hw + Math.min(pw, bw - sx);\n            let h = shadow.size;\n            // Fill the shadow rect with the fill style.\n            gc.fillStyle = grad;\n            gc.fillRect(x, y, w, h);\n        }\n        // Draw the row footer shadow if needed.\n        if (sx < sxMax) {\n            // Set up the gradient coordinates.\n            let x0 = vw;\n            let y0 = 0;\n            let x1 = vw - shadow.size;\n            let y1 = 0;\n            // Create the gradient object.\n            let grad = gc.createLinearGradient(x0, y0, x1, y1);\n            // Set the gradient stops.\n            grad.addColorStop(0, shadow.color1);\n            grad.addColorStop(0.5, shadow.color2);\n            grad.addColorStop(1, shadow.color3);\n            // Set up the rect coordinates.\n            let x = vw - shadow.size;\n            let y = 0;\n            let w = shadow.size;\n            let h = hh + Math.min(ph, bh - sy);\n            // Fill the shadow rect with the fill style.\n            gc.fillStyle = grad;\n            gc.fillRect(x, y, w, h);\n        }\n        // Restore the gc state.\n        gc.restore();\n    }\n}\n/**\n * The namespace for the `DataGrid` class statics.\n */\n(function (DataGrid) {\n    /**\n     * A generic format function for the copy handler.\n     *\n     * @param args - The format args for the function.\n     *\n     * @returns The string representation of the value.\n     *\n     * #### Notes\n     * This function uses `String()` to coerce a value to a string.\n     */\n    function copyFormatGeneric(args) {\n        if (args.value === null || args.value === undefined) {\n            return '';\n        }\n        return String(args.value);\n    }\n    DataGrid.copyFormatGeneric = copyFormatGeneric;\n    /**\n     * The default theme for a data grid.\n     */\n    DataGrid.defaultStyle = {\n        voidColor: '#F3F3F3',\n        backgroundColor: '#FFFFFF',\n        gridLineColor: 'rgba(20, 20, 20, 0.15)',\n        headerBackgroundColor: '#F3F3F3',\n        headerGridLineColor: 'rgba(20, 20, 20, 0.25)',\n        selectionFillColor: 'rgba(49, 119, 229, 0.2)',\n        selectionBorderColor: 'rgba(0, 107, 247, 1.0)',\n        cursorBorderColor: 'rgba(0, 107, 247, 1.0)',\n        headerSelectionFillColor: 'rgba(20, 20, 20, 0.1)',\n        headerSelectionBorderColor: 'rgba(0, 107, 247, 1.0)',\n        scrollShadow: {\n            size: 10,\n            color1: 'rgba(0, 0, 0, 0.20)',\n            color2: 'rgba(0, 0, 0, 0.05)',\n            color3: 'rgba(0, 0, 0, 0.00)'\n        }\n    };\n    /**\n     * The default sizes for a data grid.\n     */\n    DataGrid.defaultSizes = {\n        rowHeight: 20,\n        columnWidth: 64,\n        rowHeaderWidth: 64,\n        columnHeaderHeight: 20\n    };\n    /**\n     * The default minimum sizes for a data grid.\n     */\n    DataGrid.minimumSizes = {\n        rowHeight: 20,\n        columnWidth: 10,\n        rowHeaderWidth: 10,\n        columnHeaderHeight: 20\n    };\n    /**\n     * The default copy config for a data grid.\n     */\n    DataGrid.defaultCopyConfig = {\n        separator: '\\t',\n        format: copyFormatGeneric,\n        headers: 'none',\n        warningThreshold: 1e6\n    };\n})(DataGrid || (DataGrid = {}));\n/**\n * The namespace for the module implementation details.\n */\nvar Private$1;\n(function (Private) {\n    /**\n     * A singleton `scroll-request` conflatable message.\n     */\n    Private.ScrollRequest = new ConflatableMessage('scroll-request');\n    /**\n     * A singleton `overlay-paint-request` conflatable message.\n     */\n    Private.OverlayPaintRequest = new ConflatableMessage('overlay-paint-request');\n    /**\n     * Create a new zero-sized canvas element.\n     */\n    function createCanvas() {\n        let canvas = document.createElement('canvas');\n        canvas.width = 0;\n        canvas.height = 0;\n        return canvas;\n    }\n    Private.createCanvas = createCanvas;\n    /**\n     * Checks whether a given regions has merged cells in it.\n     * @param dataModel grid's data model.\n     * @param region the paint region to be checked.\n     * @returns boolean.\n     */\n    function regionHasMergedCells(dataModel, region) {\n        const regionGroups = CellGroup.getCellGroupsAtRegion(dataModel, region);\n        return regionGroups.length > 0;\n    }\n    Private.regionHasMergedCells = regionHasMergedCells;\n    /**\n     * A conflatable message which merges dirty paint regions.\n     */\n    class PaintRequest extends ConflatableMessage {\n        /**\n         * Construct a new paint request messages.\n         *\n         * @param region - The cell region for the paint.\n         *\n         * @param r1 - The top-left row of the dirty region.\n         *\n         * @param c1 - The top-left column of the dirty region.\n         *\n         * @param r2 - The bottom-right row of the dirty region.\n         *\n         * @param c2 - The bottom-right column of the dirty region.\n         */\n        constructor(region, r1, c1, r2, c2) {\n            super('paint-request');\n            this._region = region;\n            this._r1 = r1;\n            this._c1 = c1;\n            this._r2 = r2;\n            this._c2 = c2;\n        }\n        /**\n         * The cell region for the paint.\n         */\n        get region() {\n            return this._region;\n        }\n        /**\n         * The top-left row of the dirty region.\n         */\n        get r1() {\n            return this._r1;\n        }\n        /**\n         * The top-left column of the dirty region.\n         */\n        get c1() {\n            return this._c1;\n        }\n        /**\n         * The bottom-right row of the dirty region.\n         */\n        get r2() {\n            return this._r2;\n        }\n        /**\n         * The bottom-right column of the dirty region.\n         */\n        get c2() {\n            return this._c2;\n        }\n        /**\n         * Conflate this message with another paint request.\n         */\n        conflate(other) {\n            // Bail early if the request is already painting everything.\n            if (this._region === 'all') {\n                return true;\n            }\n            // Any region can conflate with the `'all'` region.\n            if (other._region === 'all') {\n                this._region = 'all';\n                return true;\n            }\n            // Otherwise, do not conflate with a different region.\n            if (this._region !== other._region) {\n                return false;\n            }\n            // Conflate the region to the total boundary.\n            this._r1 = Math.min(this._r1, other._r1);\n            this._c1 = Math.min(this._c1, other._c1);\n            this._r2 = Math.max(this._r2, other._r2);\n            this._c2 = Math.max(this._c2, other._c2);\n            return true;\n        }\n    }\n    Private.PaintRequest = PaintRequest;\n    /**\n     * A conflatable message for resizing rows.\n     */\n    class RowResizeRequest extends ConflatableMessage {\n        /**\n         * Construct a new row resize request.\n         *\n         * @param region - The row region which holds the section.\n         *\n         * @param index - The index of row in the region.\n         *\n         * @param size - The target size of the section.\n         */\n        constructor(region, index, size) {\n            super('row-resize-request');\n            this._region = region;\n            this._index = index;\n            this._size = size;\n        }\n        /**\n         * The row region which holds the section.\n         */\n        get region() {\n            return this._region;\n        }\n        /**\n         * The index of the row in the region.\n         */\n        get index() {\n            return this._index;\n        }\n        /**\n         * The target size of the section.\n         */\n        get size() {\n            return this._size;\n        }\n        /**\n         * Conflate this message with another row resize request.\n         */\n        conflate(other) {\n            if (this._region !== other._region || this._index !== other._index) {\n                return false;\n            }\n            this._size = other._size;\n            return true;\n        }\n    }\n    Private.RowResizeRequest = RowResizeRequest;\n    /**\n     * A conflatable message for resizing columns.\n     */\n    class ColumnResizeRequest extends ConflatableMessage {\n        /**\n         * Construct a new column resize request.\n         *\n         * @param region - The column region which holds the section.\n         *\n         * @param index - The index of column in the region.\n         *\n         * @param size - The target size of the section.\n         *               If null, then infer the size to fit.\n         */\n        constructor(region, index, size) {\n            super('column-resize-request');\n            this._region = region;\n            this._index = index;\n            this._size = size;\n        }\n        /**\n         * The column region which holds the section.\n         */\n        get region() {\n            return this._region;\n        }\n        /**\n         * The index of the column in the region.\n         */\n        get index() {\n            return this._index;\n        }\n        /**\n         * The target size of the section.\n         */\n        get size() {\n            return this._size;\n        }\n        /**\n         * Conflate this message with another column resize request.\n         */\n        conflate(other) {\n            if (this._region !== other._region || this._index !== other._index) {\n                return false;\n            }\n            this._size = other._size;\n            return true;\n        }\n    }\n    Private.ColumnResizeRequest = ColumnResizeRequest;\n})(Private$1 || (Private$1 = {}));\n\n/**\n * A data model implementation for in-memory JSON data.\n */\nclass JSONModel extends DataModel {\n    /**\n     * Create a data model with static JSON data.\n     *\n     * @param options - The options for initializing the data model.\n     */\n    constructor(options) {\n        super();\n        let split = Private.splitFields(options.schema);\n        this._data = options.data;\n        this._bodyFields = split.bodyFields;\n        this._headerFields = split.headerFields;\n        this._missingValues = Private.createMissingMap(options.schema);\n    }\n    /**\n     * Get the row count for a region in the data model.\n     *\n     * @param region - The row region of interest.\n     *\n     * @returns - The row count for the region.\n     */\n    rowCount(region) {\n        if (region === 'body') {\n            return this._data.length;\n        }\n        return 1; // TODO multiple column-header rows?\n    }\n    /**\n     * Get the column count for a region in the data model.\n     *\n     * @param region - The column region of interest.\n     *\n     * @returns - The column count for the region.\n     */\n    columnCount(region) {\n        if (region === 'body') {\n            return this._bodyFields.length;\n        }\n        return this._headerFields.length;\n    }\n    /**\n     * Get the data value for a cell in the data model.\n     *\n     * @param region - The cell region of interest.\n     *\n     * @param row - The row index of the cell of interest.\n     *\n     * @param column - The column index of the cell of interest.\n     *\n     * @returns - The data value for the specified cell.\n     *\n     * #### Notes\n     * A `missingValue` as defined by the schema is converted to `null`.\n     */\n    data(region, row, column) {\n        // Set up the field and value variables.\n        let field;\n        let value;\n        // Look up the field and value for the region.\n        switch (region) {\n            case 'body':\n                field = this._bodyFields[column];\n                value = this._data[row][field.name];\n                break;\n            case 'column-header':\n                field = this._bodyFields[column];\n                value = field.title || field.name;\n                break;\n            case 'row-header':\n                field = this._headerFields[column];\n                value = this._data[row][field.name];\n                break;\n            case 'corner-header':\n                field = this._headerFields[column];\n                value = field.title || field.name;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Test whether the value is a missing value.\n        let missing = this._missingValues !== null &&\n            typeof value === 'string' &&\n            this._missingValues[value] === true;\n        // Return the final value.\n        return missing ? null : value;\n    }\n    /**\n     * Get the metadata for a cell in the data model.\n     *\n     * @param region - The cell region of interest.\n     *\n     * @param row - The row index of the cell of of interest.\n     *\n     * @param column - The column index of the cell of interest.\n     *\n     * @returns The metadata for the cell.\n     */\n    metadata(region, row, column) {\n        if (region === 'body' || region === 'column-header') {\n            return this._bodyFields[column];\n        }\n        return this._headerFields[column];\n    }\n}\n/**\n * The namespace for the module implementation details.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Split the schema fields into header and body fields.\n     */\n    function splitFields(schema) {\n        // Normalize the primary keys.\n        let primaryKeys;\n        if (schema.primaryKey === undefined) {\n            primaryKeys = [];\n        }\n        else if (typeof schema.primaryKey === 'string') {\n            primaryKeys = [schema.primaryKey];\n        }\n        else {\n            primaryKeys = schema.primaryKey;\n        }\n        // Separate the fields for the body and header.\n        let bodyFields = [];\n        let headerFields = [];\n        for (let field of schema.fields) {\n            if (primaryKeys.indexOf(field.name) === -1) {\n                bodyFields.push(field);\n            }\n            else {\n                headerFields.push(field);\n            }\n        }\n        // Return the separated fields.\n        return { bodyFields, headerFields };\n    }\n    Private.splitFields = splitFields;\n    /**\n     * Create a missing values map for a schema.\n     *\n     * This returns `null` if there are no missing values.\n     */\n    function createMissingMap(schema) {\n        // Bail early if there are no missing values.\n        if (!schema.missingValues || schema.missingValues.length === 0) {\n            return null;\n        }\n        // Collect the missing values into a map.\n        let result = Object.create(null);\n        for (let value of schema.missingValues) {\n            result[value] = true;\n        }\n        // Return the populated map.\n        return result;\n    }\n    Private.createMissingMap = createMissingMap;\n})(Private || (Private = {}));\n\nexport { BasicKeyHandler, BasicMouseHandler, BasicSelectionModel, BooleanCellEditor, CellEditor, CellEditorController, CellGroup, CellRenderer, DataGrid, DataModel, DateCellEditor, DynamicOptionCellEditor, GraphicsContext, HyperlinkRenderer, InputCellEditor, IntegerCellEditor, IntegerInputValidator, JSONModel, MutableDataModel, NumberCellEditor, NumberInputValidator, OptionCellEditor, PassInputValidator, RendererMap, SectionList, SelectionModel, TextCellEditor, TextInputValidator, TextRenderer, resolveOption };\n//# sourceMappingURL=index.es6.js.map\n"],"names":["BasicKeyHandler","constructor","this","_disposed","isDisposed","dispose","onKeyDown","grid","event","editable","selectionModel","cursorRow","cursorColumn","input","String","fromCharCode","keyCode","test","row","column","cell","editorController","edit","getKeyboardLayout","keyForKeydownEvent","stopPropagation","preventDefault","onArrowLeft","onArrowRight","onArrowUp","onArrowDown","onPageUp","onPageDown","onEscape","onDelete","onKeyC","moveCursor","shiftKey","scrollToCursor","model","shift","accel","Platform","scrollTo","scrollY","scrollByStep","mode","selectionMode","r","c","cs","currentSelection","r1","r2","c1","c2","cr","cc","clear","select","scrollToColumn","maxScrollX","Infinity","scrollX","scrollToRow","maxScrollY","scrollByPage","n","Math","floor","pageHeight","defaultSizes","rowHeight","isEmpty","dataModel","maxRow","rowCount","maxColumn","columnCount","s","selections","sr1","max","min","sc1","sr2","sc2","setData","copyToClipboard","CellRenderer","resolveOption","option","config","TextRenderer","options","super","font","textColor","backgroundColor","verticalAlignment","horizontalAlignment","horizontalPadding","format","formatGeneric","elideDirection","wrapText","paint","gc","drawBackground","drawText","color","fillStyle","fillRect","x","y","width","height","getText","text","vAlign","hAlign","boxHeight","textHeight","measureFontHeight","textX","textY","boxWidth","beginPath","rect","clip","textAlign","textBaseline","fillText","textWidth","measureText","wordsInColumn","split","curY","textInCurrentLine","length","curLineTextWidth","i","curSubString","substring","curSubStringWidth","nextLineText","curWord","incrementedText","join","incrementedTextWidth","elide","textArr","slice","missing","value","undefined","formatFixed","digits","Number","toFixed","formatPrecision","toPrecision","formatExponential","toExponential","formatIntlNumber","nft","Intl","NumberFormat","locales","formatDate","Date","toDateString","formatTime","toTimeString","formatISODateTime","toISOString","formatUTCDateTime","toUTCString","formatIntlDateTime","dtf","DateTimeFormat","Private$6","fontHeightCache","fontMeasurementGC","normFont","fontMeasurementNode","style","document","body","appendChild","offsetHeight","removeChild","Private","Object","create","node","createElement","position","top","left","visibility","textContent","canvas","getContext","HyperlinkRenderer","url","urlName","CellGroup","areCellGroupsIntersectingAtAxis","group1","group2","axis","areCellGroupsIntersecting","getGroupIndex","rgn","numGroups","groupCount","group","getGroup","groupIndex","getCellGroupsAtRegion","groupsAtRegion","push","joinCellGroups","groups","startRow","MAX_VALUE","endRow","MIN_VALUE","startColumn","endColumn","joinCellGroupWithMergedCellGroups","region","joinedGroup","mergedCellGroups","g","mergedGroup","getCellGroupsAtRow","groupsAtRow","getCellGroupsAtColumn","groupsAtColumn","joinCellGroupsIntersectingAtAxis","regions","groupsAtAxis","concat","mergedGroupAtAxis","splice","BasicMouseHandler","_pressData","release","type","timeout","override","onMouseHover","hit","hitTest","clientX","clientY","handle","Private$5","resizeHandleForHitTest","cursor","cursorForHandle","createCellConfigObject","renderer","cellRenderers","get","viewport","onMouseLeave","onMouseDown","window","open","Drag","localX","localY","index","size","columnSize","rowSize","selectionGroup","onMouseMove","data","dy","resizeRow","dx","resizeColumn","lx","ly","mapToLocal","hw","headerWidth","hh","headerHeight","vpw","viewportWidth","vph","viewportHeight","sx","sy","msx","msy","computeTimeout","setTimeout","autoselect","vx","vy","mapToVirtual","bodyWidth","bodyHeight","rowAt","columnAt","onMouseUp","onMouseDoubleClick","colIndex","colRegion","onContextMenu","onWheel","deltaX","deltaY","deltaMode","ds","columnWidth","pageWidth","scrollBy","cursorMap","pressData","metadata","lw","lh","tw","th","result","scrollToCell","delta","abs","right","bottom","hyperlink","none","SelectionModel","_changed","Signal","_selectionMode","changed","connect","onDataModelChanged","isRowSelected","some","Private$4","containsRow","isColumnSelected","containsColumn","isCellSelected","containsCell","sender","args","emitChanged","emit","selection","BasicSelectionModel","arguments","_cursorRow","_cursorColumn","_cursorRectIndex","_selections","moveCursorWithinSelections","direction","firstSelection","cursorRect","dr","dc","newRow","newColumn","moveToNextRect","moveToPreviousRect","pop","alreadySelected","filter","lr","lc","j","DEFAULT_INVALID_INPUT_MESSAGE","PassInputValidator","validate","valid","TextInputValidator","minLength","NaN","maxLength","pattern","message","isNaN","IntegerInputValidator","NumberInputValidator","CellEditor","inputChanged","validityNotification","_validInput","_gridWheelEventHandler","removeEventListener","_closeValidityNotification","viewportOccluder","onCommit","onCancel","validator","createValidatorBasedOnType","updatePosition","addEventListener","_addContainer","startEditing","cancel","validInput","getInput","error","console","log","setValidity","editorContainer","classList","remove","add","Notification","target","placement","show","RegExp","constraint","minimum","maximum","getCellInfo","columnX","rowY","cellGroup","columnOffset","rowOffset","cellInfo","commit","cursorMovement","className","pointerEvents","close","InputCellEditor","handleEvent","_onKeyDown","_onBlur","_onInput","_unbindEvents","createWidget","deserialize","focus","bindEvents","toString","spellcheck","inputType","TextCellEditor","NumberCellEditor","step","trim","floatValue","parseFloat","Error","IntegerCellEditor","intValue","parseInt","DateCellEditor","_createWidget","_input","_deserialize","_bindEvents","BooleanCellEditor","checked","OptionCellEditor","_isMultiSelect","_select","multiple","values","item","selected","indexOf","selectedOptions","editorContainerRect","getBoundingClientRect","maxHeight","Array","isArray","items","enum","bind","DynamicOptionCellEditor","listId","list","id","valueSet","Set","forEach","setAttribute","Widget","createNode","_message","addClass","setFlag","_target","_placement","_evtMouseDown","update","messageNode","getElementsByClassName","onBeforeAttach","msg","onAfterDetach","onUpdateRequest","targetRect","alignItems","justifyContent","innerHTML","button","container","CellEditorController","_editor","_cell","_typeBasedOverrides","Map","_metadataBasedOverrides","setEditor","identifier","editor","set","key","_metadataIdentifierToKey","_onCommit","_onCancel","_getEditor","response","_getDataTypeKey","_objectToKey","object","str","_metadataMatchesIdentifier","hasOwnProperty","identifierValue","metadataValue","_getMetadataBasedEditor","editorMatched","dtKey","has","DataModel","emptyMetadata","MutableDataModel","freeze","GraphicsContext","context","_context","_state","Private$3","State","next","restore","strokeStyle","lineCap","lineDashOffset","lineJoin","lineWidth","miterLimit","shadowBlur","shadowColor","shadowOffsetX","shadowOffsetY","imageSmoothingEnabled","globalAlpha","globalCompositeOperation","getLineDash","setLineDash","segments","rotate","angle","scale","transform","m11","m12","m21","m22","translate","setTransform","save","closePath","isPointInPath","fillRule","arc","radius","startAngle","endAngle","anticlockwise","arcTo","x1","y1","x2","y2","bezierCurveTo","cp1x","cp1y","cp2x","cp2y","ellipse","radiusX","radiusY","rotation","lineTo","moveTo","quadraticCurveTo","cpx","cpy","w","h","fill","stroke","clearRect","maxWidth","strokeRect","strokeText","createLinearGradient","x0","y0","createRadialGradient","r0","createPattern","image","repetition","createImageData","apply","getImageData","sw","sh","putImageData","drawImage","drawFocusIfNeeded","element","pi","pool","static","state","other","RendererMap","fallback","_values","_fallback","err","SectionList","_count","_length","_sections","_minimumSize","minimumSize","_defaultSize","defaultSize","count","prev","curr","offset","clampSize","ArrayExt","Private$2","offsetCmp","section","span","offsetOf","indexCmp","extentOf","sizeOf","resize","insert","removed","k","move","destination","i1","k1","i2","k2","pivot","count1","count2","span1","span2","k3","reset","DataGrid","_scrollX","_scrollY","_viewportWidth","_viewportHeight","_mousedown","_keyHandler","_mouseHandler","_vScrollBarMinWidth","_hScrollBarMinHeight","_dpiRatio","ceil","devicePixelRatio","_dataModel","_selectionModel","_editingEnabled","_style","defaultStyle","_stretchLastRow","stretchLastRow","_stretchLastColumn","stretchLastColumn","_headerVisibility","headerVisibility","_cellRenderers","_copyConfig","copyConfig","defaultCopyConfig","_onRenderersChanged","minimumSizes","_rowSections","_columnSections","_rowHeaderSections","rowHeaderWidth","_columnHeaderSections","columnHeaderHeight","_canvas","Private$1","createCanvas","_buffer","_overlay","_canvasGC","_bufferGC","_overlayGC","_viewport","tabIndex","outline","_vScrollBar","ScrollBar","orientation","_hScrollBar","_scrollCorner","_editorController","MessageLoop","hide","thumbMoved","_onThumbMoved","pageRequested","_onPageRequested","stepRequested","_onStepRequested","GridLayout","layout","rowSpacing","columnSpacing","fitPolicy","setRowStretch","setColumnStretch","addWidget","_releaseMouse","disconnect","_onDataModelChanged","_syncViewport","_onSelectionsChanged","repaintOverlay","keyHandler","mouseHandler","repaintContent","totalWidth","totalHeight","controller","editingEnabled","enabled","canvasGC","rowSections","columnSections","rowHeaderSections","columnHeaderSections","nr","vy1","vy2","nc","vx1","vx2","iter","onlyOne","currentSel","dir","rows","columns","ScrollRequest","bh","ph","bw","pw","RowResizeRequest","ColumnResizeRequest","resetRows","resetColumns","fitColumnNames","area","padding","numCols","colsRemaining","rowColumnCount","_fitRowColumnHeaders","bodyColumnCount","_fitBodyColumnHeaders","ox","oy","from","alert","br","bc","rhc","chr","separator","headers","warningThreshold","colCount","cellCount","confirm","cells","lines","map","ClipboardExt","processMessage","vsbLimits","ElementExt","hsbLimits","minWidth","minHeight","messageHook","handler","_processViewportMessage","activate","_evtKeyDown","_evtMouseMove","_evtMouseUp","_evtMouseDoubleClick","_evtMouseLeave","_evtContextMenu","_evtWheel","_refreshDPI","onActivateRequest","preventScroll","onBeforeShow","onResize","_syncScrollState","PaintRequest","repaintRegion","OverlayPaintRequest","_getMaxWidthInColumn","columnRegion","columnHeaderRegion","_getMaxWidthInArea","rowRegion","numRows","configs","_val","idx","_getConfig","sort","_getTextToRender","_getCellTextWidth","col","location","_getCellValue","_getCellMetadata","_resizeCanvasIfNeeded","maxW","maxH","curW","curH","expW","expH","needBlit","hasVScroll","isHidden","hasHScroll","vsw","hsh","apw","aph","needVScroll","needHScroll","setHidden","page","_scrollTo","_onViewportResize","_onViewportScrollRequest","_onViewportPaintRequest","_onViewportOverlayPaintRequest","_onViewportRowResizeRequest","_onViewportColumnResizeRequest","isVisible","offsetWidth","round","oldWidth","oldHeight","paintContent","_paintOverlay","bx","by","xMin","yMin","xMax","yMax","rs","rhs","chs","_resizeRow","_resizeColumnHeader","_resizeColumn","_resizeRowHeader","_onRowsInserted","_onColumnsInserted","_onRowsRemoved","_onColumnsRemoved","_onRowsMoved","_onColumnsMoved","_onCellsChanged","_onModelReset","rowSpan","columnSpan","nrh","nch","drh","dch","dpiRatio","oldSize","newSize","vw","vh","pos","_blitContent","cellGroups","paintRgn","headerBackgroundColor","_paintMergedCells","adjustedSize","contentX","contentY","contentWidth","contentHeight","dxArea","dyArea","cellgroups","source","rx","ry","rw","rh","_drawVoidRegion","_drawBodyRegion","_drawRowHeaderRegion","_drawColumnHeaderRegion","drawCornerHeaderRegion","_drawBodySelections","_drawRowHeaderSelections","_drawColumnHeaderSelections","_drawCursor","_drawShadows","voidColor","contentW","contentH","rowSizes","columnSizes","dh","dw","_drawBackground","_drawRowBackground","rowBackgroundColor","_drawColumnBackground","columnBackgroundColor","_drawCells","_drawHorizontalGridLines","horizontalGridLineColor","gridLineColor","_drawVerticalGridLines","verticalGridLineColor","cellGroupInteresectsRegion","headerHorizontalGridLineColor","headerGridLineColor","headerVerticalGridLineColor","colorFn","_getColumnSize","_getRowSize","rgnR1","rgnR2","rgnC1","rgnC2","dm","selectionFillColor","selectionBorderColor","tmp","headerSelectionFillColor","headerSelectionBorderColor","maxCol","cursorFillColor","cursorBorderColor","shadow","scrollShadow","sxMax","syMax","grad","addColorStop","color1","color2","color3","copyFormatGeneric","ConflatableMessage","regionHasMergedCells","regionGroups","_region","_r1","_c1","_r2","_c2","conflate","_index","_size","JSONModel","splitFields","schema","_data","_bodyFields","bodyFields","_headerFields","headerFields","_missingValues","createMissingMap","field","name","title","primaryKeys","primaryKey","fields","missingValues"],"sourceRoot":""}